Index: .github/workflows/python-package.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.github/workflows/python-package.yml b/.github/workflows/python-package.yml
--- a/.github/workflows/python-package.yml	(revision c2255b793bae21a32b1274275ae60b44cdd94d7b)
+++ b/.github/workflows/python-package.yml	(date 1681078345878)
@@ -32,4 +32,4 @@
       - name: Test with PyTest
         run: tox run --skip-pkg-install
         env:
-          TF_XLA_FLAGS: "--tf_xla_auto_jit=2 --tf_xla_cpu_global_jit"
\ No newline at end of file
+          TF_XLA_FLAGS: "--tf_xla_auto_jit=2 --tf_xla_cpu_global_jit"
Index: .github/workflows/test-installation.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.github/workflows/test-installation.yml b/.github/workflows/test-installation.yml
new file mode 100644
--- /dev/null	(date 1681078345878)
+++ b/.github/workflows/test-installation.yml	(date 1681078345878)
@@ -0,0 +1,76 @@
+# The main idea of this test is to verify quantus is usable with and without tensorflow,torch,transformers.
+# Integration test runs in separate workflow, since every test case requires separate isolated environment.
+name: Test Installation
+
+on: [ push, workflow_dispatch ]
+
+jobs:
+
+  test_tensorflow:
+
+    runs-on: ubuntu-latest
+    strategy:
+      fail-fast: false
+
+    steps:
+      - uses: actions/checkout@v3
+      - name: Setup Tox
+        uses: ./.github/actions/setup-tox/
+        with:
+          python-version: '3.10'
+
+      - name: Test with pytest
+        run: tox run -e tf_only
+        env:
+          TF_XLA_FLAGS: "--tf_xla_auto_jit=2 --tf_xla_cpu_global_jit"
+
+  test_tf_nlp:
+
+    runs-on: ubuntu-latest
+    strategy:
+      fail-fast: false
+
+    steps:
+      - uses: actions/checkout@v3
+      - name: Setup Tox
+        uses: ./.github/actions/setup-tox/
+        with:
+          python-version: '3.10'
+
+      - name: Test with pytest
+        run: tox run -e tf_nlp
+        env:
+          TF_XLA_FLAGS: "--tf_xla_auto_jit=2 --tf_xla_cpu_global_jit"
+
+  test_torch:
+
+    runs-on: ubuntu-latest
+    strategy:
+      fail-fast: false
+
+    steps:
+      - uses: actions/checkout@v3
+      - name: Setup Tox
+        uses: ./.github/actions/setup-tox/
+        with:
+          python-version: '3.10'
+
+      - name: Test with pytest
+        run: tox run -e torch_only
+
+
+  test_torch_nlp:
+
+    runs-on: ubuntu-latest
+    strategy:
+      fail-fast: false
+
+    steps:
+      - uses: actions/checkout@v3
+      - name: Setup Tox
+        uses: ./.github/actions/setup-tox/
+        with:
+          python-version: '3.10'
+
+      - name: Test with pytest
+        run: tox run -e torch_nlp
\ No newline at end of file
Index: quantus/functions/nlp_explanation_func/__init__.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/quantus/functions/nlp_explanation_func/__init__.py b/quantus/functions/nlp_explanation_func/__init__.py
new file mode 100644
--- /dev/null	(date 1681078345879)
+++ b/quantus/functions/nlp_explanation_func/__init__.py	(date 1681078345879)
@@ -0,0 +1,4 @@
+from quantus.functions.nlp_explanation_func.nlp_explanation_func import (
+    generate_text_classification_explanations,
+    ShapConfig,
+)
Index: quantus/functions/nlp_explanation_func/lime.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/quantus/functions/nlp_explanation_func/lime.py b/quantus/functions/nlp_explanation_func/lime.py
new file mode 100644
--- /dev/null	(date 1681078345879)
+++ b/quantus/functions/nlp_explanation_func/lime.py	(date 1681078345879)
@@ -0,0 +1,118 @@
+# This file is part of Quantus.
+# Quantus is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
+# Quantus is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
+# You should have received a copy of the GNU Lesser General Public License along with Quantus. If not, see <https://www.gnu.org/licenses/>.
+# Quantus project URL: <https://github.com/understandable-machine-intelligence-lab/Quantus>.
+
+from __future__ import annotations
+
+import functools
+from typing import Callable, List, Optional, Sequence, NamedTuple
+
+import numpy as np
+from sklearn import linear_model, metrics
+
+from quantus.helpers.collection_utils import value_or_default
+from quantus.helpers.model.text_classifier import TextClassifier
+from quantus.helpers.types import Explanation
+
+__all__ = ["explain_lime", "LimeConfig"]
+
+
+class LimeConfig(NamedTuple):
+    alpha: float = 1.0
+    solver: str = "cholesky"
+    seed: int = 42
+    num_samples: int = 1000
+    mask_token: str = "[UNK]"
+    distance_fn: Callable = functools.partial(
+        metrics.pairwise.pairwise_distances, metric="cosine"
+    )
+    kernel: Optional[Callable] = None
+    distance_scale: float = 100.0
+
+
+def explain_lime(
+    model: TextClassifier,
+    x_batch: List[str],
+    y_batch: np.ndarray,
+    config: Optional[LimeConfig] = None,
+) -> List[Explanation]:
+    """
+    LIME explains classifiers by returning a feature attribution score
+    for each input feature. It works as follows:
+
+    1) Sample perturbation masks. First the number of masked features is sampled
+        (uniform, at least 1), and then that number of features are randomly chosen
+        to be masked out (without replacement).
+    2) Get predictions from the model for those perturbations. Use these as labels.
+    3) Fit a linear model to associate the input positions indicated by the binary
+        mask with the resulting predicted label.
+
+    The resulting feature importance scores are the linear model coefficients for
+    the requested output class or (in case of regression) the output score.
+
+    This is a reimplementation of the original https://github.com/marcotcr/lime
+    and is tested for compatibility. This version supports applying LIME to text input.
+
+    Returns
+    -------
+
+    """
+    config = value_or_default(config, lambda: LimeConfig())
+    kernel = value_or_default(config.kernel, lambda: exponential_kernel)
+    a_batch = []
+    input_ids, predict_kwargs = model.tokenizer.get_input_ids(x_batch)
+
+    for i, (x, y) in enumerate(zip(x_batch, y_batch)):
+        ids = input_ids[i]
+        tokens = model.tokenizer.convert_ids_to_tokens(ids)
+        masks = sample_masks(config.num_samples + 1, len(tokens), seed=config.seed)
+        assert (
+            masks.shape[0] == config.num_samples + 1
+        ), "Expected num_samples + 1 masks."
+        all_true_mask = np.ones_like(masks[0], dtype=bool)
+        masks[0] = all_true_mask
+
+        perturbations = get_perturbations(tokens, masks, config.mask_token)
+        logits = model.predict(perturbations)
+        outputs = logits[:, y]
+        # fmt: off
+        distances = config.distance_fn(all_true_mask.reshape(1, -1), masks).flatten()  # noqa
+        # fmt: on
+        distances = config.distance_scale * distances
+        distances = kernel(distances)
+
+        # Fit a linear model for the requested output class.
+        local_surrogate_model = linear_model.Ridge(
+            alpha=config.alpha, solver=config.solver, random_state=config.seed
+        ).fit(masks, outputs, sample_weight=distances)
+
+        score = local_surrogate_model.coef_  # noqa
+        a_batch.append((tokens, score))
+    return a_batch
+
+
+# ---------------------- internal -----------------------
+def sample_masks(num_samples: int, num_features: int, seed: Optional[int] = None):
+    rng = np.random.RandomState(seed)
+    positions = np.tile(np.arange(num_features), (num_samples, 1))
+    permutation_fn = np.vectorize(rng.permutation, signature="(n)->(n)", cache=True)
+    permutations = permutation_fn(positions)  # A shuffled range of positions.
+    num_disabled_features = rng.randint(1, num_features + 1, (num_samples, 1))
+    return permutations >= num_disabled_features
+
+
+def get_perturbations(
+    tokens: Sequence[str], masks: np.ndarray, mask_token: str
+) -> List[str]:
+    """Returns strings with the masked tokens replaced with `mask_token`."""
+    result = []
+    for mask in masks:
+        parts = [t if mask[i] else mask_token for i, t in enumerate(tokens)]
+        result.append(" ".join(parts))
+    return result
+
+
+def exponential_kernel(distance: float, kernel_width: float = 25) -> np.ndarray:
+    return np.sqrt(np.exp(-(distance**2) / kernel_width**2))
Index: quantus/functions/nlp_explanation_func/nlp_explanation_func.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/quantus/functions/nlp_explanation_func/nlp_explanation_func.py b/quantus/functions/nlp_explanation_func/nlp_explanation_func.py
new file mode 100644
--- /dev/null	(date 1681078345879)
+++ b/quantus/functions/nlp_explanation_func/nlp_explanation_func.py	(date 1681078345879)
@@ -0,0 +1,144 @@
+# This file is part of Quantus.
+# Quantus is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
+# Quantus is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
+# You should have received a copy of the GNU Lesser General Public License along with Quantus. If not, see <https://www.gnu.org/licenses/>.
+# Quantus project URL: <https://github.com/understandable-machine-intelligence-lab/Quantus>.
+
+"""Framework-agnostic explanation functions."""
+from __future__ import annotations
+
+import logging
+from importlib import util
+from typing import List, Optional, NamedTuple
+
+import numpy as np
+from transformers import pipeline
+
+from quantus.functions.nlp_explanation_func.lime import explain_lime
+from quantus.helpers.collection_utils import (
+    safe_as_array,
+    value_or_default,
+)
+from quantus.helpers.model.text_classifier import TextClassifier
+from quantus.helpers.nlp_utils import map_explanations, is_transformers_available
+from quantus.helpers.tf_utils import is_tensorflow_model, is_tensorflow_available
+from quantus.helpers.torch_utils import is_torch_available, is_torch_model
+from quantus.helpers.types import Explanation
+
+log = logging.getLogger(__name__)
+
+
+if is_tensorflow_available():
+
+    from quantus.functions.nlp_explanation_func.tf_explanation_func import tf_explain
+
+if is_torch_available():
+    from quantus.functions.nlp_explanation_func.torch_explanation_func import (
+        torch_explain,
+    )
+
+
+if is_transformers_available():
+    from transformers.utils.hub import PushToHubMixin
+
+
+def is_shap_available() -> bool:
+    return util.find_spec("shap") is not None
+
+
+if is_shap_available():
+    import shap
+
+
+__all__ = ["ShapConfig", "generate_text_classification_explanations"]
+
+
+class ShapConfig(NamedTuple):
+    max_evals: int = 500
+    seed: int = 42
+    batch_size: str | int = 64
+    silent: bool = True
+
+
+# TODO shap is not maintained, get rid of dependecy on it.
+
+
+def explain_shap(
+    model: TextClassifier,
+    x_batch: List[str],
+    y_batch: np.ndarray,
+    *,
+    config: Optional[ShapConfig] = None,
+) -> List[Explanation]:
+    """
+    Generate explanations using shapley values. This method depends on shap pip package.
+
+    References
+    ----------
+        - Lundberg et al., 2017, A Unified Approach to Interpreting Model Predictions,
+            https://papers.nips.cc/paper/7062-a-unified-approach-to-interpreting-model-predictions
+        - https://github.com/slundberg/shap
+    """
+
+    if not is_shap_available():
+        raise ValueError("SHAP requires `shap` package installation.")
+
+    if not (
+        is_transformers_available() or isinstance(model.get_model(), PushToHubMixin)
+    ):
+        raise ValueError(
+            "SHAP explanations are only supported for models from HuggingFace Hub"
+        )
+
+    config = value_or_default(config, lambda: ShapConfig())
+
+    predict_fn = pipeline(
+        "text-classification",
+        model=model.get_model(),
+        tokenizer=model.tokenizer.tokenizer,
+        top_k=None,
+        device=getattr(model, "device", None),
+    )
+    explainer = shap.Explainer(predict_fn, seed=config.seed)
+
+    shapley_values = explainer(
+        x_batch,
+        batch_size=config.batch_size,
+        max_evals=config.max_evals,
+        silent=config.silent,
+    )
+    return [(i.feature_names, i.values[:, y]) for i, y in zip(shapley_values, y_batch)]
+
+
+def generate_text_classification_explanations(
+    model: TextClassifier,
+    *args,
+    method: Optional[str] = None,
+    **kwargs,
+) -> List[Explanation] | np.ndarray:
+    """A main 'entrypoint' for calling all text-classification explanation functions available in Quantus."""
+
+    if method is None:
+        logging.warning(
+            f"Using quantus 'explain' function as an explainer without specifying 'method' (string) "
+            f"in kwargs will produce a simple 'GradientNorm' explanation.\n",
+        )
+        method = "GradNorm"
+
+    if "device" in kwargs:
+        # device is saved in model instance.
+        kwargs.pop("device")
+
+    if method == "LIME":
+        return explain_lime(model, *args, **kwargs)
+    if method == "SHAP":
+        return explain_shap(model, *args, **kwargs)
+
+    if is_tensorflow_model(model):
+        return tf_explain(model, *args, method=method, **kwargs)
+
+    if is_torch_model(model):
+        result = torch_explain(model, *args, method=method, **kwargs)
+        return map_explanations(result, safe_as_array)  # noqa
+
+    raise ValueError(f"Unable to identify DNN framework of the model.")
Index: quantus/functions/nlp_explanation_func/tf_explanation_func.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/quantus/functions/nlp_explanation_func/tf_explanation_func.py b/quantus/functions/nlp_explanation_func/tf_explanation_func.py
new file mode 100644
--- /dev/null	(date 1681078345879)
+++ b/quantus/functions/nlp_explanation_func/tf_explanation_func.py	(date 1681078345879)
@@ -0,0 +1,899 @@
+# This file is part of Quantus.
+# Quantus is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
+# Quantus is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
+# You should have received a copy of the GNU Lesser General Public License along with Quantus. If not, see <https://www.gnu.org/licenses/>.
+# Quantus project URL: <https://github.com/understandable-machine-intelligence-lab/Quantus>.
+
+"""Explanation functions for TensorFlow models."""
+from __future__ import annotations
+
+from functools import partial, singledispatch
+from typing import Callable, Dict, List, Optional, Union, NamedTuple, Literal
+
+import numpy as np
+import tensorflow as tf
+import tensorflow_probability as tfp
+from tensorflow_probability.python.distributions.normal import Normal
+from operator import itemgetter
+
+from quantus.helpers.types import Explanation
+from quantus.helpers.collection_utils import value_or_default, map_dict
+from quantus.helpers.tf_utils import is_xla_compatible_platform
+from quantus.helpers.model.tf_hf_model import TFHuggingFaceTextClassifier
+
+# Just to save some typing effort
+_BaselineFn = Callable[[tf.Tensor], tf.Tensor]
+_TextOrVector = Union[List[str], tf.Tensor]
+_Scores = Union[List[Explanation], tf.Tensor]
+NoiseType = Literal["multiplicative", "additive"]
+_USE_XLA = is_xla_compatible_platform()
+
+
+# ------------ configs -------------
+
+
+class IntGradConfig(NamedTuple):
+    """
+    num_steps:
+        Number of interpolated samples, which should be generated, default=10.
+    baseline_fn:
+        Function used to created baseline values, by default will create zeros tensor. Alternatively, e.g.,
+        embedding for [UNK] token could be used.
+    batch_interpolated_inputs:
+        Indicates if interpolated inputs should be stacked into 1 bigger batch.
+        This speeds up the explanation, however can be very memory intensive.
+    """
+
+    num_steps: int = 10
+    baseline_fn: _BaselineFn = None
+    batch_interpolated_inputs: bool = True
+
+    def resolve_function(self):
+        fn = value_or_default(self.baseline_fn, lambda: zeros_baseline)
+
+        return IntGradConfig(
+            num_steps=self.num_steps,
+            batch_interpolated_inputs=self.batch_interpolated_inputs,
+            baseline_fn=fn,
+        )
+
+
+class NoiseGradConfig(NamedTuple):
+    """
+    mean:
+        Mean of normal distribution, from which noise applied to model's weights is sampled, default=1.0.
+    std:
+        Standard deviation of normal distribution, from which noise applied to model's weights is sampled, default=0.2.
+    n:
+        Number of times noise is applied to weights, default=10.
+    explain_fn:
+        Baseline explanation function. If string provided must be one of GradNorm, GradXInput, IntGrad, default=IntGrad.
+        Passing additional kwargs is not supported, please use partial application from functools package instead.
+
+    noise_type:
+        If multiplicative weights and input embeddings will be multiplied by noise.
+        If additive noise will be added to weights and input embeddings.
+
+    seed:
+        PRNG seed used for noise generating distributions.
+    """
+
+    n: int = 10
+    mean: float = 1.0
+    std: float = 0.2
+    explain_fn: Union[Callable, str] = "IntGrad"
+    noise_type: NoiseType = "multiplicative"
+    seed: int = 42
+
+    def resolve_functions(self):
+        explain_fn = resolve_noise_grad_baseline_explain_fn(self.explain_fn)
+        return NoiseGradConfig(
+            n=self.n,
+            mean=self.mean,
+            std=self.std,
+            explain_fn=explain_fn,
+            noise_type=self.noise_type,
+            seed=self.seed,
+        )
+
+
+class NoiseGradPlusPlusConfig(NamedTuple):
+    """
+    mean:
+        Mean of normal distribution, from which noise applied to model's weights is sampled, default=1.0.
+    sg_mean:
+        Mean of normal distribution, from which noise applied to input embeddings is sampled, default=0.0.
+    std:
+        Standard deviation of normal distribution, from which noise applied to model's weights is sampled, default=0.2.
+    sg_std:
+        Standard deviation of normal distribution, from which noise applied to input embeddings is sampled, default=0.4.
+    n:
+        Number of times noise is applied to weights, default=10.
+      m:
+        Number of times noise is applied to input embeddings, default=10
+    explain_fn:
+        Baseline explanation function. If string provided must be one of GradNorm, GradXInput, IntGrad, default=IntGrad.
+        Passing additional kwargs is not supported, please use partial application from functools package instead.
+    noise_type:
+        If multiplicative weights and input embeddings will be multiplied by noise.
+        If additive noise will be added to weights and input embeddings.
+
+    seed:
+        PRNG seed used for noise generating distributions.
+    """
+
+    n: int = 10
+    m: int = 10
+    mean: float = 1.0
+    sg_mean: float = 0.0
+    std: float = 0.2
+    sg_std: float = 0.4
+    explain_fn: Union[Callable, str] = "IntGrad"
+    noise_type: str = "multiplicative"
+    seed: int = 42
+
+    def resolve_functions(self):
+        explain_fn = resolve_noise_grad_baseline_explain_fn(self.explain_fn)
+        return NoiseGradPlusPlusConfig(
+            n=self.n,
+            m=self.m,
+            mean=self.mean,
+            sg_mean=self.sg_mean,
+            std=self.std,
+            sg_std=self.sg_std,
+            explain_fn=explain_fn,
+            noise_type=self.noise_type,
+            seed=self.seed,
+        )
+
+
+def default_int_grad_config() -> IntGradConfig:
+    return IntGradConfig()
+
+
+def default_noise_grad_config() -> NoiseGradConfig:
+    return NoiseGradConfig().resolve_functions()
+
+
+def default_noise_grad_pp_config() -> NoiseGradPlusPlusConfig:
+    return NoiseGradPlusPlusConfig().resolve_functions()
+
+
+def available_xai_methods() -> Dict[str, Callable]:
+    return {
+        "GradNorm": gradient_norm,
+        "GradXInput": gradient_x_input,
+        "IntGrad": integrated_gradients,
+        "NoiseGrad": noise_grad,
+        "NoiseGrad++": noise_grad_plus_plus,
+    }
+
+
+# ----------------- "Entry Point" --------------------
+
+
+def available_noise_grad_xai_methods() -> Dict[str, Callable]:
+    return {
+        "GradNorm": _gradient_norm,
+        "GradXInput": _gradient_x_input,
+        "IntGrad": _integrated_gradients,
+    }
+
+
+def tf_explain(
+    model: TFHuggingFaceTextClassifier,
+    x_batch: _TextOrVector,
+    y_batch: np.ndarray,
+    method: str,
+    **kwargs,
+) -> _Scores:
+    """Execute gradient based explanation method."""
+
+    method_mapping = available_xai_methods()
+
+    if method not in method_mapping:
+        raise ValueError(
+            f"Unsupported explanation method: {method}, supported are: {list(method_mapping.keys())}"
+        )
+    explain_fn = method_mapping[method]
+
+    def as_tensor(x):
+        if isinstance(x, np.ndarray):
+            return tf.constant(x)
+        else:
+            return x
+
+    y_batch = as_tensor(y_batch)
+    kwargs = tf.nest.map_structure(as_tensor, kwargs)
+
+    return explain_fn(model, x_batch, y_batch, **kwargs)
+
+
+# ----------------- Quantus-conform API -------------------
+# functools.singledispatch supports only dispatching based on 1st argument type,
+# which in our case is model, so we need to reorder them, so x_batch (text or embedding) is in 1st place,
+# and we and up dispatching to different functions based on input type.
+
+
+def gradient_norm(
+    model: TFHuggingFaceTextClassifier,
+    x_batch: _TextOrVector,
+    y_batch: tf.Tensor,
+    **kwargs,
+) -> _Scores:
+    """
+    A baseline GradientNorm text-classification explainer.
+    The implementation is based on https://github.com/PAIR-code/lit/blob/main/lit_nlp/components/gradient_maps.py#L38.
+    GradientNorm explanation algorithm is:
+        - Convert inputs to models latent representations.
+        - Execute forwards pass
+        - Retrieve logits for y_batch.
+        - Compute gradient of logits with respect to input embeddings.
+        - Compute L2 norm of gradients.
+
+    References:
+    ----------
+    - https://github.com/PAIR-code/lit/blob/main/lit_nlp/components/gradient_maps.py#L38
+
+    Parameters
+    ----------
+    model:
+        A model, which is subject to explanation.
+    x_batch:
+        A batch of plain text inputs or their embeddings, which are subjects to explanation.
+    y_batch:
+        A batch of labels, which are subjects to explanation.
+    kwargs:
+        If x_batch is embeddings, kwargs can be used to pass, additional forward pass kwargs, e.g., attention mask.
+
+    Returns
+    -------
+    a_batch:
+        List of tuples, where 1st element is tokens and 2nd is the scores assigned to the tokens.
+
+    """
+    return _gradient_norm(x_batch, model, y_batch, **kwargs)
+
+
+def gradient_x_input(
+    model: TFHuggingFaceTextClassifier,
+    x_batch: _TextOrVector,
+    y_batch: tf.Tensor,
+    **kwargs,
+) -> _Scores:
+    """
+    A baseline GradientXInput text-classification explainer.
+     The implementation is based on https://github.com/PAIR-code/lit/blob/main/lit_nlp/components/gradient_maps.py#L108.
+     GradientXInput explanation algorithm is:
+        - Convert inputs to models latent representations.
+        - Execute forwards pass
+        - Retrieve logits for y_batch.
+        - Compute gradient of logits with respect to input embeddings.
+        - Compute vector dot product between input embeddings and gradients.
+
+
+    References:
+    ----------
+    - https://github.com/PAIR-code/lit/blob/main/lit_nlp/components/gradient_maps.py#L108
+
+    Parameters
+    ----------
+    model:
+        A model, which is subject to explanation.
+    x_batch:
+        A batch of plain text inputs or their embeddings, which are subjects to explanation.
+    y_batch:
+        A batch of labels, which are subjects to explanation.
+    kwargs:
+        If x_batch is embeddings, kwargs can be used to pass, additional forward pass kwargs, e.g., attention mask.
+
+    Returns
+    -------
+    a_batch:
+        List of tuples, where 1st element is tokens and 2nd is the scores assigned to the tokens.
+
+    """
+    return _gradient_x_input(x_batch, model, y_batch, **kwargs)
+
+
+def integrated_gradients(
+    model: TFHuggingFaceTextClassifier,
+    x_batch: _TextOrVector,
+    y_batch: tf.Tensor,
+    config: Optional[IntGradConfig] = None,
+    **kwargs,
+) -> _Scores:
+    """
+    A baseline Integrated Gradients text-classification explainer. Integrated Gradients explanation algorithm is:
+        - Convert inputs to models latent representations.
+        - For each x, y in x_batch, y_batch
+        - Generate num_steps samples interpolated from baseline to x.
+        - Execute forwards pass.
+        - Retrieve logits for y.
+        - Compute gradient of logits with respect to interpolated samples.
+        - Estimate integral over interpolated samples using trapezoid rule.
+    In practise, we combine all interpolated samples in one batch, to avoid executing forward and backward passes
+    in for-loop. This means potentially, that batch size selected for this XAI method should be smaller than usual.
+
+    References:
+    ----------
+    - https://github.com/PAIR-code/lit/blob/main/lit_nlp/components/gradient_maps.py#L108
+    - Sundararajan et al., 2017, Axiomatic Attribution for Deep Networks, https://arxiv.org/pdf/1703.01365.pdf
+
+    Parameters
+    ----------
+    model:
+        A model, which is subject to explanation.
+    x_batch:
+        A batch of plain text inputs or their embeddings, which are subjects to explanation.
+    y_batch:
+        A batch of labels, which are subjects to explanation.
+    config:
+
+    kwargs:
+        If x_batch is embeddings, kwargs can be used to pass, additional forward pass kwargs, e.g., attention mask.
+
+    Returns
+    -------
+    a_batch:
+        List of tuples, where 1st element is tokens and 2nd is the scores assigned to the tokens.
+
+    Examples
+    -------
+    Specifying [UNK] token as baseline:
+
+    >>> unk_token_embedding = model.embedding_lookup([model.tokenizer.unk_token_id])[0, 0]
+    >>> unknown_token_baseline_function = tf.function(lambda x: unk_token_embedding)
+    >>> config = IntGradConfig(baseline_fn=unknown_token_baseline_function)
+    >>> integrated_gradients(..., ..., ..., config=config)
+
+    """
+    return _integrated_gradients(
+        x_batch,
+        model,
+        y_batch,
+        config=config,
+        **kwargs,
+    )
+
+
+def noise_grad(
+    model: TFHuggingFaceTextClassifier,
+    x_batch: _TextOrVector,
+    y_batch: tf.Tensor,
+    config: Optional[NoiseGradConfig] = None,
+    **kwargs,
+) -> _Scores:
+    """
+    NoiseGrad++ is a state-of-the-art gradient based XAI method, which enhances baseline explanation function
+    by adding stochasticity to model's weights. The implementation is based
+    on https://github.com/understandable-machine-intelligence-lab/NoiseGrad/blob/master/src/noisegrad.py#L80.
+
+    Parameters
+    ----------
+    model:
+        A model, which is subject to explanation.
+    x_batch:
+        A batch of plain text inputs or their embeddings, which are subjects to explanation.
+    y_batch:
+        A batch of labels, which are subjects to explanation.
+    config:
+
+    kwargs:
+        If x_batch is embeddings, kwargs can be used to pass, additional forward pass kwargs, e.g., attention mask.
+
+    Returns
+    -------
+    a_batch:
+        List of tuples, where 1st element is tokens and 2nd is the scores assigned to the tokens.
+
+
+    Examples
+    -------
+    Passing kwargs to baseline explanation function:
+
+    >>> import functools
+    >>> ig_config = IntGradConfig(num_steps=22)
+    >>> explain_fn = functools.partial(integrated_gradients, config=ig_config)
+    >>> ng_config = NoiseGradConfig(explain_fn=explain_fn)
+    >>> noise_grad_plus_plus(config=ng_config)
+
+    References
+    -------
+    - https://github.com/understandable-machine-intelligence-lab/NoiseGrad/blob/master/src/noisegrad.py#L80.
+    - Kirill Bykov and Anna Hedström and Shinichi Nakajima and Marina M. -C. Höhne, 2021, NoiseGrad: enhancing explanations by introducing stochasticity to model weights, https://arxiv.org/abs/2106.10185
+
+    """
+
+    return _noise_grad(
+        x_batch,
+        model,
+        y_batch,
+        config=config,
+        **kwargs,
+    )
+
+
+def noise_grad_plus_plus(
+    model: TFHuggingFaceTextClassifier,
+    x_batch: _TextOrVector,
+    y_batch: tf.Tensor,
+    config: Optional[NoiseGradPlusPlusConfig] = None,
+    **kwargs,
+) -> _Scores:
+    """
+    NoiseGrad++ is a state-of-the-art gradient based XAI method, which enhances baseline explanation function
+    by adding stochasticity to model's weights and model's inputs. The implementation is based
+    on https://github.com/understandable-machine-intelligence-lab/NoiseGrad/blob/master/src/noisegrad.py#L80.
+
+    Parameters
+    ----------
+    model:
+        A model, which is subject to explanation.
+    x_batch:
+        A batch of plain text inputs or their embeddings, which are subjects to explanation.
+    y_batch:
+        A batch of labels, which are subjects to explanation.
+    config:
+
+    kwargs:
+        If x_batch is embeddings, kwargs can be used to pass, additional forward pass kwargs, e.g., attention mask.
+
+    Returns
+    -------
+    a_batch:
+        List of tuples, where 1st element is tokens and 2nd is the scores assigned to the tokens.
+
+
+    Examples
+    -------
+    Passing kwargs to baseline explanation function:
+
+    References
+    -------
+    - https://github.com/understandable-machine-intelligence-lab/NoiseGrad/blob/master/src/noisegrad.py#L80.
+    - Kirill Bykov and Anna Hedström and Shinichi Nakajima and Marina M. -C. Höhne, 2021, NoiseGrad: enhancing explanations by introducing stochasticity to model weights, https://arxiv.org/abs/2106.10185
+
+    """
+    return _noise_grad_plus_plus(
+        x_batch,
+        model,
+        y_batch,
+        config=config,
+        **kwargs,
+    )
+
+
+# ----------------------- GradNorm -------------------------
+
+
+@singledispatch
+def _gradient_norm(
+    x_batch: List[str], model: TFHuggingFaceTextClassifier, y_batch: tf.Tensor, **kwargs
+) -> _Scores:
+    input_ids, kwargs = model.tokenizer.get_input_ids(x_batch)
+    embeddings = model.embedding_lookup(input_ids)
+    scores = _gradient_norm(embeddings, model, y_batch, **kwargs)
+    return [
+        (model.tokenizer.convert_ids_to_tokens(i), j) for i, j in zip(input_ids, scores)
+    ]
+
+
+@_gradient_norm.register(tf.Tensor)
+@_gradient_norm.register(np.ndarray)
+@tf.function
+def _(
+    x_batch: tf.Tensor,
+    model: TFHuggingFaceTextClassifier,
+    y_batch: tf.Tensor,
+    **kwargs,
+) -> tf.Tensor:
+    with tf.GradientTape() as tape:
+        tape.watch(x_batch)
+        logits = model(None, inputs_embeds=x_batch, training=False, **kwargs)
+        logits_for_label = _logits_for_labels(logits, y_batch)
+
+    grads = tape.gradient(logits_for_label, x_batch)
+    return tf.linalg.norm(grads, axis=-1)
+
+
+# ----------------------- GradXInput -------------------------
+
+
+@singledispatch
+def _gradient_x_input(x_batch, model, y_batch, **kwargs) -> _Scores:
+    input_ids, kwargs = model.tokenizer.get_input_ids(x_batch)
+    embeddings = model.embedding_lookup(input_ids)
+    scores = _gradient_x_input(embeddings, model, y_batch, **kwargs)
+    return [
+        (model.tokenizer.convert_ids_to_tokens(i), j) for i, j in zip(input_ids, scores)
+    ]
+
+
+@_gradient_x_input.register(tf.Tensor)
+@_gradient_x_input.register(np.ndarray)
+@tf.function(reduce_retracing=True, jit_compile=_USE_XLA)
+def _(
+    x_batch: tf.Tensor,
+    model: TFHuggingFaceTextClassifier,
+    y_batch: tf.Tensor,
+    **kwargs,
+) -> tf.Tensor:
+    with tf.GradientTape() as tape:
+        tape.watch(x_batch)
+        logits = model(None, inputs_embeds=x_batch, training=False, **kwargs)
+        logits_for_label = _logits_for_labels(logits, y_batch)
+
+    grads = tape.gradient(logits_for_label, x_batch)
+    return tf.math.reduce_sum(x_batch * grads, axis=-1)
+
+
+# ----------------------- IntGrad ------------------------
+
+
+@singledispatch
+def _integrated_gradients(
+    x_batch: List[str],
+    model,
+    y_batch: tf.Tensor,
+    config: IntGradConfig = None,
+    **kwargs,
+) -> List[Explanation]:
+    config = value_or_default(config, default_int_grad_config)
+    input_ids, predict_kwargs = model.tokenizer.get_input_ids(x_batch)
+    embeddings = model.embedding_lookup(input_ids)
+
+    scores = _integrated_gradients(
+        embeddings,
+        model,
+        y_batch,
+        config,
+        **predict_kwargs,
+    )
+    return [
+        (model.tokenizer.convert_ids_to_tokens(i), j) for i, j in zip(input_ids, scores)
+    ]
+
+
+@_integrated_gradients.register(tf.Tensor)
+@_integrated_gradients.register(np.ndarray)
+def _(
+    x_batch: tf.Tensor,
+    model,
+    y_batch: tf.Tensor,
+    config: Optional[IntGradConfig] = None,
+    **kwargs,
+):
+    config = value_or_default(config, lambda: IntGradConfig()).resolve_function()
+    if config.batch_interpolated_inputs:
+        return _integrated_gradients_batched(
+            x_batch,
+            model,
+            y_batch,
+            config.num_steps,
+            config.baseline_fn,
+            **kwargs,
+        )
+    else:
+        return _integrated_gradients_iterative(
+            x_batch,
+            model,
+            y_batch,
+            config.num_steps,
+            config.baseline_fn,
+            **kwargs,
+        )
+
+
+@tf.function(reduce_retracing=True, jit_compile=_USE_XLA)
+def _integrated_gradients_batched(
+    x_batch: tf.Tensor,
+    model: TFHuggingFaceTextClassifier,
+    y_batch: tf.Tensor,
+    num_steps: int,
+    baseline_fn: Callable,
+    **kwargs,
+):
+    interpolated_embeddings = tf.vectorized_map(
+        lambda i: interpolate_inputs(baseline_fn(i), i, num_steps), x_batch
+    )
+
+    shape = tf.shape(interpolated_embeddings)
+    batch_size = shape[0]
+
+    interpolated_embeddings = tf.reshape(
+        tf.cast(interpolated_embeddings, dtype=tf.float32),
+        [-1, shape[2], shape[3]],
+    )
+
+    def pseudo_interpolate(x, n):
+        og_shape = tf.convert_to_tensor(tf.shape(x))
+        new_shape = tf.concat([tf.constant([n + 1]), og_shape], axis=0)
+        x = tf.broadcast_to(x, new_shape)
+        flat_shape = tf.concat([tf.constant([-1]), og_shape[1:]], axis=0)
+        x = tf.reshape(x, flat_shape)
+        return x
+
+    interpolated_kwargs = tf.nest.map_structure(
+        partial(pseudo_interpolate, n=num_steps), kwargs
+    )
+    interpolated_y_batch = pseudo_interpolate(y_batch, num_steps)
+
+    with tf.GradientTape() as tape:
+        tape.watch(interpolated_embeddings)
+        logits = model(
+            None,
+            inputs_embeds=interpolated_embeddings,
+            training=False,
+            **interpolated_kwargs,
+        )
+        logits_for_label = _logits_for_labels(logits, interpolated_y_batch)
+
+    grads = tape.gradient(logits_for_label, interpolated_embeddings)
+    grads_shape = tf.shape(grads)
+    grads = tf.reshape(
+        grads, [batch_size, num_steps + 1, grads_shape[1], grads_shape[2]]
+    )
+    return tf.linalg.norm(tfp.math.trapz(grads, axis=1), axis=-1)
+
+
+@tf.function(reduce_retracing=True, jit_compile=_USE_XLA)
+def _integrated_gradients_iterative(
+    x_batch: tf.Tensor,
+    model: TFHuggingFaceTextClassifier,
+    y_batch: tf.Tensor,
+    num_steps: int,
+    baseline_fn: Callable,
+    **kwargs,
+) -> tf.Tensor:
+    interpolated_embeddings_batch = tf.map_fn(
+        lambda x: interpolate_inputs(baseline_fn(x), x, num_steps),
+        x_batch,
+    )
+
+    batch_size = tf.shape(interpolated_embeddings_batch)[0]
+
+    scores = tf.TensorArray(
+        x_batch.dtype,
+        size=batch_size,
+        clear_after_read=True,
+        colocate_with_first_write_call=True,
+    )
+
+    def pseudo_interpolate(x, embeds):
+        return tf.broadcast_to(x, (tf.shape(embeds)[0], *x.shape))
+
+    for i in tf.range(batch_size):
+        interpolated_embeddings = interpolated_embeddings_batch[i]
+
+        interpolated_kwargs = tf.nest.map_structure(
+            lambda x: pseudo_interpolate(x, interpolated_embeddings),
+            map_dict(kwargs, itemgetter(i)),
+        )
+        with tf.GradientTape() as tape:
+            tape.watch(interpolated_embeddings)
+            logits = model(
+                None,
+                inputs_embeds=interpolated_embeddings,
+                training=False,
+                **interpolated_kwargs,
+            )
+            logits_for_label = logits[:, y_batch[i]]
+
+        grads = tape.gradient(logits_for_label, interpolated_embeddings)
+        score = tf.linalg.norm(tfp.math.trapz(grads, axis=0), axis=-1)
+        scores = scores.write(i, score)
+
+    return scores.stack()
+
+
+# ----------------------- NoiseGrad -------------------------
+
+
+@singledispatch
+def _noise_grad(
+    x_batch: list,
+    model: TFHuggingFaceTextClassifier,
+    y_batch: tf.Tensor,
+    config: NoiseGradConfig = None,
+):
+    config = value_or_default(config, default_noise_grad_config).resolve_functions()
+    tf.random.set_seed(config.seed)
+    input_ids, predict_kwargs = model.tokenizer.get_input_ids(x_batch)
+    embeddings = model.embedding_lookup(input_ids)
+    scores = _noise_grad(
+        embeddings,
+        model,
+        y_batch,
+        config,
+        **predict_kwargs,
+    )
+    return [
+        (model.tokenizer.convert_ids_to_tokens(i), j) for i, j in zip(input_ids, scores)
+    ]
+
+
+@_noise_grad.register(np.ndarray)
+@_noise_grad.register
+def _(
+    x_batch: tf.Tensor,
+    model,
+    y_batch: tf.Tensor,
+    config: NoiseGradConfig = None,
+    **kwargs,
+) -> tf.Tensor:
+    config = value_or_default(config, default_noise_grad_config).resolve_functions()
+    tf.random.set_seed(config.seed)
+
+    original_weights = model.state_dict().copy()
+
+    explanations_array = tf.TensorArray(
+        x_batch.dtype,
+        size=config.n,
+        clear_after_read=True,
+        colocate_with_first_write_call=True,
+    )
+
+    noise_dist = Normal(config.mean, config.std)
+
+    def noise_fn(x):
+        def apply_noise(x, noise):
+            if config.noise_type == "additive":
+                return x + noise
+            if config.noise_type == "multiplicative":
+                return x * noise
+
+        noise = noise_dist.sample(tf.shape(x))
+        return apply_noise(x, noise)
+
+    for n in tf.range(config.n):
+        noisy_weights = tf.nest.map_structure(
+            noise_fn,
+            original_weights,
+        )
+        model.load_state_dict(noisy_weights)
+
+        explanation = config.explain_fn(x_batch, model, y_batch, **kwargs)  # type: ignore # noqa
+        explanations_array = explanations_array.write(n, explanation)
+
+    scores = tf.reduce_mean(explanations_array.stack(), axis=0)
+    model.load_state_dict(original_weights)
+    return scores
+
+
+# ----------------------- NoiseGrad++ -------------------------
+
+
+@singledispatch
+def _noise_grad_plus_plus(
+    x_batch: list,
+    model,
+    y_batch: tf.Tensor,
+    config: NoiseGradPlusPlusConfig = None,
+    **kwargs,
+):
+    config = value_or_default(config, default_noise_grad_pp_config).resolve_functions()
+    tf.random.set_seed(config.seed)
+
+    input_ids, kwargs = model.tokenizer.get_input_ids(x_batch)
+    embeddings = model.embedding_lookup(input_ids)
+    scores = _noise_grad_plus_plus(
+        embeddings,
+        model,
+        y_batch,
+        config=config,
+        **kwargs,
+    )
+    return [
+        (model.tokenizer.convert_ids_to_tokens(i), j) for i, j in zip(input_ids, scores)
+    ]
+
+
+@_noise_grad_plus_plus.register(np.ndarray)
+@_noise_grad_plus_plus.register
+def _(
+    x_batch: tf.Tensor,
+    model,
+    y_batch: tf.Tensor,
+    *,
+    config: NoiseGradPlusPlusConfig = None,
+    **kwargs,
+) -> tf.Tensor:
+    config = value_or_default(config, default_noise_grad_pp_config).resolve_functions()
+    tf.random.set_seed(config.seed)
+
+    original_weights = model.state_dict().copy()
+
+    noise_dist = Normal(config.mean, config.std)
+    sg_noise_dist = Normal(config.sg_mean, config.sg_std)
+
+    explanations_array = tf.TensorArray(
+        x_batch.dtype,
+        size=config.n * config.m,
+        clear_after_read=True,
+        colocate_with_first_write_call=True,
+    )
+
+    def apply_noise(x, noise):
+        if config.noise_type == "additive":
+            return x + noise
+        if config.noise_type == "multiplicative":
+            return x * noise
+
+    def noise_fn(x):
+        noise = noise_dist.sample(tf.shape(x))
+        return apply_noise(x, noise)
+
+    def sg_noise_fn(x):
+        noise = sg_noise_dist.sample(tf.shape(x))
+        return apply_noise(x, noise)
+
+    for n in tf.range(config.n):
+        noisy_weights = tf.nest.map_structure(noise_fn, original_weights)
+        model.weights = noisy_weights
+
+        for m in tf.range(config.m):
+            noisy_embeddings = sg_noise_fn(x_batch)
+            explanation = config.explain_fn(noisy_embeddings, model, y_batch, **kwargs)  # type: ignore # noqa
+            explanations_array = explanations_array.write(n + m * config.m, explanation)
+
+    scores = tf.reduce_mean(explanations_array.stack(), axis=0)
+    model.weights = original_weights
+    return scores
+
+
+# --------------------- utils ----------------------
+
+
+@tf.function(reduce_retracing=True, jit_compile=_USE_XLA)
+def _logits_for_labels(logits: tf.Tensor, y_batch: tf.Tensor) -> tf.Tensor:
+    # Matrix with indexes like [ [0,y_0], [1, y_1], ...]
+    indexes = tf.transpose(
+        tf.stack(
+            [
+                tf.range(tf.shape(logits)[0], dtype=tf.int32),
+                tf.cast(y_batch, tf.int32),
+            ]
+        ),
+        [1, 0],
+    )
+    return tf.gather_nd(logits, indexes)
+
+
+@tf.function(reduce_retracing=True, jit_compile=_USE_XLA)
+def interpolate_inputs(
+    baseline: tf.Tensor, target: tf.Tensor, num_steps: int
+) -> tf.Tensor:
+    """Gets num_step linearly interpolated inputs from baseline to target."""
+    delta = target - baseline
+    scales = tf.linspace(0, 1, num_steps + 1)[:, tf.newaxis, tf.newaxis]
+    scales = tf.cast(scales, dtype=delta.dtype)
+    shape = tf.convert_to_tensor(
+        [num_steps + 1, tf.shape(delta)[0], tf.shape(delta)[1]]
+    )
+    deltas = scales * tf.broadcast_to(delta, shape)
+    interpolated_inputs = baseline + deltas
+    return interpolated_inputs
+
+
+@tf.function(reduce_retracing=True, jit_compile=_USE_XLA)
+def zeros_baseline(x: tf.Tensor) -> tf.Tensor:
+    return tf.zeros_like(x, dtype=x.dtype)
+
+
+# -------------- not compiled functions ----------
+
+
+def resolve_noise_grad_baseline_explain_fn(explain_fn):
+    if isinstance(explain_fn, Callable):
+        return explain_fn  # type: ignore
+
+    method_mapping = available_noise_grad_xai_methods()
+    if explain_fn in ("NoiseGrad", "NoiseGrad++"):
+        raise ValueError(f"Can't use NoiseGrad as baseline xai method for NoiseGrad.")
+
+    if explain_fn not in method_mapping:
+        raise ValueError(
+            f"Unknown XAI method {explain_fn}, supported are {list(method_mapping.keys())}"
+        )
+    return method_mapping[explain_fn]
Index: quantus/functions/nlp_explanation_func/torch_explanation_func.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/quantus/functions/nlp_explanation_func/torch_explanation_func.py b/quantus/functions/nlp_explanation_func/torch_explanation_func.py
new file mode 100644
--- /dev/null	(date 1681078345880)
+++ b/quantus/functions/nlp_explanation_func/torch_explanation_func.py	(date 1681078345880)
@@ -0,0 +1,604 @@
+# This file is part of Quantus.
+# Quantus is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
+# Quantus is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
+# You should have received a copy of the GNU Lesser General Public License along with Quantus. If not, see <https://www.gnu.org/licenses/>.
+# Quantus project URL: <https://github.com/understandable-machine-intelligence-lab/Quantus>.
+
+"""Explanation functions for Torch models."""
+
+from __future__ import annotations
+
+from functools import singledispatch, partial
+from importlib import util
+from operator import itemgetter
+from typing import Callable, Dict, List, Optional, Union, Protocol
+
+import numpy as np
+import torch
+from captum.attr import IntegratedGradients
+from torch import Tensor
+
+from quantus.helpers.collection_utils import map_dict
+from quantus.helpers.model.torch_hf_model import TorchHuggingFaceTextClassifier
+from quantus.helpers.types import Explanation
+
+if util.find_spec("noisegrad"):
+    from noisegrad.noisegrad import (
+        NoiseGradConfig,
+        NoiseGradPlusPlusConfig,
+        NoiseGrad,
+        NoiseGradPlusPlus,
+    )
+else:
+    NoiseGradConfig = type(None)
+    NoiseGradPlusPlusConfig = type(None)
+
+
+class BaselineExplainFn(Protocol):
+    def __call__(
+        self,
+        model: TorchHuggingFaceTextClassifier,
+        x_batch: Tensor | List[str],
+        y_batch: Tensor,
+        **kwargs,
+    ) -> Tensor:
+        ...
+
+
+# Just to save some typing effort
+_TextOrVector = Union[List[str], Tensor, np.ndarray]
+_TextOrTensor = Union[List[str], Tensor]
+_Scores = Union[List[Explanation], np.ndarray]
+
+# ----------------- "Entrypoint" --------------------
+
+
+class Config:
+    return_np_arrays: bool = True
+
+    def enable_numpy_conversion(self):
+        self.return_np_arrays = True
+
+    def disable_numpy_conversion(self):
+        self.return_np_arrays = False
+
+
+config = Config()
+
+
+def available_xai_methods() -> Dict:
+    return {
+        "GradNorm": gradient_norm,
+        "GradXInput": gradient_x_input,
+        "IntGrad": integrated_gradients,
+        "NoiseGrad++": noise_grad_plus_plus,
+        "NoiseGrad": noise_grad,
+    }
+
+
+def torch_explain(
+    model: TorchHuggingFaceTextClassifier,
+    x_batch: _TextOrVector,
+    y_batch: np.ndarray,
+    method: str,
+    **kwargs,
+) -> _Scores:
+    method_mapping = available_xai_methods()
+
+    if method not in method_mapping:
+        raise ValueError(
+            f"Unsupported explanation method: {method}, supported are: {list(method_mapping.keys())}"
+        )
+    explain_fn = method_mapping[method]
+
+    if isinstance(x_batch, np.ndarray):
+        x_batch = torch.tensor(x_batch, requires_grad=True, device=model.device)
+
+    y_batch = torch.tensor(y_batch, dtype=torch.int64, device=model.device)
+
+    return explain_fn(model, x_batch, y_batch, **kwargs)
+
+
+# ----------------- Quantus-conform API -------------------
+# functools.singledispatch supports only dispatching based on 1st argument type,
+# which in our case is model, so we need to reorder them, so x_batch (text or embedding) is in 1st place,
+# and we and up dispatching to different functions based on input type.
+
+
+def gradient_norm(
+    model,
+    x_batch: _TextOrTensor,
+    y_batch: Tensor,
+    **kwargs,
+) -> _Scores:
+    """
+    A baseline GradientNorm text-classification explainer. GradientNorm explanation algorithm is:
+        - Convert inputs to models latent representations.
+        - Execute forwards pass
+        - Retrieve logits for y_batch.
+        - Compute gradient of logits with respect to input embeddings.
+        - Compute L2 norm of gradients.
+
+    Parameters
+    ----------
+    model:
+        A model, which is subject to explanation.
+    x_batch:
+        A batch of plain text inputs, which are subjects to explanation.
+    y_batch:
+        A batch of labels, which are subjects to explanation.
+
+    Returns
+    -------
+    a_batch:
+        List of tuples, where 1st element is tokens and 2nd is the scores assigned to the tokens.
+
+    """
+    return _gradient_norm(x_batch, model, y_batch, **kwargs)
+
+
+def gradient_x_input(
+    model: TorchHuggingFaceTextClassifier,
+    x_batch: _TextOrTensor,
+    y_batch: Tensor,
+    **kwargs,
+) -> _Scores:
+    """
+    A baseline GradientXInput text-classification explainer.GradientXInput explanation algorithm is:
+        - Convert inputs to models latent representations.
+        - Execute forwards pass
+        - Retrieve logits for y_batch.
+        - Compute gradient of logits with respect to input embeddings.
+        - Compute vector dot product between input embeddings and gradients.
+
+
+    Parameters
+    ----------
+    model:
+        A model, which is subject to explanation.
+    x_batch:
+        A batch of plain text inputs, which are subjects to explanation.
+    y_batch:
+        A batch of labels, which are subjects to explanation.
+
+    Returns
+    -------
+    a_batch:
+        List of tuples, where 1st element is tokens and 2nd is the scores assigned to the tokens.
+
+    """
+    return _gradient_x_input(x_batch, model, y_batch, **kwargs)
+
+
+def integrated_gradients(
+    model: TorchHuggingFaceTextClassifier,
+    x_batch: List[str],
+    y_batch: Tensor,
+    num_steps: int = 10,
+    **kwargs,
+) -> _Scores:
+    """
+    This function depends on transformers_interpret library.
+    A baseline Integrated Gradients text-classification explainer. Integrated Gradients explanation algorithm is:
+        - Convert inputs to models latent representations.
+        - For each x, y in x_batch, y_batch
+        - Generate num_steps samples interpolated from baseline to x.
+        - Execute forwards pass.
+        - Retrieve logits for y.
+        - Compute gradient of logits with respect to interpolated samples.
+        - Estimate integral over interpolated samples using trapezoid rule.
+    In practise, we combine all interpolated samples in one batch, to avoid executing forward and backward passes
+    in for-loop. This means potentially, that batch size selected for this XAI method should be smaller than usual.
+
+    References:
+    ----------
+    - Sundararajan et al., 2017, Axiomatic Attribution for Deep Networks, https://arxiv.org/pdf/1703.01365.pdf
+    - https://github.com/cdpierse/transformers-interpret
+
+    Parameters
+    ----------
+    model:
+        A model, which is subject to explanation.
+    x_batch:
+        A batch of plain text inputs, which are subjects to explanation.
+    y_batch:
+        A batch of labels, which are subjects to explanation.
+    num_steps:
+        Number of interpolated samples, which should be generated, default=10.
+    Returns
+    -------
+    a_batch:
+        List of tuples, where 1st element is tokens and 2nd is the scores assigned to the tokens.
+
+    Examples
+    -------
+    Specifying [UNK] token as baseline:
+
+    """
+
+    return _integrated_gradients(x_batch, model, y_batch, num_steps=num_steps, **kwargs)
+
+
+def noise_grad(
+    model: TorchHuggingFaceTextClassifier,
+    x_batch: _TextOrTensor,
+    y_batch: Tensor,
+    explain_fn: Union[Callable, str] = "IntGrad",
+    ng_config: Optional[NoiseGradConfig] = None,
+    **kwargs,
+) -> _Scores:
+    """
+    NoiseGrag is a state-of-the-art gradient based XAI method, which enhances baseline explanation function
+    by adding stochasticity to model's. This method requires noisegrad package,
+    install it with: `pip install 'noisegrad @ git+https://github.com/aaarrti/NoiseGrad.git'`.
+
+    Parameters
+    ----------
+    model:
+        A model, which is subject to explanation.
+    x_batch:
+        A batch of plain text inputs, which are subjects to explanation.
+    y_batch:
+        A batch of labels, which are subjects to explanation.
+    explain_fn:
+        Baseline explanation function. If string provided must be one of GradNorm, GradXInput, IntGrad.
+        Otherwise, must have `Callable[[HuggingFaceTextClassifier, np.ndarray, np.ndarray, Optional[np.ndarray]], np.ndarray]` signature.
+        Passing additional kwargs is not supported, please use partial application from functools package instead.
+        Default IntGrad.
+    ng_config:
+        config passed to __init__ method of NoiseGrad class.
+
+    Returns
+    -------
+
+    a_batch:
+        List of tuples, where 1st element is tokens and 2nd is the scores assigned to the tokens.
+
+    """
+    if not util.find_spec("noisegrad"):
+        raise ValueError("NoiseGrad requires `noisegrad` package installation")
+    return _noise_grad(
+        x_batch,
+        model,
+        y_batch,
+        explain_fn=explain_fn,
+        ng_config=ng_config,
+        **kwargs,
+    )
+
+
+def noise_grad_plus_plus(
+    model: TorchHuggingFaceTextClassifier,
+    x_batch: _TextOrTensor,
+    y_batch: Tensor,
+    explain_fn: Union[BaselineExplainFn, str] = "IntGrad",
+    ng_pp_config: Optional[NoiseGradPlusPlusConfig] = None,
+    **kwargs,
+) -> _Scores:
+    """
+    NoiseGrad++ is a state-of-the-art gradient based XAI method, which enhances baseline explanation function
+    by adding stochasticity to model's weights and model's inputs. This method requires noisegrad package,
+    install it with: `pip install 'noisegrad @ git+https://github.com/aaarrti/NoiseGrad.git'`.
+
+    Parameters
+    ----------
+    model:
+        A model, which is subject to explanation.
+    x_batch:
+        A batch of plain text inputs, which are subjects to explanation.
+    y_batch:
+        A batch of labels, which are subjects to explanation.
+    explain_fn:
+        Baseline explanation function. If string provided must be one of GradNorm, GradXInput, IntGrad.
+        Otherwise, must have `Callable[[HuggingFaceTextClassifier, np.ndarray, np.ndarray, Optional[np.ndarray]], np.ndarray]` signature.
+        Passing additional kwargs is not supported, please use partial application from functools package instead.
+        Default IntGrad.
+    ng_pp_config:
+        Config passed to __init__ method of NoiseGrad class.
+
+    Returns
+    -------
+
+    a_batch:
+        List of tuples, where 1st element is tokens and 2nd is the scores assigned to the tokens.
+
+    """
+    if not util.find_spec("noisegrad"):
+        raise ValueError("NoiseGrad++ requires `noisegrad` package installation")
+    return _noise_grad_plus_plus(
+        x_batch,
+        model,
+        y_batch,
+        explain_fn=explain_fn,
+        ng_pp_config=ng_pp_config,
+        **kwargs,
+    )
+
+
+# ----------------------- GradNorm -------------------------
+
+
+@singledispatch
+def _gradient_norm(
+    x_batch: list, model: TorchHuggingFaceTextClassifier, y_batch: Tensor, **kwargs
+) -> List[Explanation]:
+    input_ids, predict_kwargs = model.tokenizer.get_input_ids(x_batch)
+    input_ids = torch.tensor(input_ids, device=model.device)
+    input_embeds = model.embedding_lookup(input_ids)
+    scores = _gradient_norm(input_embeds, model, y_batch, **predict_kwargs)
+    return [
+        (model.tokenizer.convert_ids_to_tokens(i), j) for i, j in zip(input_ids, scores)
+    ]
+
+
+@_gradient_norm.register
+def _(
+    x_batch: Tensor,
+    model: TorchHuggingFaceTextClassifier,
+    y_batch: Tensor,
+    **kwargs,
+) -> np.ndarray:
+
+    kwargs = map_dict(kwargs, partial(torch.tensor, device=model.device))
+    logits = model(None, inputs_embeds=x_batch, **kwargs)
+    logits_for_class = logits_for_labels(logits, y_batch)
+    grads = torch.autograd.grad(torch.unbind(logits_for_class), x_batch)[0]
+
+    scores = torch.linalg.norm(grads, dim=-1)
+    if config.return_np_arrays:
+        scores = scores.detach().cpu().numpy()
+    return scores
+
+
+# ----------------------- GradXInput -------------------------
+
+
+@singledispatch
+def _gradient_x_input(
+    x_batch: list, model: TorchHuggingFaceTextClassifier, y_batch: Tensor, **kwargs
+) -> List[Explanation]:
+    input_ids, predict_kwargs = model.tokenizer.get_input_ids(x_batch)
+    input_embeds = model.embedding_lookup(input_ids)
+    scores = _gradient_x_input(input_embeds, model, y_batch, **predict_kwargs)
+    return [
+        (model.tokenizer.convert_ids_to_tokens(i), j) for i, j in zip(input_ids, scores)
+    ]
+
+
+@_gradient_x_input.register
+def _(
+    x_batch: Tensor,
+    model: TorchHuggingFaceTextClassifier,
+    y_batch: Tensor,
+    **kwargs,
+) -> np.ndarray:
+
+    kwargs = map_dict(kwargs, partial(torch.tensor, device=model.device))
+    logits = model(None, inputs_embeds=x_batch, **kwargs)
+    logits_for_class = logits_for_labels(
+        logits, torch.tensor(y_batch, device=model.device)
+    )
+    grads = torch.autograd.grad(torch.unbind(logits_for_class), x_batch)[0]
+    scores = torch.sum(grads * x_batch, dim=-1)
+    if config.return_np_arrays:
+        scores = scores.detach().cpu().numpy()
+    return scores
+
+
+# ----------------------- IntGrad -------------------------
+
+
+@singledispatch
+def _integrated_gradients(
+    x_batch: list,
+    model: TorchHuggingFaceTextClassifier,
+    y_batch: Tensor,
+    num_steps: int = 10,
+    **kwargs,
+) -> List[Explanation]:
+    input_ids, predict_kwargs = model.tokenizer.get_input_ids(x_batch)
+    x_embeddings = model.embedding_lookup(input_ids)
+    scores = _integrated_gradients(
+        x_embeddings, model, y_batch, num_steps, **predict_kwargs
+    )
+    return [
+        (model.tokenizer.convert_ids_to_tokens(i), j) for i, j in zip(input_ids, scores)
+    ]
+
+
+@_integrated_gradients.register
+def _(
+    x_batch: Tensor,
+    model: TorchHuggingFaceTextClassifier,
+    y_batch: Tensor,
+    num_steps: int,
+    **kwargs,
+) -> np.ndarray:
+    def pseudo_interpolate(x):
+        if isinstance(x, np.ndarray):
+            x = torch.tensor(x, device=model.device)
+        if not isinstance(x, torch.Tensor):
+            return x
+        old_shape = x.shape
+        return torch.reshape(
+            torch.broadcast_to(x, (num_steps, *old_shape)),
+            (old_shape[0] * num_steps, old_shape[1]),
+        )
+
+    kwargs = map_dict(kwargs, pseudo_interpolate)
+
+    def predict_fn(x):
+        return model(None, inputs_embeds=x, **kwargs)
+
+    explainer = IntegratedGradients(predict_fn)
+    grads = explainer.attribute(inputs=x_batch, n_steps=num_steps, target=y_batch)
+
+    scores = torch.linalg.norm(grads, dim=-1)
+
+    if config.return_np_arrays:
+        scores = scores.detach().cpu().numpy()
+    return scores
+
+
+# ----------------------- NoiseGrad -------------------------
+
+
+@singledispatch
+def _noise_grad(
+    x_batch: list,
+    model,
+    y_batch: Tensor,
+    explain_fn: Union[BaselineExplainFn, str],
+    ng_config: Optional[NoiseGradConfig] = None,
+    **kwargs,
+) -> List[Explanation]:
+    explain_fn = _get_noise_grad_baseline_explain_fn(explain_fn)
+
+    baseline_tokens = explain_fn(model, x_batch, y_batch)  # type: ignore
+    baseline_tokens = list(map(itemgetter(0), baseline_tokens))
+
+    og_weights = model.state_dict().copy()
+    config.disable_numpy_conversion()
+
+    def adapter(module, inputs, targets) -> torch.Tensor:
+        model.load_state_dict(module.state_dict())
+        a_batch = explain_fn(model, x_batch, targets)
+        base_scores = torch.stack([i[1] for i in a_batch])
+        return base_scores  # noqa
+
+    ng = NoiseGrad(ng_config)
+    scores = (
+        ng.enhance_explanation(
+            model.get_model(),
+            x_batch,
+            y_batch,
+            explanation_fn=adapter,
+        )
+        .detach()
+        .cpu()
+        .numpy()
+    )
+    config.enable_numpy_conversion()
+    model.load_state_dict(og_weights)
+    return list(zip(baseline_tokens, scores))
+
+
+@_noise_grad.register
+def _(
+    x_batch: Tensor,
+    model: TorchHuggingFaceTextClassifier,
+    y_batch: Tensor,
+    explain_fn: Union[BaselineExplainFn, str],
+    ng_config: Optional[NoiseGradConfig] = None,
+    **kwargs,
+) -> np.ndarray:
+    og_weights = model.state_dict().copy()
+    explain_fn = _get_noise_grad_baseline_explain_fn(explain_fn)
+
+    config.disable_numpy_conversion()
+
+    def adapter(module, inputs, targets):
+        model.load_state_dict(module.state_dict())
+        base_scores = explain_fn(model, inputs, targets, **kwargs)
+        return base_scores
+
+    ng_pp = NoiseGrad(ng_config)
+    scores = (
+        ng_pp.enhance_explanation(
+            model.get_model(),
+            x_batch,
+            y_batch,
+            explanation_fn=adapter,
+        )
+        .detach()
+        .cpu()
+        .numpy()
+    )
+
+    config.enable_numpy_conversion()
+    model.load_state_dict(og_weights)
+    return scores
+
+
+# ----------------------- NoiseGrad++ -------------------------
+
+
+@singledispatch
+def _noise_grad_plus_plus(
+    x_batch,
+    model: TorchHuggingFaceTextClassifier,
+    y_batch: torch.Tensor,
+    explain_fn: Union[BaselineExplainFn, str],
+    ng_pp_config: Optional[NoiseGradPlusPlusConfig],
+    **kwargs,
+) -> List[Explanation]:
+    input_ids, kwargs = model.tokenizer.get_input_ids(x_batch)
+    input_embeds = model.embedding_lookup(input_ids)
+
+    scores = _noise_grad_plus_plus(
+        input_embeds, model, y_batch, explain_fn, ng_pp_config, **kwargs
+    )
+
+    return [
+        (model.tokenizer.convert_ids_to_tokens(i), j) for i, j in zip(input_ids, scores)
+    ]
+
+
+@_noise_grad_plus_plus.register
+def _(
+    x_batch: Tensor,
+    model: TorchHuggingFaceTextClassifier,
+    y_batch: Tensor,
+    explain_fn: Union[BaselineExplainFn, str],
+    ng_pp_config: Optional[NoiseGradConfig] = None,
+    **kwargs,
+) -> np.ndarray:
+    og_weights = model.state_dict().copy()
+    explain_fn = _get_noise_grad_baseline_explain_fn(explain_fn)
+    config.disable_numpy_conversion()
+
+    def adapter(module, inputs, targets):
+        model.load_state_dict(module.state_dict())
+        base_scores = explain_fn(model, inputs, targets, **kwargs)
+        return base_scores
+
+    ng_pp = NoiseGradPlusPlus(ng_pp_config)
+    scores = (
+        ng_pp.enhance_explanation(
+            model.get_model(),
+            x_batch,
+            y_batch,
+            explanation_fn=adapter,
+        )
+        .detach()
+        .cpu()
+        .numpy()
+    )
+
+    config.enable_numpy_conversion()
+
+    model.load_state_dict(og_weights)
+    return scores
+
+
+# -------------- utils ------------------
+
+
+def _get_noise_grad_baseline_explain_fn(
+    explain_fn: str | BaselineExplainFn,
+) -> BaselineExplainFn:
+    if isinstance(explain_fn, Callable):
+        return explain_fn
+
+    if explain_fn in ("NoiseGrad", "NoiseGrad++"):
+        raise ValueError(f"Can't use {explain_fn} as baseline function for NoiseGrad.")
+    method_mapping = available_xai_methods()
+    if explain_fn not in method_mapping:
+        raise ValueError(
+            f"Unknown XAI method {explain_fn}, supported are {list(method_mapping.keys())}"
+        )
+    return method_mapping[explain_fn]
+
+
+def logits_for_labels(logits: Tensor, y_batch: Tensor) -> Tensor:
+    return logits[torch.arange(0, logits.shape[0], dtype=torch.int32), y_batch]
Index: quantus/functions/explanation_func.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/quantus/functions/explanation_func.py b/quantus/functions/explanation_func.py
--- a/quantus/functions/explanation_func.py	(revision c2255b793bae21a32b1274275ae60b44cdd94d7b)
+++ b/quantus/functions/explanation_func.py	(date 1681078345879)
@@ -12,6 +12,7 @@
 
 import numpy as np
 import scipy
+from functools import singledispatch, wraps
 
 from quantus.helpers import constants
 from quantus.helpers import __EXTRAS__
@@ -22,6 +23,10 @@
     make_channel_last,
     get_wrapped_model,
 )
+from quantus.helpers.model.text_classifier import TextClassifier
+from quantus.functions.nlp_explanation_func import (
+    generate_text_classification_explanations,
+)
 
 
 if util.find_spec("torch"):
@@ -59,6 +64,21 @@
     import tf_explain
 
 
+def patch_kwargs(func):
+    @wraps(func)
+    def wrapper(*args, **kwargs):
+        # singledispatch requires first positional argument
+        # in Quantus it is often passed as keyword, so we patch it onto 0s position.
+        if "model" in kwargs:
+            return func(kwargs.pop("model"), *args, **kwargs)
+        else:
+            return func(*args, **kwargs)
+
+    return wrapper
+
+
+@patch_kwargs
+@singledispatch
 def explain(model, inputs, targets, **kwargs) -> np.ndarray:
     """
     Explain inputs given a model, targets and an explanation method.
@@ -128,6 +148,11 @@
     return explanation
 
 
+@explain.register
+def _(model: TextClassifier, inputs, targets, **kwargs):
+    return generate_text_classification_explanations(model, inputs, targets, **kwargs)
+
+
 def get_explanation(model, inputs, targets, **kwargs):
     """
     Generate explanation array based on the type of input model and user specifications.
Index: quantus/functions/loss_func.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/quantus/functions/loss_func.py b/quantus/functions/loss_func.py
--- a/quantus/functions/loss_func.py	(revision c2255b793bae21a32b1274275ae60b44cdd94d7b)
+++ b/quantus/functions/loss_func.py	(date 1681078345879)
@@ -5,11 +5,15 @@
 # Quantus is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 # You should have received a copy of the GNU Lesser General Public License along with Quantus. If not, see <https://www.gnu.org/licenses/>.
 # Quantus project URL: <https://github.com/understandable-machine-intelligence-lab/Quantus>.
+from __future__ import annotations
 
 import numpy as np
+from numpy.typing import ArrayLike
 
 
-def mse(a: np.array, b: np.array, **kwargs) -> float:
+def mse(
+    a: ArrayLike, b: ArrayLike, axis: int = 0, normalise_mse: bool = False
+) -> np.ndarray | float:
     """
     Calculate Mean Squared Error between two images (or explanations).
 
@@ -19,22 +23,21 @@
              Array to calculate MSE with.
     b: np.ndarray
              Array to calculate MSE with.
-    kwargs: optional
-            Keyword arguments.
-        normalise_mse: boolean
-            Indicates whether to returned a normalised MSE calculation or not.
+    axis: int
+        axis over which mean should be computed.
+    normalise_mse: boolean
+        Indicates whether to returned a normalised MSE calculation or not.
 
+
     Returns
     -------
     float:
-        A floating point of MSE.
+        Float for single instance, np.ndarray for batch.
     """
 
-    normalise = kwargs.get("normalise_mse", False)
-
-    if normalise:
+    if normalise_mse:
         # Calculate MSE in its polynomial expansion (a-b)^2 = a^2 - 2ab + b^2.
-        return np.average(((a**2) - (2 * (a * b)) + (b**2)), axis=0)
+        return np.average(((a**2) - (2 * (a * b)) + (b**2)), axis=axis)
     # If no need to normalise, return (a-b)^2.
 
-    return np.average(((a - b) ** 2), axis=0)
+    return np.average(((a - b) ** 2), axis=axis)
Index: quantus/functions/norm_func.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/quantus/functions/norm_func.py b/quantus/functions/norm_func.py
--- a/quantus/functions/norm_func.py	(revision c2255b793bae21a32b1274275ae60b44cdd94d7b)
+++ b/quantus/functions/norm_func.py	(date 1681078345880)
@@ -6,9 +6,39 @@
 # You should have received a copy of the GNU Lesser General Public License along with Quantus. If not, see <https://www.gnu.org/licenses/>.
 # Quantus project URL: <https://github.com/understandable-machine-intelligence-lab/Quantus>.
 
+from __future__ import annotations
+
+import logging
+from functools import wraps
+from typing import Callable
+
 import numpy as np
 
+log = logging.getLogger(__name__)
+
+
+def vectorize_norm(func: Callable):
+
+    vectorized_func = np.vectorize(func, signature="(n)->()", cache=True)
 
+    @wraps(func)
+    def wrapper(a: np.ndarray) -> np.ndarray:
+        a = np.asarray(a)
+        ndim = np.ndim(a)
+        if ndim == 1:
+            return func(a)
+        if ndim > 2:
+            a = np.reshape(a, (a.shape[0], -1))
+            log.warning(
+                f"{func.__name__} received array with { ndim = }, it was reshaped into {a.shape}."
+            )
+
+        return vectorized_func(a)
+
+    return wrapper
+
+
+@vectorize_norm
 def fro_norm(a: np.array) -> float:
     """
     Calculate Frobenius norm for an array.
@@ -27,6 +57,7 @@
     return np.linalg.norm(a)
 
 
+@vectorize_norm
 def l2_norm(a: np.array) -> float:
     """
     Calculate L2 norm for an array.
@@ -45,6 +76,7 @@
     return np.linalg.norm(a)
 
 
+@vectorize_norm
 def linf_norm(a: np.array) -> float:
     """
     Calculate L-inf norm for an array.
Index: quantus/functions/normalise_func.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/quantus/functions/normalise_func.py b/quantus/functions/normalise_func.py
--- a/quantus/functions/normalise_func.py	(revision c2255b793bae21a32b1274275ae60b44cdd94d7b)
+++ b/quantus/functions/normalise_func.py	(date 1681078327802)
@@ -248,3 +248,12 @@
         )
 
     return a
+
+
+def normalize_sum_to_1(scores: np.ndarray, **kwargs) -> np.ndarray:
+    """Makes the absolute values sum to 1."""
+    if scores.ndim > 2:
+        raise ValueError("Only 2D and 1D inputs are supported.")
+    scores = np.asarray(scores)
+    scores = scores + np.finfo(np.float32).eps
+    return (scores.T / np.abs(scores).sum(axis=-1)).T
Index: quantus/functions/perturb_func.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/quantus/functions/perturb_func.py b/quantus/functions/perturb_func.py
--- a/quantus/functions/perturb_func.py	(revision c2255b793bae21a32b1274275ae60b44cdd94d7b)
+++ b/quantus/functions/perturb_func.py	(date 1681078345880)
@@ -5,14 +5,16 @@
 # Quantus is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 # You should have received a copy of the GNU Lesser General Public License along with Quantus. If not, see <https://www.gnu.org/licenses/>.
 # Quantus project URL: <https://github.com/understandable-machine-intelligence-lab/Quantus>.
-
+from __future__ import annotations
 
 import copy
-import random
-import warnings
-from typing import Any, Callable, Sequence, Tuple, Union, Optional
+from typing import Callable, Sequence, Tuple, Union, Optional, List, TYPE_CHECKING
+from operator import attrgetter
+
 import cv2
 import numpy as np
+from nlpaug.augmenter.char import KeyboardAug
+from nlpaug.augmenter.word import SpellingAug, SynonymAug
 from scipy.sparse import lil_matrix, csc_matrix
 from scipy.sparse.linalg import spsolve
 
@@ -23,6 +25,11 @@
     get_leftover_shape,
     offset_coordinates,
 )
+from quantus.helpers.nlp_utils import is_nlpaug_available
+from quantus.helpers.collection_utils import map_optional
+
+if TYPE_CHECKING:
+    from quantus.helpers.model.text_classifier import Tokenizable
 
 
 def perturb_batch(
@@ -58,7 +65,7 @@
         ), "arr and indices need same number of batches"
 
     if not inplace:
-        arr = arr.copy()
+        arr = np.copy(arr)
 
     # Run perturbation.
     for i in range(len(arr)):
@@ -229,7 +236,7 @@
     perturb_mean: float = 0.0,
     perturb_std: float = 0.01,
     **kwargs,
-) -> np.array:
+) -> np.ndarray:
     """
     Add gaussian noise to the input at indices.
 
@@ -265,13 +272,13 @@
 
 
 def uniform_noise(
-    arr: np.array,
+    arr: np.ndarray,
     indices: Tuple[slice, ...],  # Alt. Union[int, Sequence[int], Tuple[np.array]],
     indexed_axes: Sequence[int],
     lower_bound: float = 0.02,
     upper_bound: Union[None, float] = None,
     **kwargs,
-) -> np.array:
+) -> np.ndarray:
     """
     Add noise to the input at indices as sampled uniformly random from [-lower_bound, lower_bound].
     if upper_bound is None, and [lower_bound, upper_bound] otherwise.
@@ -556,3 +563,78 @@
          Array unperturbed.
     """
     return arr
+
+
+if is_nlpaug_available():
+
+    def spelling_replacement(
+        x_batch: List[str],
+        k: int = 3,
+        tokenizer: Optional[Tokenizable] = None,
+        **kwargs,
+    ) -> List[str]:
+        """
+        Replace k words in each entry of text by alternative spelling.
+
+        Examples
+        --------
+
+        >>> x = ["uneasy mishmash of styles and genres."]
+        >>> spelling_replacement(x)
+        ... ['uneasy mishmash of stiles and genres.']
+
+        """
+        aug = SpellingAug(
+            aug_max=k,
+            aug_min=k,
+            tokenizer=map_optional(tokenizer, attrgetter("split_into_tokens")),
+            reverse_tokenizer=map_optional(tokenizer, attrgetter("join_tokens")),
+        )
+        return aug.augment(x_batch)
+
+    def synonym_replacement(
+        x_batch: List[str],
+        k: int = 3,
+        tokenizer: Optional[Tokenizable] = None,
+        **kwargs,
+    ) -> List[str]:
+        """
+        Replace k words in each entry of text by synonym.
+
+        Examples
+        --------
+
+        >>> x = ["uneasy mishmash of styles and genres."]
+        >>> synonym_replacement(x)
+        ... ['nervous mishmash of styles and genres.']
+        """
+        aug = SynonymAug(
+            aug_max=k,
+            aug_min=k,
+            tokenizer=map_optional(tokenizer, attrgetter("split_into_tokens")),
+            reverse_tokenizer=map_optional(tokenizer, attrgetter("join_tokens")),
+        )
+        return aug.augment(x_batch)
+
+    def typo_replacement(
+        x_batch: List[str],
+        k: int = 3,
+        tokenizer: Optional[Tokenizable] = None,
+        **kwargs,
+    ) -> List[str]:
+        """
+        Replace k characters in k words in each entry of text mimicking typo.
+
+        Examples
+        --------
+        >>> x = ["uneasy mishmash of styles and genres."]
+        >>> typo_replacement(x)
+        ... ['uneasy mishmash of xtyles and genres.']
+        """
+        aug = KeyboardAug(
+            aug_word_min=k,
+            aug_word_max=k,
+            tokenizer=map_optional(tokenizer, attrgetter("split_into_tokens")),
+            reverse_tokenizer=map_optional(tokenizer, attrgetter("join_tokens")),
+        )
+        return aug.augment(x_batch)
Index: quantus/functions/similarity_func.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/quantus/functions/similarity_func.py b/quantus/functions/similarity_func.py
--- a/quantus/functions/similarity_func.py	(revision c2255b793bae21a32b1274275ae60b44cdd94d7b)
+++ b/quantus/functions/similarity_func.py	(date 1681078345880)
@@ -7,14 +7,62 @@
 # Quantus project URL: <https://github.com/understandable-machine-intelligence-lab/Quantus>.
 # Quantus project URL: https://github.com/understandable-machine-intelligence-lab/Quantus
 
-from typing import Union
+from __future__ import annotations
+
+from functools import wraps
+from typing import Union, Protocol, TypeVar
+import logging
 
 import numpy as np
 import scipy
 import skimage
 
 
-def correlation_spearman(a: np.array, b: np.array, **kwargs) -> float:
+log = logging.getLogger(__name__)
+
+
+class _SupportsSub(Protocol):
+    def __sub__(self, other):
+        ...
+
+
+T = TypeVar("T", bound=_SupportsSub, covariant=True)
+
+
+def vectorize_similarity(func):
+    vectorized_func = np.vectorize(func, signature="(n),(n)->()", cache=True)
+
+    @wraps(func)
+    def wrapper(a, b):
+        a = np.asarray(a)
+        b = np.asarray(b)
+
+        def flatten_over_batch(arr):
+            shape = np.shape(arr)
+            return np.reshape(arr, (shape[0], -1))
+
+        if np.ndim(a) != np.ndim(b):
+            raise ValueError(
+                f"a and b must have same shapes, but found, {a.shape = }, {b.shape = }"
+            )
+
+        if np.ndim(a) == 1:
+            return func(a, b)
+
+        if np.ndim(a) > 2:
+            log.warning(
+                f"{func.__name__} received array with { a.ndim = }, it was reshaped into {a.shape}."
+            )
+            a = flatten_over_batch(a)
+            b = flatten_over_batch(b)
+
+        return vectorized_func(a, b)
+
+    return wrapper
+
+
+@vectorize_similarity
+def correlation_spearman(a: np.ndarray, b: np.ndarray, **kwargs) -> np.ndarray | float:
     """
     Calculate Spearman rank of two images (or explanations).
 
@@ -35,7 +83,8 @@
     return scipy.stats.spearmanr(a, b)[0]
 
 
-def correlation_pearson(a: np.array, b: np.array, **kwargs) -> float:
+@vectorize_similarity
+def correlation_pearson(a: np.ndarray, b: np.ndarray, **kwargs) -> float:
     """
     Calculate Pearson correlation of two images (or explanations).
 
@@ -56,7 +105,10 @@
     return scipy.stats.pearsonr(a, b)[0]
 
 
-def correlation_kendall_tau(a: np.array, b: np.array, **kwargs) -> float:
+@vectorize_similarity
+def correlation_kendall_tau(
+    a: np.ndarray, b: np.ndarray, **kwargs
+) -> np.ndarray | float:
     """
     Calculate Kendall Tau correlation of two images (or explanations).
 
@@ -181,7 +233,7 @@
         return float(d1(a, b) / (d2(a=c, b=d) + eps))
 
 
-def abs_difference(a: np.array, b: np.array, **kwargs) -> float:
+def abs_difference(a: T, b: T, **kwargs) -> T:
     """
     Calculate the absolute difference between two images (or explanations).
 
@@ -199,7 +251,7 @@
     float
         The similarity score.
     """
-    return np.mean(abs(a - b))
+    return np.abs(a - b)
 
 
 def cosine(a: np.array, b: np.array, **kwargs) -> float:
@@ -223,7 +275,8 @@
     return scipy.spatial.distance.cosine(u=a, v=b)
 
 
-def ssim(a: np.array, b: np.array, **kwargs) -> float:
+@vectorize_similarity
+def ssim(a: np.ndarray, b: np.ndarray, **kwargs) -> float | np.ndarray:
     """
     Calculate Structural Similarity Index Measure of two images (or explanations).
 
@@ -252,7 +305,7 @@
     )
 
 
-def difference(a: np.array, b: np.array, **kwargs) -> float:
+def difference(a: T, b: T, **kwargs) -> T:
     """
     Calculate the difference between two images (or explanations).
 
Index: quantus/helpers/model/huggingface_tokenizer.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/quantus/helpers/model/huggingface_tokenizer.py b/quantus/helpers/model/huggingface_tokenizer.py
new file mode 100644
--- /dev/null	(date 1681078345881)
+++ b/quantus/helpers/model/huggingface_tokenizer.py	(date 1681078345881)
@@ -0,0 +1,41 @@
+# This file is part of Quantus.
+# Quantus is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
+# Quantus is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
+# You should have received a copy of the GNU Lesser General Public License along with Quantus. If not, see <https://www.gnu.org/licenses/>.
+# Quantus project URL: <https://github.com/understandable-machine-intelligence-lab/Quantus>.
+
+from __future__ import annotations
+
+from typing import Dict, List, Sequence, Iterable
+
+import numpy as np
+from quantus.helpers.collection_utils import add_default_items
+from quantus.helpers.model.text_classifier import Tokenizable
+
+
+class HuggingFaceTokenizer(Tokenizable):
+    """A wrapper around HuggingFace's hub tokenizers, which encapsulates common functionality used in Quantus."""
+
+    def __init__(self, tokenizer):
+        self.tokenizer = tokenizer
+
+    def batch_encode(self, text: List[str], **kwargs) -> Dict[str, np.ndarray]:  # type: ignore
+        kwargs = add_default_items(kwargs, dict(padding="longest", return_tensors="np"))
+        return self.tokenizer(text, **kwargs).data
+
+    def convert_ids_to_tokens(self, ids: Sequence[int]) -> List[str]:
+        return self.tokenizer.convert_ids_to_tokens(list(ids))
+
+    def token_id(self, token: str) -> int:
+        return self.tokenizer.convert_tokens_to_ids(token)
+
+    def batch_decode(
+        self, ids: List[int] | List[List[int]] | np.ndarray, **kwargs
+    ) -> List[str]:
+        return self.tokenizer.batch_decode(ids, **kwargs)
+
+    def split_into_tokens(self, text: str) -> List[str]:
+        return self.tokenizer.tokenize(text)
+
+    def join_tokens(self, tokens: List[str]) -> str:
+        return self.tokenizer.convert_tokens_to_string(tokens)
Index: quantus/helpers/model/model_interface.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/quantus/helpers/model/model_interface.py b/quantus/helpers/model/model_interface.py
--- a/quantus/helpers/model/model_interface.py	(revision c2255b793bae21a32b1274275ae60b44cdd94d7b)
+++ b/quantus/helpers/model/model_interface.py	(date 1681078345881)
@@ -1,4 +1,8 @@
-"""This model implements the basics for the ModelInterface class."""
+"""
+This module exports different interfaces for Quantus metrics to work with.
+Having a lot of small interfaces may first seem unnecessary, but it will come in handy
+when dealing with more complicated custom subclassed models.
+"""
 
 # This file is part of Quantus.
 # Quantus is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
@@ -6,13 +10,132 @@
 # You should have received a copy of the GNU Lesser General Public License along with Quantus. If not, see <https://www.gnu.org/licenses/>.
 # Quantus project URL: <https://github.com/understandable-machine-intelligence-lab/Quantus>.
 
+from __future__ import annotations
 from abc import ABC, abstractmethod
-from typing import Any, Dict, Optional, Tuple, List, Union
+from typing import (
+    Any,
+    Dict,
+    Optional,
+    Tuple,
+    List,
+    Union,
+    TYPE_CHECKING,
+    overload,
+    Generator,
+)
 
 import numpy as np
 
+if TYPE_CHECKING:
+    import tensorflow as tf
+    import torch
+
 
-class ModelInterface(ABC):
+class ModelWrapper(ABC):
+    """An interface which represents model wrapped in python object."""
+
+    @abstractmethod
+    @overload
+    def get_model(self) -> tf.keras.Model:
+        """
+        Get the original torch/tf model.
+        """
+        raise NotImplementedError
+
+    @abstractmethod
+    def get_model(self) -> torch.nn.Module:
+        """
+        Get the original torch/tf model.
+        """
+        raise NotImplementedError
+
+    @abstractmethod
+    @overload
+    def state_dict(self) -> List[np.ndarray]:
+        """
+        Get a dictionary of the model's learnable parameters.
+        """
+        raise NotImplementedError
+
+    @abstractmethod
+    def state_dict(self) -> Dict[torch, torch.Tensor]:
+        """
+        Get a dictionary of the model's learnable parameters.
+        """
+        raise NotImplementedError
+
+    @abstractmethod
+    def load_state_dict(
+        self, original_parameters: Dict[str, torch.Tensor] | List[np.ndarray]
+    ):
+        """Set model's learnable parameters."""
+        raise NotImplementedError
+
+
+class RandomisableModel(ABC):
+    """
+    A model wrapper, which additionally allows randomizing models internal weights,
+    which is required for Model Parameter Randomisation test.
+    """
+
+    @abstractmethod
+    def get_random_layer_generator(
+        self, order: str = "top_down", seed: int = 42
+    ) -> Generator[Any, None, None]:
+        """
+        In every iteration yields a copy of the model with one additional layer's parameters randomized.
+        For cascading randomization, set order (str) to 'top_down'. For independent randomization,
+        set it to 'independent'. For bottom-up order, set it to 'bottom_up'.
+        """
+        raise NotImplementedError
+
+    @property
+    @abstractmethod
+    def random_layer_generator_length(self) -> int:
+        """The only purpose of this method is to avoid materializing full generator in memory."""
+        raise NotImplementedError
+
+
+class HiddenRepresentationsModel(ABC):
+    """
+    A model wrapper, which additionally support retrieving hidden states,
+    which is required for Relative Representation Stability metric.
+    """
+
+    @abstractmethod
+    def get_hidden_representations(
+        self,
+        x: np.ndarray,
+        layer_names: Optional[List[str]] = None,
+        layer_indices: Optional[List[int]] = None,
+    ) -> np.ndarray:
+        """
+        Compute the model's internal representation of input x.
+        In practice, this means, executing a forward pass and then, capturing the output of layers (of interest).
+        As the exact definition of "internal model representation" is left out in the original paper (see: https://arxiv.org/pdf/2203.06877.pdf),
+        we make the implementation flexible.
+        It is up to the user whether all layers are used, or specific ones should be selected.
+        The user can therefore select a layer by providing 'layer_names' (exclusive) or 'layer_indices'.
+
+        Parameters
+        ----------
+        x: np.ndarray
+            4D tensor, a batch of input datapoints
+        layer_names: List[str]
+            List with names of layers, from which output should be captured.
+        layer_indices: List[int]
+            List with indices of layers, from which output should be captured.
+            Intended to use in case, when layer names are not unique, or unknown.
+
+        Returns
+        -------
+        L: np.ndarray
+            2D tensor with shape (batch_size, None)
+        """
+        raise NotImplementedError()
+
+
+class ModelInterface(ModelWrapper, RandomisableModel, HiddenRepresentationsModel, ABC):
     """Base ModelInterface for torch and tensorflow models."""
 
     def __init__(
@@ -91,29 +214,6 @@
             Inferred from the input shape if None.
         """
         raise NotImplementedError
-
-    @abstractmethod
-    def get_model(self):
-        """
-        Get the original torch/tf model.
-        """
-        raise NotImplementedError
-
-    @abstractmethod
-    def state_dict(self):
-        """
-        Get a dictionary of the model's learnable parameters.
-        """
-        raise NotImplementedError
-
-    @abstractmethod
-    def get_random_layer_generator(self):
-        """
-        In every iteration yields a copy of the model with one additional layer's parameters randomized.
-        For cascading randomization, set order (str) to 'top_down'. For independent randomization,
-        set it to 'independent'. For bottom-up order, set it to 'bottom_up'.
-        """
-        raise NotImplementedError
 
     @abstractmethod
     def add_mean_shift_to_first_layer(
@@ -139,35 +239,3 @@
             The resulting model with a shifted first layer.
         """
         raise NotImplementedError
-
-    @abstractmethod
-    def get_hidden_representations(
-        self,
-        x: np.ndarray,
-        layer_names: Optional[List[str]] = None,
-        layer_indices: Optional[List[int]] = None,
-    ) -> np.ndarray:
-        """
-        Compute the model's internal representation of input x.
-        In practice, this means, executing a forward pass and then, capturing the output of layers (of interest).
-        As the exact definition of "internal model representation" is left out in the original paper (see: https://arxiv.org/pdf/2203.06877.pdf),
-        we make the implementation flexible.
-        It is up to the user whether all layers are used, or specific ones should be selected.
-        The user can therefore select a layer by providing 'layer_names' (exclusive) or 'layer_indices'.
-
-        Parameters
-        ----------
-        x: np.ndarray
-            4D tensor, a batch of input datapoints
-        layer_names: List[str]
-            List with names of layers, from which output should be captured.
-        layer_indices: List[int]
-            List with indices of layers, from which output should be captured.
-            Intended to use in case, when layer names are not unique, or unknown.
-
-        Returns
-        -------
-        L: np.ndarray
-            2D tensor with shape (batch_size, None)
-        """
-        raise NotImplementedError()
Index: quantus/helpers/model/pytorch_model.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/quantus/helpers/model/pytorch_model.py b/quantus/helpers/model/pytorch_model.py
--- a/quantus/helpers/model/pytorch_model.py	(revision c2255b793bae21a32b1274275ae60b44cdd94d7b)
+++ b/quantus/helpers/model/pytorch_model.py	(date 1681078345881)
@@ -11,12 +11,14 @@
 from typing import Any, Dict, Optional, Tuple, List, Union
 from cachetools import cachedmethod, LRUCache
 import operator
+from functools import cached_property
 
 import numpy as np
 import torch
 
 from quantus.helpers import utils
 from quantus.helpers.model.model_interface import ModelInterface
+from quantus.helpers.torch_utils import list_layers, random_layer_generator
 
 
 class PyTorchModel(ModelInterface):
@@ -194,24 +196,7 @@
         layer.name, random_layer_model: string, torch.nn
             The layer name and the model.
         """
-        original_parameters = self.state_dict()
-        random_layer_model = deepcopy(self.model)
-
-        modules = [
-            l
-            for l in random_layer_model.named_modules()
-            if (hasattr(l[1], "reset_parameters"))
-        ]
-
-        if order == "top_down":
-            modules = modules[::-1]
-
-        for module in modules:
-            if order == "independent":
-                random_layer_model.load_state_dict(original_parameters)
-            torch.manual_seed(seed=seed + 1)
-            module[1].reset_parameters()
-            yield module[0], random_layer_model
+        return random_layer_generator(self, order, seed)
 
     def sample(
         self,
@@ -389,3 +374,10 @@
         # Cleanup.
         [i.remove() for i in new_hooks]
         return np.hstack(hidden_outputs)
+
+    @cached_property
+    def random_layer_generator_length(self) -> int:
+        return len(list_layers(self.model))
+
+    def load_state_dict(self, original_parameters: Dict[str, torch.Tensor]):
+        self.model.load_state_dict(original_parameters)
Index: quantus/helpers/model/text_classifier.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/quantus/helpers/model/text_classifier.py b/quantus/helpers/model/text_classifier.py
new file mode 100644
--- /dev/null	(date 1681078345881)
+++ b/quantus/helpers/model/text_classifier.py	(date 1681078345881)
@@ -0,0 +1,140 @@
+# This file is part of Quantus.
+# Quantus is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
+# Quantus is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
+# You should have received a copy of the GNU Lesser General Public License along with Quantus. If not, see <https://www.gnu.org/licenses/>.
+# Quantus project URL: <https://github.com/understandable-machine-intelligence-lab/Quantus>.
+
+from __future__ import annotations
+
+from abc import ABC, abstractmethod
+from typing import List, TypedDict, Tuple, Dict, Any, overload, TYPE_CHECKING, Sequence
+
+import numpy as np
+
+from quantus.helpers.collection_utils import safe_as_array
+from quantus.helpers.model.model_interface import (
+    RandomisableModel,
+    HiddenRepresentationsModel,
+    ModelWrapper,
+)
+
+if TYPE_CHECKING:
+    import tensorflow as tf
+    import torch
+
+R = TypedDict("R", {"input_ids": np.ndarray}, total=False)
+
+
+class Tokenizable(ABC):
+
+    """An interface, which must be implemented in order to use custom tokenizers."""
+
+    def get_input_ids(self, x_batch: List[str]) -> Tuple[Any, Dict[str, Any]]:
+        """Do batch encode, unpack input ids and other forward-pass kwargs."""
+        encoded_input = self.batch_encode(x_batch)
+        return encoded_input.pop("input_ids"), encoded_input  # type: ignore
+
+    @abstractmethod
+    def split_into_tokens(self, text: str) -> List[str]:
+        """ "Converts a string in a sequence of tokens, using the tokenizer."""
+        raise NotImplementedError
+
+    @abstractmethod
+    def join_tokens(self, tokens: List[str]) -> str:
+        raise NotImplementedError
+
+    @abstractmethod
+    def batch_encode(self, text: Sequence[str], **kwargs) -> Dict[str, Sequence[int]]:
+        """Convert batch of plain-text inputs to vocabulary id's."""
+        raise NotImplementedError
+
+    @abstractmethod
+    def convert_ids_to_tokens(self, ids: np.ndarray) -> List[str]:
+        """Convert batch of vocabulary id's batch to batch of plain-text strings."""
+        raise NotImplementedError
+
+    @abstractmethod
+    def token_id(self, token: str) -> int:
+        """Get id of token. This method is required for TokenPruning metric."""
+        raise NotImplementedError
+
+    @abstractmethod
+    def batch_decode(
+        self, ids: List[int] | List[List[int]] | np.ndarray, **kwargs
+    ) -> List[str]:
+        """Convert vocabulary ids to strings."""
+        raise NotImplementedError
+
+
+class TextClassifier(HiddenRepresentationsModel, RandomisableModel, ModelWrapper):
+    """
+    An interface for model, trained for text-classification task (aka sentiment analysis).
+    TextClassifier is a model with signature F: List['text'] -> np.ndarray
+    """
+
+    tokenizer: Tokenizable
+
+    def __call__(self, *args, **kwargs) -> tf.Tensor | torch.Tensor:
+        return self.get_model()(*args, **kwargs).logits
+
+    def get_embeddings(self, x_batch: List[str]) -> Tuple[np.ndarray, Dict[str, ...]]:
+        """Do batch encode, unpack input ids, convert to embeddings."""
+        input_ids, predict_kwargs = self.tokenizer.get_input_ids(x_batch)
+        return safe_as_array(self.embedding_lookup(input_ids)), predict_kwargs
+
+    @overload
+    def embedding_lookup(self, input_ids: tf.Tensor) -> tf.Tensor:
+        """Convert vocabulary ids to model's latent representations"""
+        raise NotImplementedError
+
+    @overload
+    def embedding_lookup(self, input_ids: torch.Tensor) -> torch.Tensor:
+        """Convert vocabulary ids to model's latent representations"""
+        raise NotImplementedError
+
+    @overload
+    def embedding_lookup(self, input_ids: np.ndarray) -> np.ndarray:
+        """Convert vocabulary ids to model's latent representations"""
+        raise NotImplementedError
+
+    @abstractmethod
+    def embedding_lookup(self, input_ids) -> np.ndarray:
+        """Convert vocabulary ids to model's latent representations"""
+        raise NotImplementedError
+
+    @overload
+    def predict(self, x_batch: np.ndarray, **kwargs) -> np.ndarray:
+        ...
+
+    @overload
+    def predict(self, x_batch: tf.Tensor, **kwargs) -> tf.Tensor:
+        ...
+
+    @overload
+    def predict(self, x_batch: torch.Tensor, **kwargs) -> torch.Tensor:
+        ...
+
+    @overload
+    def predict(self, x_batch: List[str], **kwargs) -> np.ndarray:
+        ...
+
+    @abstractmethod
+    def predict(self, x_batch, **kwargs) -> np.ndarray:
+        """Execute forward pass with plain text inputs."""
+        raise NotImplementedError
+
+    @overload
+    def get_hidden_representations(self, x: List[str], *args, **kwargs) -> np.ndarray:
+        ...
+
+    @overload
+    def get_hidden_representations(self, x: np.ndarray, *args, **kwargs) -> np.ndarray:
+        ...
+
+    @abstractmethod
+    def get_hidden_representations(self, x, *args, **kwargs) -> np.ndarray:
+        raise NotImplementedError
+
+
+# ---------- QA, NLI, Text Generation, Summarization, NER and more models to follow ----------
+# Or actually no, Quantus is designed for classifiers, so I probably will just show examples of other tasks separately.
Index: quantus/helpers/model/tf_hf_model.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/quantus/helpers/model/tf_hf_model.py b/quantus/helpers/model/tf_hf_model.py
new file mode 100644
--- /dev/null	(date 1681078345881)
+++ b/quantus/helpers/model/tf_hf_model.py	(date 1681078345881)
@@ -0,0 +1,120 @@
+# This file is part of Quantus.
+# Quantus is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
+# Quantus is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
+# You should have received a copy of the GNU Lesser General Public License along with Quantus. If not, see <https://www.gnu.org/licenses/>.
+# Quantus project URL: <https://github.com/understandable-machine-intelligence-lab/Quantus>.
+
+from __future__ import annotations
+
+from functools import singledispatchmethod, cached_property, partial
+from typing import List, Generator, Optional, Dict
+
+import keras
+from operator import contains
+import numpy as np
+import tensorflow as tf
+from transformers import (
+    TFPreTrainedModel,
+)
+
+from quantus.helpers.model.huggingface_tokenizer import HuggingFaceTokenizer
+from quantus.helpers.model.text_classifier import TextClassifier
+from quantus.helpers.collection_utils import (
+    value_or_default,
+    filter_dict,
+    add_default_items,
+)
+from quantus.helpers.tf_utils import (
+    is_xla_compatible_platform,
+    list_parameterizable_layers,
+    random_layer_generator,
+    supported_keras_engine_predict_kwargs,
+)
+
+
+class TFHuggingFaceTextClassifier(TextClassifier, tf.Module):
+    def __init__(
+        self,
+        model: TFPreTrainedModel,
+        tokenizer: HuggingFaceTokenizer,
+        softmax: Optional[bool] = None,
+        model_predict_kwargs: Optional[Dict[str, ...]] = None,
+    ):
+        super().__init__()
+        self.model = model
+        self.tokenizer = tokenizer
+        self.model._jit_compile = is_xla_compatible_platform()
+        model_predict_kwargs = filter_dict(
+            value_or_default(model_predict_kwargs, lambda: {}),
+            key_filter=partial(contains, supported_keras_engine_predict_kwargs()),
+        )
+        model_predict_kwargs = add_default_items(
+            model_predict_kwargs, dict(batch_size=64)
+        )
+        self.model.predict = partial(self.model.predict, **model_predict_kwargs)
+
+    def embedding_lookup(self, input_ids: np.ndarray | tf.Tensor) -> tf.Tensor:
+        return self.model.get_input_embeddings()(input_ids)
+
+    @singledispatchmethod
+    def predict(self, x_batch: List[str], **kwargs) -> np.ndarray:
+        encoded_inputs = self.tokenizer.batch_encode(x_batch, return_tensors="tf")
+        return self.model.predict(encoded_inputs, verbose=0, **kwargs).logits
+
+    @predict.register(tf.Tensor)
+    @predict.register(np.ndarray)
+    def _(self, x_batch, **kwargs) -> tf.Tensor:
+        return self.model(None, inputs_embeds=x_batch, training=False, **kwargs).logits
+
+    def get_random_layer_generator(
+        self, order: str = "top_down", seed: int = 42
+    ) -> Generator[TFHuggingFaceTextClassifier, None, None]:
+        return random_layer_generator(self, order, seed, flatten_layers=True)
+
+    @cached_property
+    def random_layer_generator_length(self) -> int:
+        return len(list_parameterizable_layers(self.get_model(), flatten_layers=True))
+
+    def get_model(self) -> keras.Model:
+        return self.model
+
+    def state_dict(self) -> List[np.ndarray]:
+        return self.model.get_weights()
+
+    def load_state_dict(self, original_parameters: List[np.ndarray]):
+        self.model.set_weights(original_parameters)
+
+    @singledispatchmethod
+    def get_hidden_representations(
+        self,
+        x_batch: List[str],
+        *args,
+        **kwargs,
+    ) -> np.ndarray:
+        encoded_batch = self.tokenizer.batch_encode(x_batch)
+        hidden_states = self.model(
+            **encoded_batch,
+            training=False,
+            output_hidden_states=True,
+            **kwargs,
+        ).hidden_states
+        hidden_states = tf.transpose(tf.stack(hidden_states), [1, 0, 2, 3])
+        return hidden_states
+
+    @get_hidden_representations.register(tf.Tensor)
+    @get_hidden_representations.register(np.ndarray)
+    def _(
+        self,
+        x_batch,
+        *args,
+        **kwargs,
+    ) -> np.ndarray:
+        hidden_states = self.model(
+            None,
+            inputs_embeds=x_batch,
+            training=False,
+            output_hidden_states=True,
+            **kwargs,
+        ).hidden_states
+        hidden_states = tf.transpose(tf.stack(hidden_states), [1, 0, 2, 3])
+        return hidden_states
Index: quantus/helpers/model/tf_model.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/quantus/helpers/model/tf_model.py b/quantus/helpers/model/tf_model.py
--- a/quantus/helpers/model/tf_model.py	(revision c2255b793bae21a32b1274275ae60b44cdd94d7b)
+++ b/quantus/helpers/model/tf_model.py	(date 1681078345882)
@@ -1,4 +1,8 @@
-"""This model creates the ModelInterface for Tensorflow."""
+"""
+This model creates the ModelInterface for Tensorflow.
+At first, having separate implementations for each interface may seem like un-necessary obfuscation of code.
+But, it allows for much greater level of customization by user (and NLP model's).
+"""
 
 # This file is part of Quantus.
 # Quantus is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
@@ -8,35 +12,34 @@
 
 from __future__ import annotations
 
+import operator
+from operator import contains
 from typing import Dict, Optional, Tuple, List, Union
-from keras.layers import Dense
-from keras import activations
-from keras import Model
-from keras.models import clone_model
+from warnings import warn
+from functools import cached_property, partial
+
 import numpy as np
 import tensorflow as tf
-from warnings import warn
 from cachetools import cachedmethod, LRUCache
-import operator
+from keras import Model
+from keras import activations
+from keras.layers import Dense
+from keras.models import clone_model
 
+from quantus.helpers import utils
 from quantus.helpers.model.model_interface import ModelInterface
-from quantus.helpers import utils
+from quantus.helpers.collection_utils import filter_dict
+from quantus.helpers.tf_utils import (
+    is_xla_compatible_platform,
+    random_layer_generator,
+    list_parameterizable_layers,
+    supported_keras_engine_predict_kwargs,
+)
 
 
 class TensorFlowModel(ModelInterface):
     """Interface for tensorflow models."""
 
-    # All kwargs supported by Keras API https://keras.io/api/models/model_training_apis/.
-    _available_predict_kwargs = [
-        "batch_size",
-        "verbose",
-        "steps",
-        "callbacks",
-        "max_queue_size",
-        "workers",
-        "use_multiprocessing",
-    ]
-
     def __init__(
         self,
         model: Model,
@@ -44,11 +47,6 @@
         softmax: bool = False,
         model_predict_kwargs: Optional[Dict[str, ...]] = None,
     ):
-        if model_predict_kwargs is None:
-            model_predict_kwargs = {}
-        # Disable progress bar while running inference on tf.keras.Model.
-        model_predict_kwargs["verbose"] = 0
-
         """
         Initialisation of ModelInterface class.
 
@@ -70,6 +68,11 @@
             softmax=softmax,
             model_predict_kwargs=model_predict_kwargs,
         )
+        self.model._jit_compile = is_xla_compatible_platform()
+        if model_predict_kwargs is None:
+            model_predict_kwargs = {}
+        # Disable progress bar while running inference on tf.keras.Model.
+        model_predict_kwargs["verbose"] = 0
         # get_hidden_representations needs to rebuild and re-trace the model.
         # In the case model has softmax on top, and we need linear activation, predict also needs to re-build the model.
         # This is computationally expensive, so we save the rebuilt model in cache and reuse it for consecutive calls.
@@ -81,9 +84,10 @@
         Filter out those, which are supported by Keras API.
         """
         all_kwargs = {**self.model_predict_kwargs, **kwargs}
-        predict_kwargs = {
-            k: all_kwargs[k] for k in all_kwargs if k in self._available_predict_kwargs
-        }
+        predict_kwargs = filter_dict(
+            all_kwargs,
+            key_filter=partial(contains, supported_keras_engine_predict_kwargs()),
+        )
         return predict_kwargs
 
     @property
@@ -252,25 +256,7 @@
         layer.name, random_layer_model: string, torch.nn
             The layer name and the model.
         """
-        original_parameters = self.state_dict()
-        random_layer_model = clone_model(self.model)
-
-        layers = [
-            _layer
-            for _layer in random_layer_model.layers
-            if len(_layer.get_weights()) > 0
-        ]
-
-        if order == "top_down":
-            layers = layers[::-1]
-
-        for layer in layers:
-            if order == "independent":
-                random_layer_model.set_weights(original_parameters)
-            weights = layer.get_weights()
-            np.random.seed(seed=seed + 1)
-            layer.set_weights([np.random.permutation(w) for w in weights])
-            yield layer.name, random_layer_model
+        return random_layer_generator(self, order, seed, flatten_layers=False)
 
     @cachedmethod(operator.attrgetter("cache"))
     def _build_hidden_representation_model(
@@ -416,3 +402,7 @@
             i.reshape((input_batch_size, -1)) for i in internal_representation
         ]
         return np.hstack(internal_representation)
+
+    @cached_property
+    def random_layer_generator_length(self) -> int:
+        return len(list_parameterizable_layers(self.get_model(), flatten_layers=False))
Index: quantus/helpers/model/torch_hf_model.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/quantus/helpers/model/torch_hf_model.py b/quantus/helpers/model/torch_hf_model.py
new file mode 100644
--- /dev/null	(date 1681078345882)
+++ b/quantus/helpers/model/torch_hf_model.py	(date 1681078345882)
@@ -0,0 +1,101 @@
+# This file is part of Quantus.
+# Quantus is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
+# Quantus is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
+# You should have received a copy of the GNU Lesser General Public License along with Quantus. If not, see <https://www.gnu.org/licenses/>.
+# Quantus project URL: <https://github.com/understandable-machine-intelligence-lab/Quantus>.
+
+from __future__ import annotations
+
+from functools import singledispatchmethod, partial, cached_property
+from typing import List, Optional, Generator, Dict
+
+import numpy as np
+import torch
+import torch.nn as nn
+from transformers import PreTrainedModel
+
+from quantus.helpers.model.huggingface_tokenizer import HuggingFaceTokenizer
+from quantus.helpers.model.text_classifier import TextClassifier
+from quantus.helpers.collection_utils import map_dict, value_or_default
+from quantus.helpers.torch_utils import random_layer_generator, list_layers
+
+
+class TorchHuggingFaceTextClassifier(TextClassifier):
+    def __init__(
+        self,
+        model: PreTrainedModel,
+        tokenizer: HuggingFaceTokenizer,
+        device: Optional[torch.device] = None,
+    ):
+        super().__init__()
+        self.tokenizer = tokenizer
+        self.device = value_or_default(device, lambda: torch.device("cpu"))
+        self.model = model.to(self.device)
+
+    def embedding_lookup(self, input_ids: torch.Tensor | np.ndarray) -> torch.Tensor:
+        if isinstance(input_ids, np.ndarray):
+            input_ids = torch.tensor(input_ids, device=self.device)
+        return self.model.get_input_embeddings()(input_ids)
+
+    @singledispatchmethod
+    def predict(self, x_batch: List[str], **kwargs) -> np.ndarray:
+        encoded_inputs = self.tokenizer.batch_encode(x_batch)
+        encoded_inputs = map_dict(
+            encoded_inputs, partial(torch.tensor, device=self.device)
+        )
+        logits = self.model(**encoded_inputs).logits
+        return logits.detach().cpu().numpy()
+
+    @predict.register
+    def _(self, x_batch: np.ndarray, **kwargs) -> torch.Tensor:
+        return self.predict(torch.tensor(x_batch, device=self.device), **kwargs)
+
+    @predict.register
+    def _(self, x_batch: torch.Tensor, **kwargs) -> torch.Tensor:
+        kwargs = map_dict(kwargs, partial(torch.tensor, device=self.device))
+        return self.model(None, inputs_embeds=x_batch, **kwargs).logits
+
+    def get_random_layer_generator(
+        self, order: str = "top_down", seed: int = 42
+    ) -> Generator[TorchHuggingFaceTextClassifier, None, None]:
+        return random_layer_generator(self, order, seed)
+
+    @cached_property
+    def random_layer_generator_length(self) -> int:
+        return len(list_layers(self.get_model()))
+
+    def get_model(self) -> nn.Module:
+        return self.model
+
+    def state_dict(self) -> Dict[str, torch.Tensor]:
+        return self.model.state_dict()
+
+    def load_state_dict(self, original_parameters: Dict[str, torch.Tensor]):
+        self.model.load_state_dict(original_parameters)
+
+    @singledispatchmethod
+    def get_hidden_representations(self, x_batch, **kwargs) -> np.ndarray:  # type: ignore
+        encoded_inputs = self.tokenizer.batch_encode(x_batch)
+        embeddings = self.embedding_lookup(encoded_inputs.pop("input_ids"))
+        return self.get_hidden_representations(embeddings, **encoded_inputs)
+
+    @get_hidden_representations.register
+    def _(self, x_batch: np.ndarray, **kwargs) -> np.ndarray:
+        return self.get_hidden_representations(
+            torch.tensor(x_batch, device=self.device), **kwargs
+        )
+
+    @get_hidden_representations.register
+    def _(self, x_batch: torch.Tensor, **kwargs) -> np.ndarray:
+        def map_fn(x):
+            if isinstance(x, np.ndarray):
+                return torch.tensor(x, device=self.device)
+            else:
+                return x
+
+        predict_kwargs = map_dict(kwargs, map_fn)
+        hidden_states = self.model(
+            None, inputs_embeds=x_batch, output_hidden_states=True, **predict_kwargs
+        ).hidden_states
+        hidden_states = np.stack([i.detach().cpu().numpy() for i in hidden_states])
+        return np.moveaxis(hidden_states, 0, 1)
Index: quantus/helpers/collection_utils.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/quantus/helpers/collection_utils.py b/quantus/helpers/collection_utils.py
new file mode 100644
--- /dev/null	(date 1681078345880)
+++ b/quantus/helpers/collection_utils.py	(date 1681078345880)
@@ -0,0 +1,153 @@
+from __future__ import annotations
+from functools import singledispatch
+
+import numpy as np
+from numpy.typing import ArrayLike
+from typing import (
+    Any,
+    Dict,
+    Optional,
+    List,
+    Iterable,
+    TypeVar,
+    Callable,
+    Sequence,
+    Union,
+    Mapping,
+)
+from sklearn.utils import gen_batches
+
+from quantus.helpers.tf_utils import is_tensorflow_available
+from quantus.helpers.torch_utils import is_torch_available
+
+
+@singledispatch
+def safe_as_array(a: ArrayLike, force: bool = False) -> np.ndarray:
+    """
+    Convert DNN frameworks' tensors to numpy arrays. Safe means safe from torch complaining about tensors
+    being on other device or attached to graph. So, the only one type we're really interested is torch.Tensor.
+    In practise, TF tensors can be passed to numpy functions without any issues, so we can avoid overhead of copying them.
+
+    Parameters
+    ----------
+    a:
+        Pytorch or TF tensor.
+    force:
+        If set to true, will force conversion of TF tensors to numpy arrays.
+        This option should be used, when user needs to modify values inside `a`, since TF tensors are read only.
+
+    Returns
+    -------
+    a:
+        np.ndarray or tf.Tensor, a is tf.Tensor and force=False.
+
+    """
+    return np.asarray(a)
+
+
+if is_torch_available():
+    import torch
+
+    @safe_as_array.register
+    def _(a: torch.Tensor, force: bool = False) -> np.ndarray:
+        return a.detach().cpu().numpy()
+
+
+if is_tensorflow_available():
+    import tensorflow as tf
+
+    @safe_as_array.register
+    def _(a: tf.Tensor, force: bool = False) -> ArrayLike:
+        if force:
+            return np.array(tf.identity(a))
+        return a
+
+
+T = TypeVar("T")
+R = TypeVar("R")
+
+
+def map_dict(
+    dictionary: Dict[str, T],
+    value_mapper: Callable[[T], R],
+    key_mapper: Callable[[str], str] = lambda x: x,
+) -> Dict[str, R]:
+    """Applies func to values in dict. Additionally, if provided can also map keys."""
+    result = {}
+    for k, v in dictionary.items():
+        result[key_mapper(k)] = value_mapper(v)
+    return result
+
+
+def flatten(list_2d: Iterable[Iterable[T]]) -> List[T]:
+    """Does the same as np.reshape(..., -1), but work also on ragged matrices."""
+    return [item for sublist in list_2d for item in sublist]
+
+
+def batch_inputs(flat_list: Sequence[T], batch_size: int) -> List[Iterable[T]]:
+    """Divide list in batches of batch_size, despite the name works also for any Sized and SupportsIndex."""
+    indices = list(gen_batches(len(flat_list), batch_size))
+    return list(map(lambda i: flat_list[i.start : i.stop], indices))
+
+
+def map_optional(val: Optional[T], func: Callable[[T], R]) -> Optional[R]:
+    """Apply func to value if not None, otherwise return None."""
+    if val is None:
+        return None
+    return func(val)
+
+
+def add_default_items(
+    dictionary: Optional[Dict[str, Any]], default_items: Dict[str, Any]
+) -> Dict[str, Any]:
+    """Add default_items into dictionary if not present."""
+    if dictionary is None:
+        return default_items.copy()
+
+    copy = dictionary.copy()
+
+    for k, v in default_items.items():
+        if k not in copy:
+            copy[k] = v
+
+    return copy
+
+
+def value_or_default(value: Optional[T], default_factory: Callable[[], T]) -> T:
+    """Return value from default_factory() if value is None, otherwise value itself."""
+    # Default is provided by callable, because otherwise it will force materialization of both values in memory.
+    if value is not None:
+        return value
+    else:
+        return default_factory()
+
+
+K = TypeVar("K")
+V = TypeVar("V")
+
+
+def filter_dict(
+    dictionary: Dict[K, V],
+    key_filter: Callable[[K], bool] = lambda a: True,
+    value_filter: Callable[[V], bool] = lambda b: True,
+) -> Dict[K, V]:
+    result = {}
+
+    for k, v in dictionary.items():
+        if key_filter(k) and value_filter(v):
+            result[k] = v
+
+    return result
+
+
+def query_nested_dict(key: str, dictionary: Mapping[str, ...]) -> Optional[Any]:
+    if key in dictionary:
+        return dictionary[key]
+
+    for value in dictionary.values():
+        if isinstance(value, Mapping):
+            result = query_nested_dict(key, value)
+
+            if result is not None:
+                return result
+    return None
Index: quantus/helpers/constants.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/quantus/helpers/constants.py b/quantus/helpers/constants.py
--- a/quantus/helpers/constants.py	(revision c2255b793bae21a32b1274275ae60b44cdd94d7b)
+++ b/quantus/helpers/constants.py	(date 1681078345880)
@@ -7,7 +7,8 @@
 # You should have received a copy of the GNU Lesser General Public License along with Quantus. If not, see <https://www.gnu.org/licenses/>.
 # Quantus project URL: <https://github.com/understandable-machine-intelligence-lab/Quantus>.
 
-from typing import List, Dict
+from typing import List, Dict, Type
+from collections import defaultdict
 
 from quantus.functions.loss_func import *
 from quantus.functions.normalise_func import *
@@ -30,6 +31,7 @@
         "ROAD": ROAD,
         "Infidelity": Infidelity,
         "Sufficiency": Sufficiency,
+        "TokenFlipping": TokenFlipping,
     },
     "Robustness": {
         "Continuity Test": Continuity,
@@ -100,6 +102,7 @@
     "normalise_by_negative": normalise_by_negative,
     "normalise_by_max": normalise_by_max,
     "denormalise": denormalise,
+    "normalise_sum_to_1": normalize_sum_to_1,
 }
 
 
@@ -151,6 +154,37 @@
 }
 
 
+# ---------------------- NLP --------------------------
+
+
+AVAILABLE_XAI_METHODS_NLP = [
+    "GradNorm",
+    "GradXInput",
+    "IntGrad",
+    "NoiseGrad",
+    "NoiseGrad++",
+    "LIME",
+    "SHAP",
+]
+
+XAI_METHODS_NLP_SUPPORT_EMBEDDINGS = [
+    "GradNorm",
+    "GradXInput",
+    "IntGrad",
+    "NoiseGrad",
+    "NoiseGrad++",
+]
+
+
+AVAILABLE_PLAIN_TEXT_PERTURBATION_FUNCTIONS = {
+    "spelling_replacement": spelling_replacement,
+    "typo_replacement": typo_replacement,
+    "synonym_replacement": synonym_replacement,
+}
+
+# -----------------------------------------------------
+
+
 def available_categories() -> List[str]:
     """
     Retrieve the available metric categories in Quantus.
@@ -184,7 +218,7 @@
     List[str]
         With the available explanation methods in Quantus.
     """
-    return [c for c in AVAILABLE_XAI_METHODS_TF]
+    return AVAILABLE_XAI_METHODS_TF
 
 
 def available_methods_captum() -> List[str]:
@@ -196,7 +230,7 @@
     List[str]
         With the available explanation methods in Quantus.
     """
-    return [c for c in AVAILABLE_XAI_METHODS_CAPTUM]
+    return AVAILABLE_XAI_METHODS_CAPTUM
 
 
 def available_perturbation_functions() -> List[str]:
@@ -233,3 +267,34 @@
         With the available normalisation functions in Quantus.
     """
     return [c for c in AVAILABLE_NORMALISATION_FUNCTIONS.keys()]
+
+
+# ---------------------- NLP --------------------------
+def available_nlp_metrics() -> Dict[str, List[Type]]:
+    result = defaultdict(lambda: [])
+
+    for k, v in AVAILABLE_METRICS.items():
+        for kk, vv in v.items():
+            if "NLP" in vv.data_domain_applicability:
+                result[k].append(kk)
+
+    return dict(result)
+
+
+def available_nlp_xai_methods_tf() -> List[str]:
+    return AVAILABLE_XAI_METHODS_NLP
+
+
+def available_nlp_xai_methods_torch() -> List[str]:
+    return AVAILABLE_XAI_METHODS_NLP
+
+
+def xai_methods_nlp_support_embeddings() -> List[str]:
+    return XAI_METHODS_NLP_SUPPORT_EMBEDDINGS
+
+
+def available_plain_text_perturbation_functions() -> List[str]:
+    return list(AVAILABLE_PLAIN_TEXT_PERTURBATION_FUNCTIONS.keys())
+
+
+# -----------------------------------------------------
Index: quantus/helpers/nlp_utils.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/quantus/helpers/nlp_utils.py b/quantus/helpers/nlp_utils.py
new file mode 100644
--- /dev/null	(date 1681078345882)
+++ b/quantus/helpers/nlp_utils.py	(date 1681078345882)
@@ -0,0 +1,64 @@
+from __future__ import annotations
+
+import typing
+from functools import lru_cache
+from importlib import util
+from operator import itemgetter
+from typing import List, Callable, TypeVar
+
+import numpy as np
+from cachetools import cached
+from quantus.helpers.types import Explanation
+
+T = TypeVar("T")
+R = TypeVar("R")
+
+
+def is_transformers_available() -> bool:
+    return util.find_spec("transformers") is not None
+
+
+def map_explanations(a_batch, fn: Callable[[T], R]) -> List[R]:
+    """Apply fn to a_batch, supports token-scores tuples as well as raw scores."""
+    if isinstance(a_batch, List):
+        return [(tokens, fn(scores)) for tokens, scores in a_batch]
+    else:
+        return fn(a_batch)  # type: ignore
+
+
+def get_scores(a_batch: List[Explanation]) -> np.ndarray:
+    """Get scores out of token + score tuples."""
+    # I was just tired having to type it every time.
+    return np.asarray(list(map(itemgetter(1), a_batch)))
+
+
+@cached(cache={}, key=lambda f: f.__name__)
+def is_plain_text_perturbation(func: Callable) -> bool:
+    """Determine perturbation type based on perturb_func signature."""
+    _annotations = func.__annotations__  # noqa
+    if "return" in _annotations:
+        type_annotation = _annotations["return"]
+    elif "x_batch" in _annotations:
+        type_annotation = _annotations["x_batch"]
+    else:
+        raise ValueError(
+            f"Could not determine type of perturbation from perturbation functions signature. "
+            f"Please add type annotation to `x_batch` argument or add return type annotation."
+        )
+
+    return type_annotation in (
+        "typing.List[str]",
+        "List[str]",
+        "list[str]",
+        typing.List[str],
+        List[str],
+        list[str],
+    )
+
+
+def is_nlpaug_available() -> bool:
+    return util.find_spec("nlpaug") is not None
+
+
+def is_nltk_available() -> bool:
+    return util.find_spec("nltk") is not None
Index: quantus/helpers/plotting.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/quantus/helpers/plotting.py b/quantus/helpers/plotting.py
--- a/quantus/helpers/plotting.py	(revision c2255b793bae21a32b1274275ae60b44cdd94d7b)
+++ b/quantus/helpers/plotting.py	(date 1681078345882)
@@ -5,13 +5,19 @@
 # Quantus is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 # You should have received a copy of the GNU Lesser General Public License along with Quantus. If not, see <https://www.gnu.org/licenses/>.
 # Quantus project URL: <https://github.com/understandable-machine-intelligence-lab/Quantus>.
+from __future__ import annotations
 
-from typing import List, Union, Dict, Any
+from typing import List, Union, Dict, Any, Optional, Tuple, TYPE_CHECKING
 
 import matplotlib.pyplot as plt
 import numpy as np
 
 from quantus.helpers import warn
+from quantus.helpers.types import Explanation
+from quantus.helpers.collection_utils import value_or_default
+
+if TYPE_CHECKING:
+    from quantus.metrics.faithfulness.token_flipping import TaskT
 
 
 def plot_pixel_flipping_experiment(
@@ -297,3 +303,283 @@
     plt.ylabel("Focus score")
     plt.tick_params(axis="x", which="both", bottom=False, top=False, labelbottom=False)
     plt.show()
+
+
+# ---------------- NLP --------------------
+
+
+DEFAULT_SPECIAL_TOKENS = [
+    "[CLS]",
+    "[SEP]",
+    "[PAD]",
+]
+
+
+class ColorMapper:
+    """
+    - Highest score get red (255,0,0).
+    - Lowest score gets blue (0,0,255).
+    - Positive scores are linearly interpolated between red and white (255, 255, 255).
+    - Negative scores are linearly interpolated between blue and white (255, 255, 255).
+    """
+
+    def __init__(self, max_score: float, min_score: float):
+        self.max_score = max_score
+        self.min_score = min_score
+
+    def to_rgb(
+        self, score: float, normalize_to_1: bool = False
+    ) -> Tuple[float, float, float]:
+        k = 1.0 if normalize_to_1 else 255.0
+
+        if score >= 0:
+            red = k
+            green = k * (1 - score / self.max_score)
+            blue = k * (1 - score / self.max_score)
+        else:
+            red = k * (1 - abs(score / self.min_score))
+            green = k * (1 - abs(score / self.min_score))
+            blue = k
+        return red, green, blue
+
+
+def _create_div(
+    explanation: Explanation,
+    label: str,
+    ignore_special_tokens: bool,
+    special_tokens: List[str],
+):
+    # Create a container, which inherits root styles.
+    div_template = """
+        <div class="container">
+            <p>
+                {{label}} <br>
+                {{saliency_map}}
+            </p>
+        </div>
+        """
+
+    # For each token, create a separate highlight span with different background color.
+    token_span_template = """
+        <span class="highlight-container" style="background:{{color}};">
+            <span class="highlight"> {{token}} </span>
+        </span>
+        """
+    tokens = explanation[0]
+    scores = explanation[1]
+    body = ""
+    color_mapper = ColorMapper(np.max(scores), np.min(scores))
+
+    for token, score in zip(tokens, scores):
+        if ignore_special_tokens and token in special_tokens:
+            continue
+        red, green, blue = color_mapper.to_rgb(score)
+        token_span = token_span_template.replace(
+            "{{color}}", f"rgb({red},{green},{blue})"
+        )
+        token_span = token_span.replace("{{token}}", token)
+        body += token_span + " "
+
+    return div_template.replace("{{label}}", label).replace("{{saliency_map}}", body)
+
+
+def visualise_explanations_as_html(
+    explanations: List[Explanation],
+    *,
+    labels: Optional[List[str]] = None,
+    ignore_special_tokens: bool = False,
+    special_tokens: Optional[List[str]] = None,
+) -> str:
+    """
+    Creates a heatmap visualisation from list of explanations. This method should be preferred for longer
+    examples. It is rendered correctly in VSCode, PyCharm, Colab, however not in GitHub or JupyterLab.
+
+    Parameters
+    ----------
+    explanations:
+        List of tuples (tokens, salience) containing batch of explanations.
+    labels:
+        Optional, list of labels to display on top of each explanation.
+    ignore_special_tokens:
+        If True, special tokens will not be rendered in heatmap.
+    special_tokens:
+        List of special tokens to ignore during heatmap creation, default= ["[CLS]", "[END]", "[PAD]"].
+
+    Returns
+    -------
+
+    html:
+        string containing raw html to visualise explanations.
+
+    Examples
+    -------
+
+    >>> from IPython.core.display import HTML
+    >>> from quantus.helpers.plotting import visualise_explanations_as_html
+    >>> a_batch = ...
+    >>> raw_html = visualise_explanations_as_html(a_batch)
+    >>> HTML(raw_html)
+
+    """
+
+    special_tokens = value_or_default(special_tokens, lambda: DEFAULT_SPECIAL_TOKENS)
+    # Define top-level styles
+    heatmap_template = """
+        <style>
+
+            .container {
+                line-height: 1.4;
+                text-align: center;
+                margin: 10px 10px 10px 10px;
+                color: black;
+                background: white;
+            }
+
+            p {
+                font-size: 16px;
+            }
+
+            .highlight-container, .highlight {
+                position: relative;
+                border-radius: 10% 10% 10% 10%;
+            }
+
+            .highlight-container {
+                display: inline-block;
+            }
+
+            .highlight-container:before {
+                content: " ";
+                display: block;
+                height: 90%;
+                width: 100%;
+                margin-left: -3px;
+                margin-right: -3px;
+                position: absolute;
+                top: -1px;
+                left: -1px;
+                padding: 10px 3px 3px 10px;
+            }
+
+        </style>
+
+        {{body}}
+        """
+
+    spans = ""
+    # For each token, create a separate div holding whole input sequence on 1 line.
+    for i, explanation in enumerate(explanations):
+        label = labels[i] if labels is not None else ""
+        div = _create_div(explanation, label, ignore_special_tokens, special_tokens)
+        spans += div
+    return heatmap_template.replace("{{body}}", spans)
+
+
+def _value_at_index_or_default(values, index, default):
+    if len(values) > index:
+        return values[index]
+    else:
+        return default
+
+
+def visualise_explanations_as_pyplot(
+    explanations: List[Explanation],
+    labels: Optional[List[str]] = None,
+    v_len_scale=0.75,
+    h_len_scale=1.25,
+):
+    """
+    Plots attributions over a batch of text sequence explanations. This function should be preferred is you need your
+    heatmaps to be correctly displayed in GitHubs preview. For longer inputs (over 15-20) tokens, the cells become
+    smaller, and it could be hard for viewer to see the actual tokens.
+
+    References:
+        - https://stackoverflow.com/questions/74046734/plot-text-saliency-map-in-jupyter-notebook
+
+    Parameters
+    ----------
+    explanations:
+        List of tuples (tokens, salience) containing batch of explanations.
+    labels:
+        Optional labels to display above each row.
+
+    Returns
+    -------
+    plot: matplotplib.pyplot.figure object, which will be automatically rendered by jupyter.
+    """
+
+    h_len = len(explanations)
+    v_len = len(explanations[0][0])
+
+    tokens = [i[0] for i in explanations]
+    scores = [i[1] for i in explanations]
+
+    fig, axes = plt.subplots(
+        h_len,
+        v_len,
+        figsize=(v_len * v_len_scale, h_len * h_len_scale),
+        gridspec_kw=dict(left=0.0, right=1.0),
+    )
+    hspace = 1.0 if labels is not None else 0.1
+    plt.subplots_adjust(hspace=hspace, wspace=0.0)
+    for i, ax in enumerate(axes):
+        color_mapper = ColorMapper(np.max(scores[i]), np.min(scores[i]))
+        if labels:
+            ax[v_len // 2].set_title(labels[i])
+
+        scores_row = scores[i]
+        tokens_row = tokens[i]
+        for j in range(v_len):
+            score = _value_at_index_or_default(scores_row, j, 0.0)
+            token = _value_at_index_or_default(tokens_row, j, "")
+            color = color_mapper.to_rgb(score, normalize_to_1=True)
+            rect = plt.Rectangle((0, 0), 1, 1, color=color)
+            ax[j].add_patch(rect)
+            ax[j].text(0.5, 0.5, token, ha="center", va="center")
+            ax[j].set_xlim(0, 1)
+            ax[j].set_ylim(0, 1)
+            ax[j].axis("off")
+            ax[j] = fig.add_axes([0, 0.05, 1, 0.9], fc=[0, 0, 0, 0])
+
+    ax = axes.ravel()[-1]
+    for axis in ["left", "right"]:
+        ax.spines[axis].set_visible(False)
+    ax.set_xticks([])
+    ax.set_yticks([])
+    plt.show()
+
+
+def plot_token_flipping_experiment(
+    score: np.ndarray | List[np.ndarray],
+    task: TaskT = "pruning",
+    legend: Optional[List[str]] = None,
+    style: Optional[Dict] = None,
+):
+    if task not in ("pruning", "activation"):
+        raise ValueError(f"Task must be either pruning or activation, but found {task}")
+
+    if isinstance(score, np.ndarray):
+        score = [score]
+
+    style = value_or_default(style, lambda: {})
+    fig, axes = plt.subplots()
+
+    axes.set(xlabel="% tokens flipped.")
+    axes.set(ylabel="$(y_o - y')^2$")
+    axes.set_title(f"Token {task} experiment")
+
+    with plt.style.context(style):
+        for i in score:
+            if i.ndim == 2:
+                i = np.mean(i, axis=0)
+            num_tokens = len(i)
+
+            x = np.arange(0, num_tokens + 1)
+            i = np.concatenate([[0.], i])
+
+            axes.plot(i, x, marker="o")
+
+        if legend is not None:
+            axes.legend(legend)
+
+    return axes
Index: quantus/helpers/tf_utils.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/quantus/helpers/tf_utils.py b/quantus/helpers/tf_utils.py
new file mode 100644
--- /dev/null	(date 1681078345882)
+++ b/quantus/helpers/tf_utils.py	(date 1681078345882)
@@ -0,0 +1,92 @@
+import platform
+from typing import List, Generator, Protocol, TypeVar
+from importlib import util
+import numpy as np
+
+
+def is_tensorflow_available() -> bool:
+    return util.find_spec("tensorflow") is not None
+
+
+def is_xla_compatible_platform() -> bool:
+    """Determine if host is xla-compatible."""
+    return not (platform.system() == "Darwin" and "arm" in platform.processor().lower())
+
+
+def supported_keras_engine_predict_kwargs() -> List[str]:
+    # All kwargs supported by Keras API https://keras.io/api/models/model_training_apis/.
+    return [
+        "batch_size",
+        "verbose",
+        "steps",
+        "callbacks",
+        "max_queue_size",
+        "workers",
+        "use_multiprocessing",
+    ]
+
+
+if is_tensorflow_available():
+    import tensorflow as tf
+    from tensorflow import keras
+
+    @tf.function(reduce_retracing=True, jit_compile=is_xla_compatible_platform())
+    def ndim(x):
+        return tf.size(tf.shape(x))
+
+    def list_parameterizable_layers(
+        model: keras.Model, flatten_layers: bool = False
+    ) -> List[keras.layers.Layer]:
+        if flatten_layers:
+            layers = list(model._flatten_layers(include_self=False, recursive=True))
+        else:
+            layers = model.layers
+        return list(filter(lambda i: len(i.get_weights()) > 0, layers))
+
+    class TFWrapper(Protocol):
+        model: keras.Model
+
+        def state_dict(self) -> List[np.ndarray]:
+            ...
+
+        def load_state_dict(self, params: List[np.ndarray]):
+            ...
+
+    T = TypeVar("T", bound=TFWrapper, covariant=True)
+
+    def random_layer_generator(
+        model_wrapper: T, order: str = "top_down", seed: int = 42, flatten_layers=False
+    ) -> Generator[T, None, None]:
+        original_parameters = model_wrapper.state_dict().copy()
+        layers = list_parameterizable_layers(model_wrapper.model, flatten_layers)
+
+        np.random.seed(seed)
+
+        if order == "top_down":
+            layers = layers[::-1]
+
+        for layer in layers:
+            if order == "independent":
+                model_wrapper.load_state_dict(original_parameters)
+
+            weights = layer.get_weights()
+            layer.set_weights(tf.nest.map_structure(np.random.permutation, weights))
+            yield layer.name, model_wrapper
+        # Restore original weights.
+        model_wrapper.load_state_dict(original_parameters)
+
+    def is_tensorflow_model(model):
+        if isinstance(model, keras.Model):
+            return True
+
+        for attr in ("model", "_model"):
+            # Mb we should check all attributes?
+            if hasattr(model, attr) and isinstance(getattr(model, attr), keras.Model):
+                return True
+        return False
+
+else:
+
+    def is_tensorflow_model(model) -> bool:
+        # Since tensorflow is not installed, model can't be tensorflow one.
+        return False
Index: quantus/helpers/torch_utils.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/quantus/helpers/torch_utils.py b/quantus/helpers/torch_utils.py
new file mode 100644
--- /dev/null	(date 1681078345882)
+++ b/quantus/helpers/torch_utils.py	(date 1681078345882)
@@ -0,0 +1,97 @@
+from importlib import util
+from typing import TypeVar, Tuple, List, Protocol, Dict, Generator
+
+import numpy as np
+
+
+def is_torch_available() -> bool:
+    return util.find_spec("torch") is not None
+
+
+if is_torch_available():
+    import torch
+    import torch.nn as nn
+
+    def choose_hardware_acceleration() -> torch.device:
+        """Choose device with highest compute capabilities."""
+        if torch.cuda.is_available():
+            device = "cuda:0"
+        elif is_mps_available():
+            device = "mps"
+        else:
+            device = "cpu"
+        return torch.device(device)
+
+    def is_mps_available() -> bool:
+        if hasattr(torch.backends, "mps"):
+            return torch.backends.mps.is_available()
+        return False
+
+    def list_layers(model: nn.Module) -> List[Tuple[str, nn.Module]]:
+        def should_not_skip(name: str, module: nn.Module):
+            # skip modules defined by subclassing and sequential API.
+            return not isinstance(module, (model.__class__, nn.Sequential))
+
+        # n is name, m is module.
+        return list(filter(lambda i: should_not_skip(*i), model.named_modules()))
+
+    class TorchWrapper(Protocol):
+        model: nn.Module
+        device: torch.device
+
+        def state_dict(self) -> Dict[str, torch.Tensor]:
+            ...
+
+        def load_state_dict(self, weights: Dict[str, torch.Tensor]) -> None:
+            ...
+
+    T = TypeVar("T", bound=TorchWrapper, covariant=True)
+
+    def random_layer_generator(
+        model_wrapper: T,
+        order: str = "top_down",
+        seed: int = 42,
+    ) -> Generator[T, None, None]:
+
+        from quantus.helpers.collection_utils import map_dict
+
+        original_parameters = model_wrapper.state_dict().copy()
+
+        modules = list_layers(model_wrapper.model)
+
+        def randomize_params(w):
+            return torch.tensor(
+                np.random.permutation(w.detach().cpu().numpy()),
+                device=model_wrapper.device,
+            )
+
+        np.random.seed(seed)
+
+        if order == "top_down":
+            modules = modules[::-1]
+
+        for module in modules:
+            if order == "independent":
+                model_wrapper.load_state_dict(original_parameters)
+            params = module[1].state_dict()
+            params = map_dict(params, randomize_params)
+            module[1].load_state_dict(params)
+            yield module[0], model_wrapper
+
+        # Restore original weights.
+        model_wrapper.load_state_dict(original_parameters)
+
+    def is_torch_model(model):
+        if isinstance(model, nn.Module):
+            return True
+
+        for attr in ("model", "_model"):
+            if hasattr(model, attr) and isinstance(getattr(model, attr), nn.Module):
+                return True
+        return False
+
+else:
+
+    def is_torch_model(model) -> bool:
+        # Torch is not installed, so it is definetelly not a torch model.
+        return False
Index: quantus/helpers/types.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/quantus/helpers/types.py b/quantus/helpers/types.py
new file mode 100644
--- /dev/null	(date 1681078345883)
+++ b/quantus/helpers/types.py	(date 1681078345883)
@@ -0,0 +1,114 @@
+# This file is part of Quantus.
+# Quantus is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
+# Quantus is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
+# You should have received a copy of the GNU Lesser General Public License along with Quantus. If not, see <https://www.gnu.org/licenses/>.
+# Quantus project URL: <https://github.com/understandable-machine-intelligence-lab/Quantus>.
+
+from __future__ import annotations
+
+from typing import (
+    TYPE_CHECKING,
+    Any,
+    Dict,
+    List,
+    Optional,
+    Protocol,
+    Tuple,
+    TypedDict,
+    Union,
+    overload,
+    Callable,
+)
+
+import numpy as np
+from numpy.typing import ArrayLike
+
+from quantus.helpers.model.model_interface import ModelInterface
+from quantus.helpers.model.text_classifier import TextClassifier, Tokenizable
+
+if TYPE_CHECKING:
+    import torch.nn as nn
+    from tensorflow import keras
+    from transformers import PreTrainedTokenizerBase
+
+    ModelT = Union[keras.Model, nn.Module, ModelInterface, TextClassifier]
+    TokenizerT = Union[PreTrainedTokenizerBase, Tokenizable]
+
+Explanation = Tuple[List[str], np.ndarray]
+MetricScores = Union[np.ndarray, float, Dict[str, Union[np.ndarray, float]]]
+
+
+class PerturbFn(Protocol):
+    @overload
+    def __call__(self, a: list[str], **kwargs) -> list[str]:
+        ...
+
+    @overload
+    def __call__(self, a: np.ndarray, **kwargs) -> np.ndarray:
+        ...
+
+    def __call__(self, a, **kwargs):
+        ...
+
+
+SimilarityFn = Callable[[np.ndarray, np.ndarray], ArrayLike]
+
+
+class NormFn(Protocol):
+    def __call__(self, a: np.ndarray, **kwargs) -> ArrayLike:
+        ...
+
+
+class NormaliseFn(Protocol):
+    def __call__(self, a: np.ndarray, **kwargs) -> np.ndarray:
+        ...
+
+
+class ExplainFn(Protocol):
+    @overload
+    def __call__(
+        self, model: TextClassifier, x_batch: np.ndarray, y_batch: np.ndarray, **kwargs
+    ) -> np.ndarray:
+        ...
+
+    @overload
+    def __call__(
+        self, model: TextClassifier, x_batch: list[str], y_batch: np.ndarray, **kwargs
+    ) -> list[Explanation]:
+        ...
+
+    @overload
+    def __call__(
+        self, model, x_batch: np.ndarray, y_batch: np.ndarray, **kwargs
+    ) -> np.ndarray:
+        ...
+
+    def __call__(self, model: ModelT, x_batch, y_batch: np.ndarray, **kwargs):
+        ...
+
+
+AggregateFn = Callable[[np.ndarray], ArrayLike]
+PersistFn = Callable[
+    [str, Dict[str, Any], Union[np.ndarray, Dict[str, np.ndarray]]], None
+]
+
+CallKwargs = TypedDict(
+    "CallKwargs",
+    dict(
+        model=Any,
+        x_batch=np.ndarray | List[str],
+        y_batch=Optional[np.ndarray],
+        a_batch=Optional[np.ndarray | List[Explanation]],
+        channel_first=Optional[bool],
+        explain_func=ExplainFn,
+        explain_func_kwargs=Optional[Dict[str, Any]],
+        model_predict_kwargs=Optional[Dict[str, Any]],
+        softmax=Optional[bool],
+        device=Optional[str],
+        batch_size=int,
+        custom_batch=Optional[Any],
+        s_batch=Optional[Any],
+        tokenizer=Optional[Any],
+    ),
+    total=False,
+)
Index: quantus/helpers/utils.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/quantus/helpers/utils.py b/quantus/helpers/utils.py
--- a/quantus/helpers/utils.py	(revision c2255b793bae21a32b1274275ae60b44cdd94d7b)
+++ b/quantus/helpers/utils.py	(date 1681078345883)
@@ -6,25 +6,58 @@
 # You should have received a copy of the GNU Lesser General Public License along with Quantus. If not, see <https://www.gnu.org/licenses/>.
 # Quantus project URL: <https://github.com/understandable-machine-intelligence-lab/Quantus>.
 
+from __future__ import annotations
+
 import copy
 import re
+import warnings
 from importlib import util
-from typing import Any, Dict, Optional, Sequence, Tuple, Union, List
+from typing import (
+    Any,
+    Dict,
+    Optional,
+    Sequence,
+    Tuple,
+    Union,
+    List,
+)
 
 import numpy as np
 from skimage.segmentation import slic, felzenszwalb
 
 from quantus.helpers import asserts
 from quantus.helpers.model.model_interface import ModelInterface
+from quantus.helpers.model.text_classifier import TextClassifier, Tokenizable
+from quantus.helpers.nlp_utils import is_transformers_available
+from quantus.helpers.tf_utils import is_tensorflow_available
+from quantus.helpers.torch_utils import is_torch_available
 
-if util.find_spec("torch"):
+if is_torch_available():
     import torch
     from quantus.helpers.model.pytorch_model import PyTorchModel
-if util.find_spec("tensorflow"):
+
+
+if is_tensorflow_available():
     import tensorflow as tf
     from quantus.helpers.model.tf_model import TensorFlowModel
 
 
+if is_transformers_available():
+    from quantus.helpers.model.huggingface_tokenizer import HuggingFaceTokenizer
+    from transformers import (
+        TFPreTrainedModel,
+        PreTrainedModel,
+        PreTrainedTokenizerBase,
+        AutoTokenizer,
+    )
+
+    if is_tensorflow_available():
+        from quantus.helpers.model.tf_hf_model import TFHuggingFaceTextClassifier
+
+    if is_torch_available():
+        from quantus.helpers.model.torch_hf_model import TorchHuggingFaceTextClassifier
+
+
 def get_superpixel_segments(img: np.ndarray, segmentation_method: str) -> np.ndarray:
     """
     Given an image, return segments or so-called 'super-pixels' segments i.e., an 2D mask with segment labels.
@@ -61,10 +94,10 @@
 
 
 def get_baseline_value(
-    value: Union[float, int, str, np.array],
+    value: float | int | str | np.array,
     arr: np.ndarray,
-    return_shape: Tuple,
-    patch: Optional[np.ndarray] = None,
+    return_shape: tuple,
+    patch: np.ndarray | None = None,
     **kwargs,
 ) -> np.array:
     """
@@ -126,7 +159,7 @@
 
 
 def get_baseline_dict(
-    arr: np.ndarray, patch: Optional[np.ndarray] = None, **kwargs
+    arr: np.ndarray, patch: np.ndarray | None = None, **kwargs
 ) -> dict:
     """
     Make a dictionary of baseline approaches depending on the input x (or patch of input).
@@ -184,7 +217,7 @@
     return " ".join(re.sub(r"([A-Z])", r" \1", name).split())
 
 
-def get_features_in_step(max_steps_per_input: int, input_shape: Tuple[int, ...]):
+def get_features_in_step(max_steps_per_input: int, input_shape: tuple[int, ...]):
     """
     Get the number of features in the iteration.
 
@@ -335,10 +368,10 @@
 
 def get_wrapped_model(
     model,
-    channel_first: bool,
-    softmax: bool,
-    device: Optional[str] = None,
-    model_predict_kwargs: Optional[Dict[str, Any]] = None,
+    channel_first: bool | None = None,
+    softmax: bool | None = None,
+    device: str | torch.device | None = None,
+    model_predict_kwargs: dict[str, Any] | None = None,
 ) -> ModelInterface:
     """
     Identifies the type of a model object and wraps the model in an appropriate interface.
@@ -361,6 +394,9 @@
     model: ModelInterface
         A wrapped ModelInterface model.
     """
+    if isinstance(model, ModelInterface):
+        return model
+
     if util.find_spec("tensorflow"):
         if isinstance(model, tf.keras.Model):
             return TensorFlowModel(
@@ -381,10 +417,49 @@
     raise ValueError("Model needs to be tf.keras.Model or torch.nn.Module.")
 
 
+def get_wrapped_text_classifier(
+    model,
+    softmax: bool | None = None,
+    device: str | torch.device | None = None,
+    model_predict_kwargs: dict[str, ...] | None = None,
+    tokenizer: Tokenizable | None = None,
+) -> TextClassifier:
+    if isinstance(model, TextClassifier):
+        return model
+
+    if not is_transformers_available():
+        raise ValueError(
+            """
+            Quantus supports text-classification models only from HuggingFace Hub,
+            but not `transformers installation was found`"
+            """
+        )
+
+    if tokenizer is None:
+        warnings.warn("No `tokenizer` provided, will try to create default one.")
+        handle = model.config._name_or_path  # noqa
+        tokenizer = HuggingFaceTokenizer(AutoTokenizer.from_pretrained(handle))
+    elif not isinstance(tokenizer, Tokenizable):
+        if not isinstance(tokenizer, PreTrainedTokenizerBase):
+            raise ValueError()
+        else:
+            tokenizer = HuggingFaceTokenizer(tokenizer)
+
+    if is_tensorflow_available():
+        if isinstance(model, TFPreTrainedModel):
+            return TFHuggingFaceTextClassifier(model, tokenizer)
+
+    if is_torch_available():
+        if isinstance(model, PreTrainedModel):
+            return TorchHuggingFaceTextClassifier(model, tokenizer, device)
+
+    raise ValueError()
+
+
 def blur_at_indices(
     arr: np.array,
     kernel: np.array,
-    indices: Union[int, Sequence[int], Tuple[np.array], Tuple[slice, ...]],
+    indices: int | Sequence[int] | tuple[np.array] | tuple[slice, ...],
     indexed_axes: Sequence[int],
 ) -> np.array:
     """
@@ -423,7 +498,7 @@
     # Handle indices
     indices = expand_indices(arr, indices, indexed_axes)
     none_slices = []
-    array_indices: Union[list, np.ndarray] = []
+    array_indices: list | np.ndarray = []
     for i, idx in enumerate(indices):
         if isinstance(idx, slice) and idx == slice(None):
             none_slices.append(idx)
@@ -431,7 +506,7 @@
             pad_left = kernel.shape[[p for p in indexed_axes].index(i)] // 2
             array_indices.append(idx + pad_left)
         else:
-            raise ValueError("Invalid indices {}".format(indices))
+            raise ValueError(f"Invalid indices {indices}")
     array_indices = np.array(array_indices)
 
     # Expand kernel dimensions
@@ -473,8 +548,8 @@
 
 
 def create_patch_slice(
-    patch_size: Union[int, Sequence[int]], coords: Sequence[int]
-) -> Tuple[slice, ...]:
+    patch_size: int | Sequence[int], coords: Sequence[int]
+) -> tuple[slice, ...]:
     """
     Create a patch slice from patch size and coordinates.
 
@@ -521,7 +596,7 @@
 
 
 def get_nr_patches(
-    patch_size: Union[int, Sequence[int]], shape: Tuple[int, ...], overlap: bool = False
+    patch_size: int | Sequence[int], shape: tuple[int, ...], overlap: bool = False
 ) -> int:
     """
     Get number of patches for given shape.
@@ -561,7 +636,7 @@
 
 def _pad_array(
     arr: np.array,
-    pad_width: Union[int, Sequence[int], Sequence[Tuple[int]], List[Tuple[int, int]]],
+    pad_width: int | Sequence[int] | Sequence[tuple[int]] | list[tuple[int, int]],
     mode: str,
     padded_axes: Sequence[int],
 ) -> np.array:
@@ -597,7 +672,7 @@
             if isinstance(p, tuple):
                 assert len(p) == 2, "Elements in pad_width need to have length 2"
 
-    pad_width_list: List[Union[Tuple[int], Tuple[int, int]]] = []
+    pad_width_list: list[tuple[int] | tuple[int, int]] = []
 
     for ax in range(arr.ndim):
         if ax not in padded_axes:
@@ -621,7 +696,7 @@
 
 def _unpad_array(
     arr: np.array,
-    pad_width: Union[int, Sequence[int], Sequence[Tuple[int]], List[Tuple[int, int]]],
+    pad_width: int | Sequence[int] | Sequence[tuple[int]] | list[tuple[int, int]],
     padded_axes: Sequence[int],
 ):
     """
@@ -818,11 +893,11 @@
 
 def expand_indices(
     arr: np.array,
-    indices: Union[
-        int, Sequence[int], Tuple[np.array], Tuple[slice, ...]
-    ],  # Alt. Union[int, Sequence[int], Tuple[Any], Tuple[Any], Tuple[slice]]
+    indices: (
+        int | Sequence[int] | tuple[np.array] | tuple[slice, ...]
+    ),  # Alt. Union[int, Sequence[int], Tuple[Any], Tuple[Any], Tuple[slice]]
     indexed_axes: Sequence[int],
-) -> Tuple:
+) -> tuple:
     """
     Expands indices to fit array shape. Returns expanded indices.
         --> if indices are a sequence of ints, they are interpreted as indices to the flattened arr,
@@ -852,7 +927,7 @@
 
     # Handle indices.
     if isinstance(indices, int):
-        expanded_indices: Union[np.ndarray, tuple, list] = [indices]
+        expanded_indices: np.ndarray | tuple | list = [indices]
     else:
         expanded_indices = []
         for i, idx in enumerate(indices):
@@ -917,7 +992,7 @@
     return tuple(expanded_indices)
 
 
-def get_leftover_shape(arr: np.array, axes: Sequence[int]) -> Tuple:
+def get_leftover_shape(arr: np.array, axes: Sequence[int]) -> tuple:
     """
     Gets the shape of the arr dimensions not included in axes.
 
@@ -943,7 +1018,7 @@
 
 
 def offset_coordinates(
-    indices: Union[list, Sequence[int], Tuple[Any]], offset: tuple, img_shape: tuple
+    indices: list | Sequence[int] | tuple[Any], offset: tuple, img_shape: tuple
 ):
     """
     Checks if offset coordinates are within the image frame.
@@ -992,3 +1067,10 @@
         Definite integral of values.
     """
     return np.trapz(np.array(values), dx=dx)
+
+
+def get_logits_for_labels(logits: np.ndarray, y_batch: np.ndarray) -> np.ndarray:
+    # Yes, this is a one-liner, yes this could be done in for-loop, but I've spent 2.5 hours debugging why
+    # my scores do not look like expected, so let this be separate function, so I don't have to figure it out
+    # the hard way again one more time.
+    return logits[np.asarray(list(range(y_batch.shape[0]))), y_batch]
Index: quantus/helpers/warn.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/quantus/helpers/warn.py b/quantus/helpers/warn.py
--- a/quantus/helpers/warn.py	(revision c2255b793bae21a32b1274275ae60b44cdd94d7b)
+++ b/quantus/helpers/warn.py	(date 1681078308176)
@@ -8,7 +8,6 @@
 
 import time
 import warnings
-
 import numpy as np
 
 from quantus.helpers.utils import get_name
@@ -259,7 +258,7 @@
     -------
     None
     """
-    if (x.flatten() != x_perturbed.flatten()).any():
+    if (np.reshape(x, -1) != np.reshape(x_perturbed, -1)).any():
         warnings.warn(
             "The settings for perturbing input e.g., 'perturb_func' "
             "didn't cause change in input. "
Index: quantus/metrics/axiomatic/input_invariance.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/quantus/metrics/axiomatic/input_invariance.py b/quantus/metrics/axiomatic/input_invariance.py
--- a/quantus/metrics/axiomatic/input_invariance.py	(revision c2255b793bae21a32b1274275ae60b44cdd94d7b)
+++ b/quantus/metrics/axiomatic/input_invariance.py	(date 1681078327727)
@@ -230,6 +230,7 @@
         y_batch: np.ndarray,
         a_batch: np.ndarray,
         s_batch: np.ndarray,
+        custom_batch=None
     ) -> np.ndarray:
         """
         Evaluates model and attributes on a single data batch and returns the batched evaluation result.
@@ -246,6 +247,8 @@
             The explanation to be evaluated on a batch-basis.
         s_batch: np.ndarray
             The segmentation to be evaluated on a batch-basis.
+        custom_batch:
+            Unused.
 
         Returns
         -------
Index: quantus/metrics/faithfulness/__init__.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/quantus/metrics/faithfulness/__init__.py b/quantus/metrics/faithfulness/__init__.py
--- a/quantus/metrics/faithfulness/__init__.py	(revision c2255b793bae21a32b1274275ae60b44cdd94d7b)
+++ b/quantus/metrics/faithfulness/__init__.py	(date 1681078308176)
@@ -20,3 +20,4 @@
 from quantus.metrics.faithfulness.selectivity import Selectivity
 from quantus.metrics.faithfulness.sensitivity_n import SensitivityN
 from quantus.metrics.faithfulness.sufficiency import Sufficiency
+from quantus.metrics.faithfulness.token_flipping import TokenFlipping
Index: quantus/metrics/faithfulness/token_flipping.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/quantus/metrics/faithfulness/token_flipping.py b/quantus/metrics/faithfulness/token_flipping.py
new file mode 100644
--- /dev/null	(date 1681078345883)
+++ b/quantus/metrics/faithfulness/token_flipping.py	(date 1681078345883)
@@ -0,0 +1,252 @@
+# This file is part of Quantus.
+# Quantus is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
+# Quantus is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
+# You should have received a copy of the GNU Lesser General Public License along with Quantus. If not, see <https://www.gnu.org/licenses/>.
+# Quantus project URL: <https://github.com/understandable-machine-intelligence-lab/Quantus>.
+
+from __future__ import annotations
+
+from typing import List, Optional, Literal, Callable, Dict
+
+import numpy as np
+
+from quantus.functions.loss_func import mse
+from quantus.functions.normalise_func import normalize_sum_to_1
+from quantus.helpers.model.text_classifier import TextClassifier, Tokenizable
+from quantus.helpers.plotting import plot_token_flipping_experiment
+from quantus.helpers.types import NormaliseFn, Explanation, ExplainFn
+from quantus.helpers.utils import get_logits_for_labels
+from quantus.helpers.collection_utils import safe_as_array
+from quantus.metrics.base_batched import BatchedMetric
+
+TaskT = Literal["pruning", "activation"]
+
+
+class TokenFlipping(BatchedMetric):
+    """
+    References:
+        - https://arxiv.org/abs/2202.07304
+        - https://github.com/AmeenAli/XAI_Transformers/blob/main/SST/run_sst.py#L127
+        - https://arxiv.org/pdf/2205.15389.pdf
+
+    For the NLP experiments, we consider token sequences instead of graph nodes. The activation task starts with an
+    empty sentence of “UNK” tokens, which are then gradually replaced with the original tokens in the order of highest
+    to lowest relevancy. In the pruning task, we remove tokens from lowest to highest absolute relevance by replacing
+    them with “UNK” tokens, similarly to the ablation experiments of Abnar & Zuidema (2020).
+    """
+
+    data_domain_applicability: List[str] = ["NLP"]
+
+    def __init__(
+        self,
+        abs: bool = False,
+        normalise: bool = False,
+        normalise_func: Optional[NormaliseFn] = normalize_sum_to_1,
+        normalise_func_kwargs: Optional[Dict[str, ...]] = None,
+        return_aggregate: bool = False,
+        aggregate_func=None,
+        default_plot_func: Optional[Callable] = plot_token_flipping_experiment,
+        disable_warnings: bool = False,
+        display_progressbar: bool = False,
+        mask_token: str = "[UNK]",
+        task: TaskT = "pruning",
+    ):
+        """
+
+        Parameters
+        ----------
+        abs: boolean
+            Indicates whether absolute operation is applied on the attribution, default=False.
+        normalise: boolean
+            Indicates whether normalise operation is applied on the attribution, default=True.
+        normalise_func: callable
+            Attribution normalisation function applied in case normalise=True.
+            If normalise_func=None, the default value is used, default=normalise_by_max.
+        normalise_func_kwargs: dict
+            Keyword arguments to be passed to normalise_func on call, default={}.
+        disable_warnings: boolean
+            Indicates whether the warnings are printed, default=False.
+        display_progressbar: boolean
+            Indicates whether a tqdm-progress-bar is printed, default=False.
+        mask_token:
+            Token which is used to mask inputs.
+        task:
+            Can be either pruning or activation.
+        """
+        super().__init__(
+            abs=abs,
+            normalise=normalise,
+            normalise_func=normalise_func,
+            normalise_func_kwargs=normalise_func_kwargs,
+            return_aggregate=return_aggregate,
+            aggregate_func=aggregate_func,
+            default_plot_func=default_plot_func,
+            display_progressbar=display_progressbar,
+            disable_warnings=disable_warnings,
+        )
+        if return_aggregate:
+            raise ValueError(f"Token Flipping does not support aggregating instances.")
+        if task not in ("pruning", "activation"):
+            raise ValueError(f"Unsupported task, supported are: pruning, activation.")
+        self.mask_token = mask_token
+        self.task = task
+
+    def __call__(
+        self,
+        model,
+        x_batch: List[str],
+        y_batch: Optional[np.ndarray],
+        a_batch: Optional[List[Explanation]],
+        explain_func: Optional[ExplainFn],
+        explain_func_kwargs: Optional[Dict[str, ...]] = None,
+        model_predict_kwargs: Optional[Dict[str, ...]] = None,
+        softmax: Optional[bool] = None,
+        s_batch: Optional[np.ndarray] = None,
+        channel_first: Optional[bool] = None,
+        device: Optional[str] = None,
+        batch_size: int = 64,
+        custom_batch: Optional[...] = None,
+        tokenizer: Optional[Tokenizable] = None,
+        **kwargs,
+    ) -> np.ndarray:
+        """
+        Parameters
+        ----------
+        model:
+            Torch or tensorflow model that is subject to explanation. Most probably, you will want to use
+            `quantus.nlp.TorchHuggingFaceTextClassifier` or `quantus.nlp.TensorFlowHuggingFaceTextClassifier`,
+            for out-of-the box support for models from Huggingface hub.
+        x_batch:
+            list, which contains the input data that are explained.
+        y_batch:
+            A np.ndarray which contains the output labels that are explained.
+        a_batch:
+            Pre-computed attributions i.e., explanations. Token and scores as well as scores only are supported.
+        explain_func:
+            Callable generating attributions.
+        explain_func_kwargs: dict, optional
+            Keyword arguments to be passed to explain_func on call.
+        batch_size:
+            Indicates size of batches, in which input dataset will be splitted.
+        tokenizer:
+            Optional custom tokenizer to use for encoding text.
+
+        Returns
+        -------
+
+        score:
+            MSE between original logits, and ones for masked inputs.
+
+        """
+
+        return super().__call__(  # type: ignore
+            model=model,
+            x_batch=x_batch,
+            y_batch=y_batch,
+            a_batch=a_batch,
+            s_batch=None,
+            channel_first=None,
+            explain_func=explain_func,
+            explain_func_kwargs=explain_func_kwargs,
+            model_predict_kwargs=model_predict_kwargs,
+            softmax=None,
+            device=device,
+            batch_size=batch_size,
+            custom_batch=None,
+            tokenizer=tokenizer,
+            **kwargs,
+        )
+
+    def evaluate_batch(
+        self,
+        model: TextClassifier,
+        x_batch: List[str],
+        y_batch: np.ndarray,
+        a_batch: List[Explanation],
+        s_batch=None,
+        custom_batch=None,
+    ) -> np.ndarray:
+        if self.task == "pruning":
+            scores = self._eval_pruning(model, x_batch, y_batch, a_batch)
+        else:
+            scores = self._eval_activation(model, x_batch, y_batch, a_batch)
+
+        og_logits = get_logits_for_labels(model.predict(x_batch), y_batch)
+
+        scores = mse(scores, og_logits, axis=1)
+
+        # Move batch axis to 0's position.
+        return scores.T
+
+    def _eval_activation(
+        self,
+        model: TextClassifier,
+        x_batch: List[str],
+        y_batch: np.ndarray,
+        a_batch: List[Explanation],
+    ):
+        batch_size = len(a_batch)
+        num_tokens = len(a_batch[0][1])
+
+        # We need to have tokens axis at positions 0, so we can just insert batches.
+        scores = np.full(shape=(num_tokens, batch_size), fill_value=np.NINF)
+        mask_indices_all = []
+        for a in a_batch:
+            # descending scores
+            token_indices_sorted_by_scores = np.argsort(a[1])[::-1]
+            mask_indices_all.append(token_indices_sorted_by_scores)
+
+        mask_indices_all = np.asarray(mask_indices_all).T
+        input_ids, predict_kwargs = model.tokenizer.get_input_ids(x_batch)
+        input_ids = safe_as_array(input_ids)
+        mask_token_id = model.tokenizer.token_id(self.mask_token)
+        masked_input_ids = np.full_like(np.asarray(input_ids), fill_value=mask_token_id)
+
+        for i, mask_indices_batch in enumerate(mask_indices_all):
+            for index_in_batch, mask_index in enumerate(mask_indices_batch):
+                masked_input_ids[index_in_batch][mask_index] = input_ids[
+                    index_in_batch
+                ][mask_index]
+
+            embeddings = model.embedding_lookup(masked_input_ids)
+            masked_logits = model.predict(embeddings, **predict_kwargs)
+            masked_logits = safe_as_array(masked_logits, force=True)
+            masked_logits = get_logits_for_labels(masked_logits, y_batch)
+            scores[i] = masked_logits
+
+        return scores
+
+    def _eval_pruning(
+        self,
+        model: TextClassifier,
+        x_batch: List[str],
+        y_batch: np.ndarray,
+        a_batch: List[Explanation],
+    ) -> np.ndarray:
+        batch_size = len(a_batch)
+        num_tokens = len(a_batch[0][1])
+
+        # We need to have tokens axis at positions 0, so we can just insert batches.
+        scores = np.full(shape=(num_tokens, batch_size), fill_value=np.NINF)
+        mask_indices_all = []
+        for a in a_batch:
+            # ascending scores
+            token_indices_sorted_by_scores = np.argsort(a[1])
+            mask_indices_all.append(token_indices_sorted_by_scores)
+
+        mask_indices_all = np.asarray(mask_indices_all).T
+        input_ids, predict_kwargs = model.tokenizer.get_input_ids(x_batch)
+        input_ids = safe_as_array(input_ids, force=True)
+        mask_token_id = model.tokenizer.token_id(self.mask_token)
+
+        for i, mask_indices_batch in enumerate(mask_indices_all):
+            for index_in_batch, mask_index in enumerate(mask_indices_batch):
+                input_ids[index_in_batch][mask_index] = mask_token_id
+
+            embeddings = model.embedding_lookup(input_ids)
+            masked_logits = model.predict(embeddings, **predict_kwargs)
+            masked_logits = safe_as_array(masked_logits, force=True)
+            masked_logits = get_logits_for_labels(masked_logits, y_batch)
+            scores[i] = masked_logits
+
+        return scores
Index: quantus/metrics/randomisation/model_parameter_randomisation.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/quantus/metrics/randomisation/model_parameter_randomisation.py b/quantus/metrics/randomisation/model_parameter_randomisation.py
--- a/quantus/metrics/randomisation/model_parameter_randomisation.py	(revision c2255b793bae21a32b1274275ae60b44cdd94d7b)
+++ b/quantus/metrics/randomisation/model_parameter_randomisation.py	(date 1681078345884)
@@ -1,34 +1,41 @@
-"""This module contains the implementation of the Model Parameter Sensitivity metric."""
-
 # This file is part of Quantus.
 # Quantus is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
 # Quantus is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 # You should have received a copy of the GNU Lesser General Public License along with Quantus. If not, see <https://www.gnu.org/licenses/>.
 # Quantus project URL: <https://github.com/understandable-machine-intelligence-lab/Quantus>.
 
-from typing import (
-    Any,
-    Callable,
-    Dict,
-    List,
-    Optional,
-    Tuple,
-    Union,
-    Collection,
-    Iterable,
-)
+from __future__ import annotations
+
+from collections import defaultdict
+from functools import singledispatchmethod
+from operator import itemgetter
+from typing import Callable, Dict, List, Optional, Literal
+
 import numpy as np
 from tqdm.auto import tqdm
 
+from quantus.functions.normalise_func import normalise_by_max
+from quantus.functions.similarity_func import correlation_spearman
 from quantus.helpers import asserts
 from quantus.helpers import warn
-from quantus.helpers.model.model_interface import ModelInterface
-from quantus.functions.normalise_func import normalise_by_max
-from quantus.functions.similarity_func import correlation_spearman
-from quantus.metrics.base import Metric
+from quantus.helpers.model.model_interface import ModelInterface, RandomisableModel
+from quantus.helpers.model.text_classifier import TextClassifier
+from quantus.helpers.plotting import plot_model_parameter_randomisation_experiment
+from quantus.helpers.types import (
+    SimilarityFn,
+    NormaliseFn,
+    ExplainFn,
+    Explanation,
+    AggregateFn,
+)
+from quantus.helpers.collection_utils import map_optional
+from quantus.helpers.nlp_utils import get_scores
+from quantus.metrics.base_batched import BatchedMetric
 
+LayerOrderT = Literal["independent", "top_down"]
 
-class ModelParameterRandomisation(Metric):
+
+class ModelParameterRandomisation(BatchedMetric):
     """
     Implementation of the Model Parameter Randomization Method by Adebayo et. al., 2018.
 
@@ -45,20 +52,26 @@
         NeurIPS (2018): 9525-9536.
     """
 
+    data_domain_applicability: list[str] = BatchedMetric.data_domain_applicability + [
+        "NLP"
+    ]
+
     @asserts.attributes_check
     def __init__(
         self,
-        similarity_func: Callable = None,
-        layer_order: str = "independent",
+        similarity_func: SimilarityFn = None,
+        layer_order: LayerOrderT = "independent",
         seed: int = 42,
         return_sample_correlation: bool = False,
         abs: bool = True,
         normalise: bool = True,
-        normalise_func: Optional[Callable[[np.ndarray], np.ndarray]] = None,
-        normalise_func_kwargs: Optional[Dict[str, Any]] = None,
+        normalise_func: NormaliseFn | None = None,
+        normalise_func_kwargs: dict[str, ...] | None = None,
         return_aggregate: bool = False,
-        aggregate_func: Callable = None,
-        default_plot_func: Optional[Callable] = None,
+        aggregate_func: AggregateFn | None = None,
+        default_plot_func: None | (
+            Callable
+        ) = plot_model_parameter_randomisation_experiment,
         disable_warnings: bool = False,
         display_progressbar: bool = False,
         **kwargs,
@@ -148,18 +161,18 @@
         model,
         x_batch: np.array,
         y_batch: np.array,
-        a_batch: Optional[np.ndarray] = None,
-        s_batch: Optional[np.ndarray] = None,
-        channel_first: Optional[bool] = None,
-        explain_func: Optional[Callable] = None,
-        explain_func_kwargs: Optional[Dict] = None,
-        model_predict_kwargs: Optional[Dict] = None,
-        softmax: Optional[bool] = False,
-        device: Optional[str] = None,
+        a_batch: list[Explanation] | np.ndarray | None = None,
+        s_batch: np.ndarray | None = None,
+        channel_first: bool | None = None,
+        explain_func: ExplainFn | None = None,
+        explain_func_kwargs: dict[str, ...] | None = None,
+        model_predict_kwargs: dict[str, ...] | None = None,
+        softmax: bool | None = False,
+        device: str | None = None,
         batch_size: int = 64,
-        custom_batch: Optional[Any] = None,
+        custom_batch: ... | None = None,
         **kwargs,
-    ) -> Union[List[float], float, Dict[str, List[float]], Collection[Any]]:
+    ) -> dict[str, np.ndarray] | np.ndarray | float:
         """
         This implementation represents the main logic of the metric and makes the class object callable.
         It completes instance-wise evaluation of explanations (a_batch) with respect to input data (x_batch),
@@ -240,7 +253,6 @@
         # Run deprecation warnings.
         warn.deprecation_warnings(kwargs)
         warn.check_kwargs(kwargs)
-
         data = self.general_preprocess(
             model=model,
             x_batch=x_batch,
@@ -255,123 +267,107 @@
             softmax=softmax,
             device=device,
         )
+        del model
         model = data["model"]
+        if not isinstance(model, RandomisableModel):
+            raise ValueError(
+                f"Custom models need to implement RandomisableModel in order to be used with Model Parameter Randomisation metric."
+            )
+        del x_batch
+        del y_batch
+        del a_batch
+
         x_batch = data["x_batch"]
         y_batch = data["y_batch"]
         a_batch = data["a_batch"]
 
         # Results are returned/saved as a dictionary not as a list as in the super-class.
-        self.last_results = {}
-
-        # Get number of iterations from number of layers.
-        n_layers = len(list(model.get_random_layer_generator(order=self.layer_order)))
+        results_per_layer = defaultdict(lambda: [])
 
         model_iterator = tqdm(
-            model.get_random_layer_generator(order=self.layer_order, seed=self.seed),
-            total=n_layers,
+            model.get_random_layer_generator(self.layer_order, self.seed),
+            total=model.random_layer_generator_length,
             disable=not self.display_progressbar,
         )
 
         for layer_name, random_layer_model in model_iterator:
-            similarity_scores = [None for _ in x_batch]
-
             # Generate an explanation with perturbed model.
-            a_batch_perturbed = self.explain_func(
-                model=random_layer_model,
-                inputs=x_batch,
-                targets=y_batch,
-                **self.explain_func_kwargs,
-            )
-
-            batch_iterator = enumerate(zip(a_batch, a_batch_perturbed))
-            for instance_id, (a_instance, a_instance_perturbed) in batch_iterator:
-                result = self.evaluate_instance(
-                    model=random_layer_model,
-                    x=None,
-                    y=None,
-                    s=None,
-                    a=a_instance,
-                    a_perturbed=a_instance_perturbed,
-                )
-                similarity_scores[instance_id] = result
+            for i, x in enumerate(x_batch):
+                y = map_optional(y_batch, itemgetter(i))
+                a = map_optional(a_batch, itemgetter(i))
+                x, y, a, _ = self.batch_preprocess(model, x, y, a)
+                similarity_score = self.evaluate_batch(random_layer_model, x, y, a)
+                results_per_layer[layer_name].extend(similarity_score)
 
-            # Save similarity scores in a result dictionary.
-            self.last_results[layer_name] = similarity_scores
-
-        # Call post-processing
-        self.custom_postprocess(
-            model=model,
-            x_batch=x_batch,
-            y_batch=y_batch,
-            a_batch=a_batch,
-            s_batch=s_batch,
-        )
+        result = dict(results_per_layer)
 
         if self.return_sample_correlation:
-            self.last_results = self.compute_correlation_per_sample()
+            result = self.compute_correlation_per_sample(len(x_batch), result)
 
         if self.return_aggregate:
             assert self.return_sample_correlation, (
                 "You must set 'return_average_correlation_per_sample'"
                 " to True in order to compute te aggregat"
             )
-            self.last_results = [self.aggregate_func(self.last_results)]
+            result = [self.aggregate_func(self.last_results)]
 
+        # Save results to instance.
+        self.last_results = result
         self.all_results.append(self.last_results)
-
         return self.last_results
 
-    def evaluate_instance(
+    @singledispatchmethod
+    def evaluate_batch(
         self,
         model: ModelInterface,
-        x: Optional[np.ndarray],
-        y: Optional[np.ndarray],
-        a: Optional[np.ndarray],
-        s: Optional[np.ndarray],
-        a_perturbed: Optional[np.ndarray] = None,
-    ) -> float:
+        x_batch: np.ndarray,
+        y_batch: np.ndarray,
+        a_batch: np.ndarray,
+        *args,
+    ) -> np.ndarray:
         """
-        Evaluate instance gets model and data for a single instance as input and returns the evaluation result.
+        Compute similarity for original explanations and explanations generated by randomized model.
+
 
-        Parameters
-        ----------
-        i: integer
-            The evaluation instance.
-        model: ModelInterface
-            A ModelInteface that is subject to explanation.
-        x: np.ndarray
-            The input to be evaluated on an instance-basis.
-        y: np.ndarray
-            The output to be evaluated on an instance-basis.
-        a: np.ndarray
-            The explanation to be evaluated on an instance-basis.
-        s: np.ndarray
-            The segmentation to be evaluated on an instance-basis.
-        a_perturbed: np.ndarray
-            The perturbed attributions.
+        Returns
+        -------
+        float
+            The evaluation results.
+        """
+        a_randomized = self.explain_batch(model, x_batch, y_batch)
+        # Compute distance measure.
+        return self.similarity_func(a_batch, a_randomized)
+
+    @evaluate_batch.register
+    def _(
+        self,
+        model: TextClassifier,
+        x_batch: list[str],
+        y_batch: np.ndarray,
+        a_batch: list[Explanation],
+        *args,
+    ) -> np.ndarray:
+        """
+        Compute similarity for original explanations and explanations generated by randomized model.
+
 
         Returns
         -------
         float
             The evaluation results.
         """
-        if self.normalise:
-            a_perturbed = self.normalise_func(a_perturbed, **self.normalise_func_kwargs)
-
-        if self.abs:
-            a_perturbed = np.abs(a_perturbed)
-
+        a_randomized = self.explain_batch(model, x_batch, y_batch)
         # Compute distance measure.
-        return self.similarity_func(a_perturbed.flatten(), a.flatten())
+        return self.similarity_func(get_scores(a_batch), get_scores(a_randomized))
 
     def custom_preprocess(
         self,
         model: ModelInterface,
         x_batch: np.ndarray,
-        y_batch: Optional[np.ndarray],
-        a_batch: Optional[np.ndarray],
+        y_batch: np.ndarray | None,
+        a_batch: np.ndarray | None,
         s_batch: np.ndarray,
-        custom_batch: Optional[np.ndarray],
+        custom_batch: np.ndarray | None,
     ) -> None:
         """
         Implementation of custom_preprocess_batch.
@@ -399,22 +395,20 @@
         # won't be executed when a_batch != None.
         asserts.assert_explain_func(explain_func=self.explain_func)
 
+    @staticmethod
     def compute_correlation_per_sample(
-        self,
-    ) -> Union[List[List[Any]], Dict[int, List[Any]]]:
-        assert isinstance(self.last_results, dict), (
+        num_samples: int, results_per_layer: dict[str, np.ndarray]
+    ) -> np.ndarray:
+        assert isinstance(results_per_layer, Dict), (
             "To compute the average correlation coefficient per sample for "
             "Model Parameter Randomisation Test, 'last_result' "
             "must be of type dict."
         )
-        layer_length = len(self.last_results[list(self.last_results.keys())[0]])
-        results: Dict[int, list] = {sample: [] for sample in range(layer_length)}
-
-        for sample in results:
-            for layer in self.last_results:
-                results[sample].append(float(self.last_results[layer][sample]))
-            results[sample] = np.mean(results[sample])
+        results_per_sample_accumulator = defaultdict(lambda: [])
+        for sample in range(num_samples):
+            for layer in results_per_layer:
+                results_per_sample_accumulator[str(sample)].append(
+                    float(results_per_layer[layer][sample])
+                )
 
-        corr_coeffs = list(results.values())
-
-        return corr_coeffs
+        return np.mean(results_per_sample_accumulator, axis=1)
Index: quantus/metrics/randomisation/random_logit.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/quantus/metrics/randomisation/random_logit.py b/quantus/metrics/randomisation/random_logit.py
--- a/quantus/metrics/randomisation/random_logit.py	(revision c2255b793bae21a32b1274275ae60b44cdd94d7b)
+++ b/quantus/metrics/randomisation/random_logit.py	(date 1681078345884)
@@ -6,18 +6,22 @@
 # You should have received a copy of the GNU Lesser General Public License along with Quantus. If not, see <https://www.gnu.org/licenses/>.
 # Quantus project URL: <https://github.com/understandable-machine-intelligence-lab/Quantus>.
 
-from typing import Any, Callable, Dict, List, Optional, Tuple, Union
+from __future__ import annotations
+
+from typing import Any, Callable, Dict, List, Optional
 import numpy as np
-
+from quantus.helpers.types import SimilarityFn, NormaliseFn, ExplainFn
 from quantus.helpers import asserts
 from quantus.helpers import warn
 from quantus.helpers.model.model_interface import ModelInterface
+from quantus.helpers.model.text_classifier import TextClassifier
 from quantus.functions.normalise_func import normalise_by_max
 from quantus.functions.similarity_func import ssim
-from quantus.metrics.base import Metric
+from quantus.metrics.base_batched import BatchedMetric
+from quantus.helpers.nlp_utils import get_scores
 
 
-class RandomLogit(Metric):
+class RandomLogit(BatchedMetric):
     """
     Implementation of the Random Logit Metric by Sixt et al., 2020.
 
@@ -29,15 +33,17 @@
         Attributions Fail." ICML (2020): 9046-9057.
     """
 
+    data_domain_applicability: List[str] = BatchedMetric.data_domain_applicability + ["NLP"]
+
     @asserts.attributes_check
     def __init__(
         self,
-        similarity_func: Callable = None,
+        similarity_func: SimilarityFn = None,
         num_classes: int = 1000,
         seed: int = 42,
         abs: bool = False,
         normalise: bool = True,
-        normalise_func: Optional[Callable[[np.ndarray], np.ndarray]] = None,
+        normalise_func: Optional[NormaliseFn] = None,
         normalise_func_kwargs: Optional[Dict[str, Any]] = None,
         return_aggregate: bool = False,
         aggregate_func: Callable = np.mean,
@@ -118,10 +124,10 @@
         model,
         x_batch: np.array,
         y_batch: np.array,
-        a_batch: Optional[np.ndarray] = None,
+        a_batch: Optional = None,
         s_batch: Optional[np.ndarray] = None,
         channel_first: Optional[bool] = None,
-        explain_func: Optional[Callable] = None,
+        explain_func: Optional[ExplainFn] = None,
         explain_func_kwargs: Optional[Dict] = None,
         model_predict_kwargs: Optional[Dict] = None,
         softmax: Optional[bool] = False,
@@ -129,7 +135,7 @@
         batch_size: int = 64,
         custom_batch: Optional[Any] = None,
         **kwargs,
-    ) -> List[float]:
+    ):
         """
         This implementation represents the main logic of the metric and makes the class object callable.
         It completes instance-wise evaluation of explanations (a_batch) with respect to input data (x_batch),
@@ -219,61 +225,60 @@
             **kwargs,
         )
 
-    def evaluate_instance(
+    def evaluate_batch(
         self,
-        model: ModelInterface,
-        x: np.ndarray,
-        y: np.ndarray,
-        a: np.ndarray,
-        s: np.ndarray,
-    ) -> float:
+        model: ModelInterface | TextClassifier,
+        x_batch: np.ndarray | List[str],
+        y_batch: np.ndarray,
+        a_batch,
+        s_batch: np.ndarray = None,
+        custom_batch = None
+    ) -> np.ndarray | float:
         """
-        Evaluate instance gets model and data for a single instance as input and returns the evaluation result.
+        Evaluates model and attributes on a single data batch and returns the batched evaluation result.
 
         Parameters
         ----------
         model: ModelInterface
             A ModelInteface that is subject to explanation.
-        x: np.ndarray
+        x_batch: np.ndarray
             The input to be evaluated on an instance-basis.
-        y: np.ndarray
+        y_batch: np.ndarray
             The output to be evaluated on an instance-basis.
-        a: np.ndarray
+        a_batch: np.ndarray
             The explanation to be evaluated on an instance-basis.
-        s: np.ndarray
+        s_batch: np.ndarray
             The segmentation to be evaluated on an instance-basis.
+        custom_batch:
+            Unused.
 
         Returns
         -------
-        float
-            The evaluation results.
+           : np.ndarray
+            The batched evaluation results.
         """
         # Randomly select off-class labels.
         np.random.seed(self.seed)
-        y_off = np.array(
-            [
-                np.random.choice(
-                    [y_ for y_ in list(np.arange(0, self.num_classes)) if y_ != y]
-                )
-            ]
-        )
+
+        def off_label_choice(y):
+            return np.random.choice(
+                [y_ for y_ in list(np.arange(0, self.num_classes)) if y_ != y]
+            )
 
+        y_off = np.asarray([off_label_choice(y) for y in y_batch])
         # Explain against a random class.
-        a_perturbed = self.explain_func(
-            model=model.get_model(),
-            inputs=np.expand_dims(x, axis=0),
-            targets=y_off,
-            **self.explain_func_kwargs,
-        )
+        a_off = self.explain_batch(model, x_batch, y_off)
 
-        # Normalise and take absolute values of the attributions, if True.
-        if self.normalise:
-            a_perturbed = self.normalise_func(a_perturbed, **self.normalise_func_kwargs)
+        if isinstance(model, TextClassifier):
+            # In case explanation have token in them, drop them.
+            a_batch = get_scores(a_batch)
+            a_off = get_scores(a_off)
 
-        if self.abs:
-            a_perturbed = np.abs(a_perturbed)
+        batch_size = len(x_batch)
+        a_batch = np.reshape(a_batch, (batch_size, -1))
+        a_off = np.reshape(a_off, (batch_size, -1))
 
-        return self.similarity_func(a.flatten(), a_perturbed.flatten())
+        return self.similarity_func(a_batch, a_off)
 
     def custom_preprocess(
         self,
@@ -308,4 +313,4 @@
         """
         # Additional explain_func assert, as the one in general_preprocess()
         # won't be executed when a_batch != None.
-        asserts.assert_explain_func(explain_func=self.explain_func)
+        asserts.assert_explain_func(explain_func=self.explain_func)
\ No newline at end of file
Index: quantus/metrics/robustness/avg_sensitivity.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/quantus/metrics/robustness/avg_sensitivity.py b/quantus/metrics/robustness/avg_sensitivity.py
--- a/quantus/metrics/robustness/avg_sensitivity.py	(revision c2255b793bae21a32b1274275ae60b44cdd94d7b)
+++ b/quantus/metrics/robustness/avg_sensitivity.py	(date 1681078345884)
@@ -5,17 +5,27 @@
 # Quantus is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 # You should have received a copy of the GNU Lesser General Public License along with Quantus. If not, see <https://www.gnu.org/licenses/>.
 # Quantus project URL: <https://github.com/understandable-machine-intelligence-lab/Quantus>.
+from __future__ import annotations
 
+from functools import singledispatchmethod
 from typing import Any, Callable, Dict, List, Optional
+
 import numpy as np
 
+from quantus.functions.norm_func import fro_norm
+from quantus.functions.normalise_func import normalise_by_max
+from quantus.functions.perturb_func import uniform_noise
+from quantus.functions.similarity_func import difference
 from quantus.helpers import asserts
-from quantus.functions import norm_func
 from quantus.helpers import warn
+from quantus.helpers.model.text_classifier import TextClassifier, Tokenizable
 from quantus.helpers.model.model_interface import ModelInterface
-from quantus.functions.normalise_func import normalise_by_max
-from quantus.functions.perturb_func import uniform_noise, perturb_batch
-from quantus.functions.similarity_func import difference
+from quantus.helpers.types import Explanation, ExplainFn
+from quantus.helpers.nlp_utils import (
+    is_plain_text_perturbation,
+    get_scores,
+)
+from quantus.helpers.collection_utils import value_or_default
 from quantus.metrics.base_batched import BatchedPerturbationMetric
 
 
@@ -33,24 +43,28 @@
         feature-based model explanations."  IJCAI (2020): 3016-3022.
     """
 
+    data_domain_applicability: list[
+        str
+    ] = BatchedPerturbationMetric.data_domain_applicability + ["NLP"]
+
     @asserts.attributes_check
     def __init__(
         self,
-        similarity_func: Optional[Callable] = None,
-        norm_numerator: Optional[Callable] = None,
-        norm_denominator: Optional[Callable] = None,
+        similarity_func: Callable | None = None,
+        norm_numerator: Callable | None = None,
+        norm_denominator: Callable | None = None,
         nr_samples: int = 200,
         abs: bool = False,
         normalise: bool = False,
-        normalise_func: Optional[Callable[[np.ndarray], np.ndarray]] = None,
-        normalise_func_kwargs: Optional[Dict[str, Any]] = None,
+        normalise_func: Callable[[np.ndarray], np.ndarray] | None = None,
+        normalise_func_kwargs: dict[str, Any] | None = None,
         perturb_func: Callable = None,
         lower_bound: float = 0.2,
-        upper_bound: Optional[float] = None,
-        perturb_func_kwargs: Optional[Dict[str, Any]] = None,
+        upper_bound: float | None = None,
+        perturb_func_kwargs: dict[str, Any] | None = None,
         return_aggregate: bool = False,
         aggregate_func: Callable = np.mean,
-        default_plot_func: Optional[Callable] = None,
+        default_plot_func: Callable | None = None,
         disable_warnings: bool = False,
         display_progressbar: bool = False,
         return_nan_when_prediction_changes: bool = False,
@@ -101,14 +115,10 @@
         kwargs: optional
             Keyword arguments.
         """
-        if normalise_func is None:
-            normalise_func = normalise_by_max
 
-        if perturb_func is None:
-            perturb_func = uniform_noise
-
-        if perturb_func_kwargs is None:
-            perturb_func_kwargs = {}
+        normalise_func = value_or_default(normalise_func, lambda: normalise_by_max)
+        perturb_func = value_or_default(perturb_func, lambda: uniform_noise)
+        perturb_func_kwargs = value_or_default(perturb_func_kwargs, lambda: {})
         perturb_func_kwargs["lower_bound"] = lower_bound
         perturb_func_kwargs["upper_bound"] = upper_bound
 
@@ -124,24 +134,14 @@
             default_plot_func=default_plot_func,
             display_progressbar=display_progressbar,
             disable_warnings=disable_warnings,
+            nr_samples=nr_samples,
+            return_nan_when_prediction_changes=return_nan_when_prediction_changes,
             **kwargs,
         )
 
-        # Save metric-specific attributes.
-        self.nr_samples = nr_samples
-
-        if similarity_func is None:
-            similarity_func = difference
-        self.similarity_func = similarity_func
-
-        if norm_numerator is None:
-            norm_numerator = norm_func.fro_norm
-        self.norm_numerator = norm_numerator
-
-        if norm_denominator is None:
-            norm_denominator = norm_func.fro_norm
-        self.norm_denominator = norm_denominator
-        self.return_nan_when_prediction_changes = return_nan_when_prediction_changes
+        self.similarity_func = value_or_default(similarity_func, lambda: difference)
+        self.norm_numerator = value_or_default(norm_numerator, lambda: fro_norm)
+        self.norm_denominator = value_or_default(norm_denominator, lambda: fro_norm)
 
         # Asserts and warnings.
         if not self.disable_warnings:
@@ -166,18 +166,19 @@
         model,
         x_batch: np.array,
         y_batch: np.array,
-        a_batch: Optional[np.ndarray] = None,
-        s_batch: Optional[np.ndarray] = None,
-        channel_first: Optional[bool] = None,
-        explain_func: Optional[Callable] = None,
-        explain_func_kwargs: Optional[Dict] = None,
-        model_predict_kwargs: Optional[Dict] = None,
-        softmax: Optional[bool] = False,
-        device: Optional[str] = None,
+        explain_func: ExplainFn,
+        a_batch: np.ndarray | None = None,
+        s_batch: np.ndarray | None = None,
+        channel_first: bool | None = None,
+        explain_func_kwargs: dict | None = None,
+        model_predict_kwargs: dict | None = None,
+        softmax: bool | None = False,
+        device: str | None = None,
         batch_size: int = 64,
-        custom_batch: Optional[Any] = None,
+        custom_batch: Any | None = None,
+        tokenizer: Tokenizable | None = None,
         **kwargs,
-    ) -> List[float]:
+    ) -> np.ndarray | float:
         """
         This implementation represents the main logic of the metric and makes the class object callable.
         It completes instance-wise evaluation of explanations (a_batch) with respect to input data (x_batch),
@@ -265,9 +266,11 @@
             device=device,
             model_predict_kwargs=model_predict_kwargs,
             batch_size=batch_size,
+            tokenizer=tokenizer,
             **kwargs,
         )
 
+    @singledispatchmethod
     def evaluate_batch(
         self,
         model: ModelInterface,
@@ -275,6 +278,7 @@
         y_batch: np.ndarray,
         a_batch: np.ndarray,
         s_batch: np.ndarray,
+        custom_batch=None,
     ) -> np.ndarray:
         """
         Evaluates model and attributes on a single data batch and returns the batched evaluation result.
@@ -302,28 +306,9 @@
 
         for step_id in range(self.nr_samples):
             # Perturb input.
-            x_perturbed = perturb_batch(
-                perturb_func=self.perturb_func,
-                indices=np.tile(np.arange(0, x_batch[0].size), (batch_size, 1)),
-                indexed_axes=np.arange(0, x_batch[0].ndim),
-                arr=x_batch,
-                **self.perturb_func_kwargs,
-            )
-
-            changed_prediction_indices = (
-                np.argwhere(
-                    model.predict(x_batch).argmax(axis=-1)
-                    != model.predict(x_perturbed).argmax(axis=-1)
-                ).reshape(-1)
-                if self.return_nan_when_prediction_changes
-                else []
-            )
-
-            x_input = model.shape_input(
-                x=x_perturbed,
-                shape=x_batch.shape,
-                channel_first=True,
-                batched=True,
+            x_perturbed = self.perturb_batch(x_batch)
+            changed_prediction_indices = self.changed_prediction_indices(
+                model, x_batch, x_perturbed
             )
 
             for x_instance, x_instance_perturbed in zip(x_batch, x_perturbed):
@@ -333,28 +318,11 @@
                 )
 
             # Generate explanation based on perturbed input x.
-            a_perturbed = self.explain_func(
-                model=model.get_model(),
-                inputs=x_input,
-                targets=y_batch,
-                **self.explain_func_kwargs,
-            )
-
-            if self.normalise:
-                a_perturbed = self.normalise_func(
-                    a_perturbed,
-                    **self.normalise_func_kwargs,
-                )
-
-            if self.abs:
-                a_perturbed = np.abs(a_perturbed)
+            a_perturbed = self.explain_batch(model, x_batch, y_batch)
 
             # Measure similarity for each instance separately.
             for instance_id in range(batch_size):
-                if (
-                    self.return_nan_when_prediction_changes
-                    and instance_id in changed_prediction_indices
-                ):
+                if instance_id in changed_prediction_indices:
                     similarities[instance_id, step_id] = np.nan
                     continue
 
@@ -369,14 +337,134 @@
         mean_func = np.mean if self.return_nan_when_prediction_changes else np.nanmean
         return mean_func(similarities, axis=1)
 
+    @evaluate_batch.register
+    def _(
+        self,
+        model: TextClassifier,
+        x_batch: list[str],
+        y_batch: np.ndarray,
+        a_batch,
+        s_batch: np.ndarray = None,
+        custom_batch=None,
+    ) -> np.ndarray:
+        batch_size = len(x_batch)
+        similarities = np.zeros((batch_size, self.nr_samples)) * np.nan
+        is_plain_text = is_plain_text_perturbation(self.perturb_func)
+
+        for step_id in range(self.nr_samples):
+            if is_plain_text:
+                similarities[:, step_id] = self._eval_step_nlp_plain_text(
+                    model, x_batch, y_batch, a_batch, custom_batch[step_id]
+                )
+            else:
+                similarities[:, step_id] = self._eval_step_nlp_embeddings(
+                    model, x_batch, y_batch, a_batch
+                )
+
+        mean_func = np.mean if self.return_nan_when_prediction_changes else np.nanmean
+        return mean_func(similarities, axis=1)
+
+    def _eval_step_nlp_plain_text(
+        self,
+        model: TextClassifier,
+        x_batch: list[str],
+        y_batch: np.ndarray,
+        a_batch: list[Explanation],
+        x_perturbed: list[str],
+    ) -> np.ndarray:
+        batch_size = len(x_batch)
+        similarities = np.zeros(shape=batch_size)
+        changed_prediction_indices = self.changed_prediction_indices(
+            model, x_batch, x_perturbed
+        )
+
+        for x_instance, x_instance_perturbed in zip(x_batch, x_perturbed):
+            warn.warn_perturbation_caused_no_change(
+                x=x_instance,
+                x_perturbed=x_instance_perturbed,
+            )
+        # Generate explanation based on perturbed input x.
+        a_perturbed = self.explain_batch(model, x_perturbed, y_batch)
+        # Get numerical part of explanations.
+        a_batch = get_scores(a_batch)
+        a_perturbed = get_scores(a_perturbed)
+
+        # Get numerical representation of x_batch.
+        x_batch_embeddings, predict_kwargs = model.get_embeddings(x_batch)
+
+        # Measure similarity for each instance separately.
+        for instance_id in range(batch_size):
+            if instance_id in changed_prediction_indices:
+                similarities[instance_id] = np.nan
+                continue
+
+            sensitivities = self.similarity_func(
+                a=np.reshape(a_batch[instance_id], -1),
+                b=np.reshape(a_perturbed[instance_id], -1),
+            )
+            numerator = self.norm_numerator(a=sensitivities)
+            denominator = self.norm_denominator(
+                a=np.reshape(x_batch_embeddings[instance_id], -1)
+            )
+            sensitivities_norm = numerator / denominator
+            similarities[instance_id] = sensitivities_norm
+
+        return similarities
+
+    def _eval_step_nlp_embeddings(
+        self,
+        model: TextClassifier,
+        x_batch: list[str],
+        y_batch: np.ndarray,
+        a_batch: list[Explanation],
+    ) -> np.ndarray:
+        batch_size = len(x_batch)
+        similarities = np.zeros(shape=batch_size)
+
+        x_batch_embeddings, predict_kwargs = model.get_embeddings(x_batch)
+        a_batch = get_scores(a_batch)
+
+        # Perturb input.
+        x_perturbed = self.perturb_batch(x_batch_embeddings)
+        changed_prediction_indices = self.changed_prediction_indices(
+            model, x_batch_embeddings, x_perturbed
+        )
+
+        for x_instance, x_instance_perturbed in zip(x_batch_embeddings, x_perturbed):
+            warn.warn_perturbation_caused_no_change(
+                x=x_instance,
+                x_perturbed=x_instance_perturbed,
+            )
+        # Generate explanation based on perturbed input x.
+        a_perturbed = self.explain_batch(model, x_perturbed, y_batch, **predict_kwargs)
+
+        # Measure similarity for each instance separately.
+        for instance_id in range(batch_size):
+            if instance_id in changed_prediction_indices:
+                similarities[instance_id] = np.nan
+                continue
+
+            sensitivities = self.similarity_func(
+                a=np.reshape(a_batch[instance_id], -1),
+                b=np.reshape(a_perturbed[instance_id], -1),
+            )
+            numerator = self.norm_numerator(sensitivities)
+            denominator = self.norm_denominator(
+                np.reshape(x_batch_embeddings[instance_id], -1)
+            )
+            sensitivities_norm = numerator / denominator
+            similarities[instance_id] = sensitivities_norm
+
+        return similarities
+
     def custom_preprocess(
         self,
         model: ModelInterface,
         x_batch: np.ndarray,
-        y_batch: Optional[np.ndarray],
-        a_batch: Optional[np.ndarray],
+        y_batch: np.ndarray | None,
+        a_batch: np.ndarray | None,
         s_batch: np.ndarray,
-        custom_batch: Optional[np.ndarray],
+        custom_batch: np.ndarray | None,
     ) -> None:
         """
         Implementation of custom_preprocess_batch.
Index: quantus/metrics/robustness/local_lipschitz_estimate.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/quantus/metrics/robustness/local_lipschitz_estimate.py b/quantus/metrics/robustness/local_lipschitz_estimate.py
--- a/quantus/metrics/robustness/local_lipschitz_estimate.py	(revision c2255b793bae21a32b1274275ae60b44cdd94d7b)
+++ b/quantus/metrics/robustness/local_lipschitz_estimate.py	(date 1681078308177)
@@ -282,6 +282,7 @@
         y_batch: np.ndarray,
         a_batch: np.ndarray,
         s_batch: np.ndarray,
+        custom_batch=None,
     ) -> np.ndarray:
         """
         Evaluates model and attributes on a single data batch and returns the batched evaluation result.
@@ -298,6 +299,8 @@
             The explanation to be evaluated on a batch-basis.
         s_batch: np.ndarray
             The segmentation to be evaluated on a batch-basis.
+        custom_batch:
+            Unused.
 
         Returns
         -------
Index: quantus/metrics/robustness/max_sensitivity.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/quantus/metrics/robustness/max_sensitivity.py b/quantus/metrics/robustness/max_sensitivity.py
--- a/quantus/metrics/robustness/max_sensitivity.py	(revision c2255b793bae21a32b1274275ae60b44cdd94d7b)
+++ b/quantus/metrics/robustness/max_sensitivity.py	(date 1681078345884)
@@ -5,19 +5,40 @@
 # Quantus is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 # You should have received a copy of the GNU Lesser General Public License along with Quantus. If not, see <https://www.gnu.org/licenses/>.
 # Quantus project URL: <https://github.com/understandable-machine-intelligence-lab/Quantus>.
+from __future__ import annotations
 
-from typing import Any, Callable, Dict, List, Optional
+from functools import singledispatchmethod
+from typing import Any, Callable, List, Optional, Dict, TYPE_CHECKING
+
 import numpy as np
 
+from quantus.functions.norm_func import fro_norm
+from quantus.functions.normalise_func import normalise_by_max
+from quantus.functions.perturb_func import uniform_noise
+from quantus.functions.similarity_func import difference
 from quantus.helpers import asserts
-from quantus.functions import norm_func
 from quantus.helpers import warn
 from quantus.helpers.model.model_interface import ModelInterface
-from quantus.functions.normalise_func import normalise_by_max
-from quantus.functions.perturb_func import uniform_noise, perturb_batch
-from quantus.functions.similarity_func import difference
+from quantus.helpers.model.text_classifier import TextClassifier, Tokenizable
+from quantus.helpers.types import (
+    PerturbFn,
+    ExplainFn,
+    SimilarityFn,
+    NormaliseFn,
+    NormFn,
+    Explanation,
+)
+from quantus.helpers.collection_utils import value_or_default
+from quantus.helpers.nlp_utils import (
+    is_plain_text_perturbation,
+    get_scores,
+)
 from quantus.metrics.base_batched import BatchedPerturbationMetric
 
+if TYPE_CHECKING:
+    import tensorflow as tf
+    import torch
+
 
 class MaxSensitivity(BatchedPerturbationMetric):
     """
@@ -33,21 +54,25 @@
         feature-based model explanations."  IJCAI (2020): 3016-3022.
     """
 
+    data_domain_applicability: List[
+        str
+    ] = BatchedPerturbationMetric.data_domain_applicability + ["NLP"]
+
     @asserts.attributes_check
     def __init__(
         self,
-        similarity_func: Optional[Callable] = None,
-        norm_numerator: Optional[Callable] = None,
-        norm_denominator: Optional[Callable] = None,
+        similarity_func: Optional[SimilarityFn] = None,
+        norm_numerator: Optional[NormFn] = None,
+        norm_denominator: Optional[NormFn] = None,
         nr_samples: int = 200,
         abs: bool = False,
         normalise: bool = False,
-        normalise_func: Optional[Callable[[np.ndarray], np.ndarray]] = None,
-        normalise_func_kwargs: Optional[Dict[str, Any]] = None,
-        perturb_func: Callable = None,
+        normalise_func: Optional[NormaliseFn] = None,
+        normalise_func_kwargs: Optional[Dict[str, ...]] = None,
+        perturb_func: PerturbFn = None,
         lower_bound: float = 0.2,
         upper_bound: Optional[float] = None,
-        perturb_func_kwargs: Optional[Dict[str, Any]] = None,
+        perturb_func_kwargs: Optional[Dict[str, ...]] = None,
         return_aggregate: bool = False,
         aggregate_func: Callable = np.mean,
         default_plot_func: Optional[Callable] = None,
@@ -101,14 +126,9 @@
         kwargs: optional
             Keyword arguments.
         """
-        if normalise_func is None:
-            normalise_func = normalise_by_max
-
-        if perturb_func is None:
-            perturb_func = uniform_noise
-
-        if perturb_func_kwargs is None:
-            perturb_func_kwargs = {}
+        normalise_func = value_or_default(normalise_func, lambda: normalise_by_max)
+        perturb_func = value_or_default(perturb_func, lambda: uniform_noise)
+        perturb_func_kwargs = value_or_default(perturb_func_kwargs, lambda: {})
         perturb_func_kwargs["lower_bound"] = lower_bound
         perturb_func_kwargs["upper_bound"] = upper_bound
 
@@ -124,24 +144,14 @@
             default_plot_func=default_plot_func,
             display_progressbar=display_progressbar,
             disable_warnings=disable_warnings,
+            nr_samples=nr_samples,
+            return_nan_when_prediction_changes=return_nan_when_prediction_changes,
             **kwargs,
         )
 
-        # Save metric-specific attributes.
-        self.nr_samples = nr_samples
-
-        if similarity_func is None:
-            similarity_func = difference
-        self.similarity_func = similarity_func
-
-        if norm_numerator is None:
-            norm_numerator = norm_func.fro_norm
-        self.norm_numerator = norm_numerator
-
-        if norm_denominator is None:
-            norm_denominator = norm_func.fro_norm
-        self.norm_denominator = norm_denominator
-        self.return_nan_when_prediction_changes = return_nan_when_prediction_changes
+        self.similarity_func = value_or_default(similarity_func, lambda: difference)
+        self.norm_numerator = value_or_default(norm_numerator, lambda: fro_norm)
+        self.norm_denominator = value_or_default(norm_denominator, lambda: fro_norm)
 
         # Asserts and warnings.
         if not self.disable_warnings:
@@ -163,21 +173,22 @@
 
     def __call__(
         self,
-        model,
-        x_batch: np.array,
+        model: torch.nn.Module | tf.keras.Model | ModelInterface | TextClassifier,
+        x_batch: np.array | List[str],
         y_batch: np.array,
-        a_batch: Optional[np.ndarray] = None,
+        a_batch: Optional[np.ndarray | List[Explanation]] = None,
         s_batch: Optional[np.ndarray] = None,
         channel_first: Optional[bool] = None,
-        explain_func: Optional[Callable] = None,
-        explain_func_kwargs: Optional[Dict] = None,
-        model_predict_kwargs: Optional[Dict] = None,
+        explain_func: ExplainFn = None,
+        explain_func_kwargs: Optional[Dict[str, ...]] = None,
+        model_predict_kwargs: Optional[Dict[str, ...]] = None,
         softmax: Optional[bool] = False,
-        device: Optional[str] = None,
+        device: Optional[str | torch.device] = None,
         batch_size: int = 64,
         custom_batch: Optional[Any] = None,
+        tokenizer: Optional[Tokenizable] = None,
         **kwargs,
-    ) -> List[float]:
+    ) -> np.ndarray | float:
         """
         This implementation represents the main logic of the metric and makes the class object callable.
         It completes instance-wise evaluation of explanations (a_batch) with respect to input data (x_batch),
@@ -251,6 +262,7 @@
             >> metric = Metric(abs=True, normalise=False)
             >> scores = metric(model=model, x_batch=x_batch, y_batch=y_batch, a_batch=a_batch_saliency}
         """
+
         return super().__call__(
             model=model,
             x_batch=x_batch,
@@ -265,9 +277,11 @@
             device=device,
             model_predict_kwargs=model_predict_kwargs,
             batch_size=batch_size,
+            tokenizer=tokenizer,
             **kwargs,
         )
 
+    @singledispatchmethod
     def evaluate_batch(
         self,
         model: ModelInterface,
@@ -275,6 +289,7 @@
         y_batch: np.ndarray,
         a_batch: np.ndarray,
         s_batch: np.ndarray,
+        custom_batch=None,
     ) -> np.ndarray:
         """
         Evaluates model and attributes on a single data batch and returns the batched evaluation result.
@@ -291,6 +306,9 @@
             The explanation to be evaluated on an instance-basis.
         s_batch: np.ndarray
             The segmentation to be evaluated on an instance-basis.
+        custom_batch:
+            Used to pass padded perturbed inputs for plain-text perturbation for NLP.
+
 
         Returns
         -------
@@ -302,28 +320,9 @@
 
         for step_id in range(self.nr_samples):
             # Perturb input.
-            x_perturbed = perturb_batch(
-                perturb_func=self.perturb_func,
-                indices=np.tile(np.arange(0, x_batch[0].size), (batch_size, 1)),
-                indexed_axes=np.arange(0, x_batch[0].ndim),
-                arr=x_batch,
-                **self.perturb_func_kwargs,
-            )
-
-            changed_prediction_indices = (
-                np.argwhere(
-                    model.predict(x_batch).argmax(axis=-1)
-                    != model.predict(x_perturbed).argmax(axis=-1)
-                ).reshape(-1)
-                if self.return_nan_when_prediction_changes
-                else []
-            )
-
-            x_input = model.shape_input(
-                x=x_perturbed,
-                shape=x_batch.shape,
-                channel_first=True,
-                batched=True,
+            x_perturbed = self.perturb_batch(x_batch)
+            changed_prediction_indices = self.changed_prediction_indices(
+                model, x_batch, x_perturbed
             )
 
             for x_instance, x_instance_perturbed in zip(x_batch, x_perturbed):
@@ -331,30 +330,12 @@
                     x=x_instance,
                     x_perturbed=x_instance_perturbed,
                 )
-
             # Generate explanation based on perturbed input x.
-            a_perturbed = self.explain_func(
-                model=model.get_model(),
-                inputs=x_input,
-                targets=y_batch,
-                **self.explain_func_kwargs,
-            )
-
-            if self.normalise:
-                a_perturbed = self.normalise_func(
-                    a_perturbed,
-                    **self.normalise_func_kwargs,
-                )
-
-            if self.abs:
-                a_perturbed = np.abs(a_perturbed)
+            a_perturbed = self.explain_batch(model, x_perturbed, y_batch)
 
             # Measure similarity for each instance separately.
             for instance_id in range(batch_size):
-                if (
-                    self.return_nan_when_prediction_changes
-                    and instance_id in changed_prediction_indices
-                ):
+                if instance_id in changed_prediction_indices:
                     similarities[instance_id, step_id] = np.nan
                     continue
 
@@ -370,37 +351,122 @@
         max_func = np.max if self.return_nan_when_prediction_changes else np.nanmax
         return max_func(similarities, axis=1)
 
-    def custom_preprocess(
+    @evaluate_batch.register
+    def _(
+        self,
+        model: TextClassifier,
+        x_batch: List[str],
+        y_batch: np.ndarray,
+        a_batch: List[Explanation],
+        s_batch: np.ndarray = None,
+        custom_batch=None,
+    ) -> np.ndarray:
+        batch_size = len(x_batch)
+        similarities = np.zeros((batch_size, self.nr_samples)) * np.nan
+        is_plain_text = is_plain_text_perturbation(self.perturb_func)
+
+        for step_id in range(self.nr_samples):
+            if is_plain_text:
+                similarities[:, step_id] = self._eval_step_nlp_plain_text(
+                    model, x_batch, y_batch, a_batch, custom_batch[step_id]
+                )
+            else:
+                similarities[:, step_id] = self._eval_step_nlp_embeddings(
+                    model, x_batch, y_batch, a_batch
+                )
+
+        max_func = np.max if self.return_nan_when_prediction_changes else np.nanmax
+        return max_func(similarities, axis=1)
+
+    def _eval_step_nlp_plain_text(
+        self,
+        model: TextClassifier,
+        x_batch: List[str],
+        y_batch: np.ndarray,
+        a_batch: List[Explanation],
+        x_perturbed: List[str],
+    ) -> np.ndarray:
+        batch_size = len(x_batch)
+        similarities = np.zeros(shape=batch_size)
+        changed_prediction_indices = self.changed_prediction_indices(
+            model, x_batch, x_perturbed
+        )
+
+        for x_instance, x_instance_perturbed in zip(x_batch, x_perturbed):
+            warn.warn_perturbation_caused_no_change(
+                x=x_instance,
+                x_perturbed=x_instance_perturbed,
+            )
+        # Generate explanation based on perturbed input x.
+        a_perturbed = self.explain_batch(model, x_perturbed, y_batch)
+        # Get numerical part of explanations.
+        a_batch = get_scores(a_batch)
+        a_perturbed = get_scores(a_perturbed)
+
+        # Get numerical representation of x_batch.
+        x_batch_embeddings, _ = model.get_embeddings(x_batch)
+
+        # Measure similarity for each instance separately.
+        for instance_id in range(batch_size):
+            if instance_id in changed_prediction_indices:
+                similarities[instance_id] = np.nan
+                continue
+
+            sensitivities = self.similarity_func(
+                a=np.reshape(a_batch[instance_id], -1),
+                b=np.reshape(a_perturbed[instance_id], -1),
+            )
+            numerator = self.norm_numerator(a=sensitivities)
+            denominator = self.norm_denominator(
+                a=np.reshape(x_batch_embeddings[instance_id], -1)
+            )
+            sensitivities_norm = numerator / denominator
+            similarities[instance_id] = sensitivities_norm
+
+        return similarities
+
+    def _eval_step_nlp_embeddings(
         self,
-        model: ModelInterface,
-        x_batch: np.ndarray,
-        y_batch: Optional[np.ndarray],
-        a_batch: Optional[np.ndarray],
-        s_batch: np.ndarray,
-        custom_batch: Optional[np.ndarray],
-    ) -> None:
-        """
-        Implementation of custom_preprocess_batch.
+        model: TextClassifier,
+        x_batch: List[str],
+        y_batch: np.ndarray,
+        a_batch: List[Explanation],
+    ) -> np.ndarray:
+        batch_size = len(x_batch)
+        similarities = np.zeros(shape=batch_size)
+
+        x_batch_embeddings, predict_kwargs = model.get_embeddings(x_batch)
+        a_batch = get_scores(a_batch)
+
+        # Perturb input.
+        x_perturbed = self.perturb_batch(x_batch_embeddings)
+        changed_prediction_indices = self.changed_prediction_indices(
+            model, x_batch, x_perturbed, **predict_kwargs
+        )
+
+        for x_instance, x_instance_perturbed in zip(x_batch_embeddings, x_perturbed):
+            warn.warn_perturbation_caused_no_change(
+                x=x_instance,
+                x_perturbed=x_instance_perturbed,
+            )
+        # Generate explanation based on perturbed input x.
+        a_perturbed = self.explain_batch(model, x_perturbed, y_batch)
 
-        Parameters
-        ----------
-        model: torch.nn.Module, tf.keras.Model
-            A torch or tensorflow model e.g., torchvision.models that is subject to explanation.
-        x_batch: np.ndarray
-            A np.ndarray which contains the input data that are explained.
-        y_batch: np.ndarray
-            A np.ndarray which contains the output labels that are explained.
-        a_batch: np.ndarray, optional
-            A np.ndarray which contains pre-computed attributions i.e., explanations.
-        s_batch: np.ndarray, optional
-            A np.ndarray which contains segmentation masks that matches the input.
-        custom_batch: any
-            Gives flexibility ot the user to use for evaluation, can hold any variable.
+        # Measure similarity for each instance separately.
+        for instance_id in range(batch_size):
+            if instance_id in changed_prediction_indices:
+                similarities[instance_id] = np.nan
+                continue
 
-        Returns
-        -------
-        None
-        """
-        # Additional explain_func assert, as the one in prepare() won't be
-        # executed when a_batch != None.
-        asserts.assert_explain_func(explain_func=self.explain_func)
+            sensitivities = self.similarity_func(
+                a=np.reshape(a_batch[instance_id], -1),
+                b=np.reshape(a_perturbed[instance_id], -1),
+            )
+            numerator = self.norm_numerator(sensitivities)
+            denominator = self.norm_denominator(
+                np.reshape(x_batch_embeddings[instance_id], -1)
+            )
+            sensitivities_norm = numerator / denominator
+            similarities[instance_id] = sensitivities_norm
+
+        return similarities
Index: quantus/metrics/robustness/relative_input_stability.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/quantus/metrics/robustness/relative_input_stability.py b/quantus/metrics/robustness/relative_input_stability.py
--- a/quantus/metrics/robustness/relative_input_stability.py	(revision c2255b793bae21a32b1274275ae60b44cdd94d7b)
+++ b/quantus/metrics/robustness/relative_input_stability.py	(date 1681078345885)
@@ -14,6 +14,7 @@
     import tensorflow as tf
     import torch
 
+from functools import singledispatchmethod
 
 from quantus.helpers.model.model_interface import ModelInterface
 from quantus.metrics.base_batched import BatchedPerturbationMetric
@@ -21,7 +22,12 @@
 from quantus.helpers.asserts import attributes_check
 from quantus.functions.normalise_func import normalise_by_average_second_moment_estimate
 from quantus.functions.perturb_func import uniform_noise, perturb_batch
-from quantus.helpers.utils import expand_attribution_channel
+from quantus.functions.norm_func import l2_norm
+
+from quantus.helpers.model.text_classifier import TextClassifier
+from quantus.helpers.types import Explanation
+from quantus.helpers.collection_utils import value_or_default
+from quantus.helpers.nlp_utils import is_plain_text_perturbation, get_scores
 
 
 class RelativeInputStability(BatchedPerturbationMetric):
@@ -34,6 +40,8 @@
         1) Chirag Agarwal, et. al., 2022. "Rethinking stability for attribution based explanations.", https://arxiv.org/abs/2203.06877
     """
 
+    data_domain_applicability: List[str] = BatchedPerturbationMetric.data_domain_applicability + ["NLP"]
+
     @attributes_check
     def __init__(
         self,
@@ -48,7 +56,6 @@
         aggregate_func: Optional[Callable[[np.ndarray], np.float]] = np.mean,
         disable_warnings: bool = False,
         display_progressbar: bool = False,
-        eps_min: float = 1e-6,
         default_plot_func: Optional[Callable] = None,
         return_nan_when_prediction_changes: bool = True,
         **kwargs,
@@ -80,20 +87,13 @@
             Indicates whether a tqdm-progress-bar is printed, default=False.
         default_plot_func: callable
             Callable that plots the metrics result.
-        eps_min: float
-            Small constant to prevent division by 0 in relative_stability_objective, default 1e-6.
         return_nan_when_prediction_changes: boolean
             When set to true, the metric will be evaluated to NaN if the prediction changes after the perturbation is applied, default=True.
         """
 
-        if normalise_func is None:
-            normalise_func = normalise_by_average_second_moment_estimate
-
-        if perturb_func is None:
-            perturb_func = uniform_noise
-
-        if perturb_func_kwargs is None:
-            perturb_func_kwargs = {"upper_bound": 0.2}
+        normalise_func = value_or_default(normalise_func, lambda: normalise_by_average_second_moment_estimate)
+        perturb_func = value_or_default(perturb_func, lambda: uniform_noise)
+        perturb_func_kwargs = value_or_default(perturb_func_kwargs, lambda: {"upper_bound": 0.2})
 
         super().__init__(
             abs=abs,
@@ -107,11 +107,10 @@
             default_plot_func=default_plot_func,
             display_progressbar=display_progressbar,
             disable_warnings=disable_warnings,
+            nr_samples=nr_samples,
+            return_nan_when_prediction_changes=return_nan_when_prediction_changes,
             **kwargs,
         )
-        self._nr_samples = nr_samples
-        self._eps_min = eps_min
-        self._return_nan_when_prediction_changes = return_nan_when_prediction_changes
 
         if not self.disable_warnings:
             warn_parameterisation(
@@ -136,8 +135,9 @@
         softmax: bool = False,
         channel_first: bool = True,
         batch_size: int = 64,
+        tokenizer=None,
         **kwargs,
-    ) -> List[float]:
+    ) -> np.ndarray | float:
         """
         For each image `x`:
          - Generate `num_perturbations` perturbed `xs` in the neighborhood of `x`.
@@ -191,85 +191,11 @@
             model_predict_kwargs=model_predict_kwargs,
             s_batch=None,
             batch_size=batch_size,
+            tokenizer=tokenizer,
+            **kwargs
         )
 
-    def relative_input_stability_objective(
-        self, x: np.ndarray, xs: np.ndarray, e_x: np.ndarray, e_xs: np.ndarray
-    ) -> np.ndarray:
-        """
-        Computes relative input stabilities maximization objective
-        as defined here :ref:`https://arxiv.org/pdf/2203.06877.pdf` by the authors.
-
-        Parameters
-        ----------
-        x: np.ndarray
-            Batch of images.
-        xs: np.ndarray
-            Batch of perturbed images.
-        e_x: np.ndarray
-            Explanations for x.
-        e_xs: np.ndarray
-            Explanations for xs.
-
-        Returns
-        -------
-        ris_obj: np.ndarray
-            RIS maximization objective.
-        """
-        num_dim = x.ndim
-        if num_dim == 4:
-            norm_function = lambda arr: np.linalg.norm(
-                np.linalg.norm(arr, axis=(-1, -2)), axis=-1
-            )  # noqa
-        elif num_dim == 3:
-            norm_function = lambda arr: np.linalg.norm(arr, axis=(-1, -2))  # noqa
-        elif num_dim == 2:
-            norm_function = lambda arr: np.linalg.norm(arr, axis=-1)
-        else:
-            raise ValueError(
-                "Relative Input Stability only supports 4D, 3D and 2D inputs (batch dimension inclusive)."
-            )
-
-        # fmt: off
-        nominator = (e_x - e_xs) / (e_x + (e_x == 0) * self._eps_min)  # prevent division by 0
-        nominator = norm_function(nominator)
-        # fmt: on
-
-        denominator = x - xs
-        denominator /= x + (x == 0) * self._eps_min
-        # fmt: off
-        denominator = norm_function(denominator)
-        # fmt: on
-        denominator += (denominator == 0) * self._eps_min
-        return nominator / denominator
-
-    def generate_normalised_explanations_batch(
-        self, x_batch: np.ndarray, y_batch: np.ndarray, explain_func: Callable
-    ) -> np.ndarray:
-        """
-        Generate explanation, apply normalization and take absolute values if configured so during metric instantiation.
-
-        Parameters
-        ----------
-        x_batch: np.ndarray
-            4D tensor representing batch of input images.
-        y_batch: np.ndarray
-             1D tensor, representing predicted labels for the x_batch.
-        explain_func: callable
-            Function to generate explanations, takes only inputs,targets kwargs.
-
-        Returns
-        -------
-        a_batch: np.ndarray
-            A batch of explanations.
-        """
-        a_batch = explain_func(inputs=x_batch, targets=y_batch)
-        if self.normalise:
-            a_batch = self.normalise_func(a_batch, **self.normalise_func_kwargs)
-        if self.abs:
-            a_batch = np.abs(a_batch)
-        return expand_attribution_channel(a_batch, x_batch)
-
+    @singledispatchmethod
     def evaluate_batch(
         self,
         model: ModelInterface,
@@ -301,49 +227,144 @@
             The batched evaluation results.
 
         """
-
-        batch_size = x_batch.shape[0]
-        _explain_func = partial(
-            self.explain_func, model=model.get_model(), **self.explain_func_kwargs
-        )
-
         # Prepare output array.
-        ris_batch = np.zeros(shape=[self._nr_samples, x_batch.shape[0]])
-        for index in range(self._nr_samples):
+        ris_batch = np.zeros(shape=[self.nr_samples, x_batch.shape[0]])
+        for index in range(self.nr_samples):
             # Perturb input.
-            x_perturbed = perturb_batch(
-                perturb_func=self.perturb_func,
-                indices=np.tile(np.arange(0, x_batch[0].size), (batch_size, 1)),
-                indexed_axes=np.arange(0, x_batch[0].ndim),
-                arr=x_batch,
-                **self.perturb_func_kwargs,
-            )
+            x_perturbed = self.perturb_batch(x_batch)
             # Generate explanations for perturbed input.
-            a_batch_perturbed = self.generate_normalised_explanations_batch(
-                x_perturbed, y_batch, _explain_func
-            )
+            a_batch_perturbed = self.explain_batch(model, x_perturbed, y_batch)
             # Compute maximization's objective.
             ris = self.relative_input_stability_objective(
                 x_batch, x_perturbed, a_batch, a_batch_perturbed
             )
             ris_batch[index] = ris
-            # We're done with this sample if `return_nan_when_prediction_changes`==False.
-            if not self._return_nan_when_prediction_changes:
-                continue
-
             # If perturbed input caused change in prediction, then it's RIS=nan.
-            predicted_y = model.predict(x_batch).argmax(axis=-1)
-            predicted_y_perturbed = model.predict(x_perturbed).argmax(axis=-1)
-            changed_prediction_indices = np.argwhere(
-                predicted_y != predicted_y_perturbed
-            ).reshape(-1)
-
+            changed_prediction_indices = self.changed_prediction_indices(
+                model, x_batch, x_perturbed
+            )
             if len(changed_prediction_indices) == 0:
                 continue
             ris_batch[index, changed_prediction_indices] = np.nan
 
         # Compute RIS.
         result = np.max(ris_batch, axis=0)
-        if self.return_aggregate:
-            result = [self.aggregate_func(result)]
         return result
+
+    @evaluate_batch.register
+    def _(
+        self,
+        model: TextClassifier,
+        x_batch: List[str],
+        y_batch: np.ndarray,
+        a_batch: List[Explanation],
+        s_batch=None,
+        custom_batch=None,
+    ) -> np.ndarray:
+        ris_batch = np.zeros(shape=[self.nr_samples, len(x_batch)])
+        for index in range(self.nr_samples):
+            if is_plain_text_perturbation(self.perturb_func):
+                ris_batch[index] = self._eval_step_nlp_plain_text(
+                    model, x_batch, y_batch, a_batch, custom_batch[index]
+                )
+            else:
+                ris_batch[index] = self._eval_step_nlp_embeddings(
+                    model, x_batch, y_batch, a_batch
+                )
+
+        # Compute RIS.
+        result = np.max(ris_batch, axis=0)
+        return result
+
+    def _eval_step_nlp_plain_text(
+        self,
+        model: TextClassifier,
+        x_batch: List[str],
+        y_batch: np.ndarray,
+        a_batch: List[Explanation],
+        x_perturbed: List[str],
+    ) -> np.ndarray:
+        # Generate explanations for perturbed input.
+        a_batch_perturbed = self.explain_batch(model, x_perturbed, y_batch)
+
+        x_batch_embeddings, predict_kwargs = model.get_embeddings(x_batch)
+        x_batch_perturbed_embeddings, _ = model.get_embeddings(x_perturbed)
+        # Compute maximization's objective.
+        ris_batch = self.relative_input_stability_objective(
+            x_batch_embeddings,
+            x_batch_perturbed_embeddings,
+            get_scores(a_batch),
+            get_scores(a_batch_perturbed),
+        )
+        # If perturbed input caused change in prediction, then it's RIS=nan.
+        changed_prediction_indices = self.changed_prediction_indices(
+            model, x_batch, x_perturbed
+        )
+        if len(changed_prediction_indices) != 0:
+            ris_batch[changed_prediction_indices] = np.nan
+
+        return ris_batch
+
+    def _eval_step_nlp_embeddings(
+        self,
+        model: TextClassifier,
+        x_batch: List[str],
+        y_batch: np.ndarray,
+        a_batch: List[Explanation],
+    ) -> np.ndarray:
+        x_embeddings, predict_kwargs = model.get_embeddings(x_batch)
+        x_perturbed = self.perturb_batch(x_embeddings)
+
+        # Generate explanations for perturbed input.
+        a_batch_perturbed = self.explain_batch(model, x_perturbed, y_batch)
+        # Compute maximization's objective.
+        ris_batch = self.relative_input_stability_objective(
+            x_embeddings, x_perturbed, get_scores(a_batch), a_batch_perturbed
+        )
+        # If perturbed input caused change in prediction, then it's RIS=nan.
+        changed_prediction_indices = self.changed_prediction_indices(
+            model, x_batch, x_perturbed
+        )
+        if len(changed_prediction_indices) != 0:
+            ris_batch[changed_prediction_indices] = np.nan
+
+        return ris_batch
+
+    @staticmethod
+    def relative_input_stability_objective(
+        x: np.ndarray,
+        xs: np.ndarray,
+        e_x: np.ndarray,
+        e_xs: np.ndarray,
+    ) -> np.ndarray:
+        """
+        Computes relative input stability's maximization objective
+         as defined here :ref:`https://arxiv.org/pdf/2203.06877.pdf` by the authors.
+        Parameters
+        ----------
+        x: np.ndarray
+            Batch of images.
+        xs: np.ndarray
+            Batch of perturbed images.
+        e_x: np.ndarray
+            Explanations for x.
+        e_xs: np.ndarray
+            Explanations for xs.
+
+        Returns
+        -------
+        ris_obj: np.ndarray
+            RIS maximization objective.
+        """
+
+        # prevent division by 0
+        eps_min = np.finfo(np.float32).eps
+
+        nominator = (e_x - e_xs) / (e_x + eps_min)
+        nominator = l2_norm(nominator)
+
+        denominator = x - xs
+        denominator /= x + eps_min
+        denominator = l2_norm(denominator) + eps_min
+
+        return nominator / denominator
\ No newline at end of file
Index: quantus/metrics/robustness/relative_output_stability.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/quantus/metrics/robustness/relative_output_stability.py b/quantus/metrics/robustness/relative_output_stability.py
--- a/quantus/metrics/robustness/relative_output_stability.py	(revision c2255b793bae21a32b1274275ae60b44cdd94d7b)
+++ b/quantus/metrics/robustness/relative_output_stability.py	(date 1681078345885)
@@ -6,21 +6,31 @@
 
 from __future__ import annotations
 
+from functools import partial
 from typing import TYPE_CHECKING, Optional, Callable, Dict, List
+
 import numpy as np
-from functools import partial
 
 if TYPE_CHECKING:
     import tensorflow as tf
     import torch
 
+
+from functools import singledispatchmethod
+
 from quantus.helpers.model.model_interface import ModelInterface
 from quantus.metrics.base_batched import BatchedPerturbationMetric
 from quantus.helpers.warn import warn_parameterisation
 from quantus.helpers.asserts import attributes_check
 from quantus.functions.normalise_func import normalise_by_average_second_moment_estimate
-from quantus.functions.perturb_func import uniform_noise, perturb_batch
-from quantus.helpers.utils import expand_attribution_channel
+from quantus.functions.perturb_func import uniform_noise
+
+from quantus.helpers.utils import get_logits_for_labels
+from quantus.helpers.collection_utils import value_or_default, safe_as_array
+from quantus.helpers.nlp_utils import is_plain_text_perturbation, get_scores
+from quantus.functions.norm_func import l2_norm
+from quantus.helpers.model.text_classifier import TextClassifier
+from quantus.helpers.types import Explanation
 
 
 class RelativeOutputStability(BatchedPerturbationMetric):
@@ -37,6 +47,10 @@
         1) Chirag Agarwal, et. al., 2022. "Rethinking stability for attribution based explanations.", https://arxiv.org/pdf/2203.06877.pdf
     """
 
+    data_domain_applicability: List[
+        str
+    ] = BatchedPerturbationMetric.data_domain_applicability + ["NLP"]
+
     @attributes_check
     def __init__(
         self,
@@ -51,7 +65,6 @@
         aggregate_func: Optional[Callable[[np.ndarray], np.float]] = np.mean,
         disable_warnings: bool = False,
         display_progressbar: bool = False,
-        eps_min: float = 1e-6,
         default_plot_func: Optional[Callable] = None,
         return_nan_when_prediction_changes: bool = True,
         **kwargs,
@@ -83,20 +96,17 @@
             Indicates whether a tqdm-progress-bar is printed, default=False.
         default_plot_func: callable
             Callable that plots the metrics result.
-        eps_min: float
-            Small constant to prevent division by 0 in relative_stability_objective, default 1e-6.
         return_nan_when_prediction_changes: boolean
             When set to true, the metric will be evaluated to NaN if the prediction changes after the perturbation is applied, default=True.
         """
 
-        if normalise_func is None:
-            normalise_func = normalise_by_average_second_moment_estimate
-
-        if perturb_func is None:
-            perturb_func = uniform_noise
-
-        if perturb_func_kwargs is None:
-            perturb_func_kwargs = {"upper_bound": 0.2}
+        normalise_func = value_or_default(
+            normalise_func, lambda: normalise_by_average_second_moment_estimate
+        )
+        perturb_func = value_or_default(perturb_func, lambda: uniform_noise)
+        perturb_func_kwargs = value_or_default(
+            perturb_func_kwargs, lambda: {"upper_bound": 0.2}
+        )
 
         super().__init__(
             abs=abs,
@@ -110,11 +120,10 @@
             default_plot_func=default_plot_func,
             display_progressbar=display_progressbar,
             disable_warnings=disable_warnings,
+            nr_samples=nr_samples,
+            return_nan_when_prediction_changes=return_nan_when_prediction_changes,
             **kwargs,
         )
-        self._nr_samples = nr_samples
-        self._eps_min = eps_min
-        self._return_nan_when_prediction_changes = return_nan_when_prediction_changes
 
         if not self.disable_warnings:
             warn_parameterisation(
@@ -139,8 +148,9 @@
         softmax: bool = False,
         channel_first: bool = True,
         batch_size: int = 64,
+        tokenizer=None,
         **kwargs,
-    ) -> List[float]:
+    ) -> np.ndarray | float:
         """
         For each image `x`:
          - Generate `num_perturbations` perturbed `xs` in the neighborhood of `x`.
@@ -197,95 +207,19 @@
             model_predict_kwargs=model_predict_kwargs,
             s_batch=None,
             batch_size=batch_size,
+            tokenizer=tokenizer,
+            **kwargs,
         )
-
-    def relative_output_stability_objective(
-        self,
-        h_x: np.ndarray,
-        h_xs: np.ndarray,
-        e_x: np.ndarray,
-        e_xs: np.ndarray,
-    ) -> np.ndarray:
-        """
-        Computes relative output stabilities maximization objective
-        as defined here :ref:`https://arxiv.org/pdf/2203.06877.pdf` by the authors.
-
-        Parameters
-        ----------
-        h_x: np.ndarray
-            Output logits for x_batch.
-        h_xs: np.ndarray
-            Output logits for xs_batch.
-        e_x: np.ndarray
-            Explanations for x.
-        e_xs: np.ndarray
-            Explanations for xs.
-
-        Returns
-        -------
-        ros_obj: np.ndarray
-            ROS maximization objective.
-        """
-
-        num_dim = e_x.ndim
-        if num_dim == 4:
-            norm_function = lambda arr: np.linalg.norm(
-                np.linalg.norm(arr, axis=(-1, -2)), axis=-1
-            )  # noqa
-        elif num_dim == 3:
-            norm_function = lambda arr: np.linalg.norm(arr, axis=(-1, -2))  # noqa
-        elif num_dim == 2:
-            norm_function = lambda arr: np.linalg.norm(arr, axis=-1)
-        else:
-            raise ValueError(
-                "Relative Output Stability only supports 4D, 3D and 2D inputs (batch dimension inclusive)."
-            )
 
-        # fmt: off
-        nominator = (e_x - e_xs) / (e_x + (e_x == 0) * self._eps_min)  # prevent division by 0
-        nominator = norm_function(nominator)
-        # fmt: on
-
-        denominator = h_x - h_xs
-        denominator = np.linalg.norm(denominator, axis=-1)
-        denominator += (denominator == 0) * self._eps_min  # prevent division by 0
-        return nominator / denominator
-
-    def generate_normalised_explanations_batch(
-        self, x_batch: np.ndarray, y_batch: np.ndarray, explain_func: Callable
-    ) -> np.ndarray:
-        """
-        Generate explanation, apply normalization and take absolute values if configured so during metric instantiation.
-
-        Parameters
-        ----------
-        x_batch: np.ndarray
-            4D tensor representing batch of input images.
-        y_batch: np.ndarray
-             1D tensor, representing predicted labels for the x_batch.
-        explain_func: callable
-            Function to generate explanations, takes only inputs,targets kwargs.
-
-        Returns
-        -------
-        a_batch: np.ndarray
-            A batch of explanations.
-        """
-        a_batch = explain_func(inputs=x_batch, targets=y_batch)
-        if self.normalise:
-            a_batch = self.normalise_func(a_batch, **self.normalise_func_kwargs)
-        if self.abs:
-            a_batch = np.abs(a_batch)
-        return expand_attribution_channel(a_batch, x_batch)
-
+    @singledispatchmethod
     def evaluate_batch(
         self,
         model: ModelInterface,
         x_batch: np.ndarray,
         y_batch: np.ndarray,
         a_batch: np.ndarray,
-        *args,
-        **kwargs,
+        s_batch=None,
+        custom_batch=None,
     ) -> np.ndarray:
         """
         Parameters
@@ -298,10 +232,10 @@
             1D tensor, representing predicted labels for the x_batch.
         a_batch: np.ndarray, optional
             4D tensor with pre-computed explanations for the x_batch.
-        args:
+        s_batch:
             Unused.
-        kwargs:
-            Unused.
+        custom_batch:
+            Padded perturbed inputs in case of plain-text perturbations for NLP, otherwise unused.
 
         Returns
         -------
@@ -309,52 +243,161 @@
             A batch of explanations.
 
         """
-        batch_size = x_batch.shape[0]
-        _explain_func = partial(
-            self.explain_func, model=model.get_model(), **self.explain_func_kwargs
-        )
         # Execute forward pass on provided inputs.
-        logits = model.predict(x_batch)
+        logits = get_logits_for_labels(model.predict(x_batch), y_batch)
         # Prepare output array.
-        ros_batch = np.zeros(shape=[self._nr_samples, x_batch.shape[0]])
+        ros_batch = np.zeros(shape=[self.nr_samples, x_batch.shape[0]])
 
-        for index in range(self._nr_samples):
+        for index in range(self.nr_samples):
             # Perturb input.
-            x_perturbed = perturb_batch(
-                perturb_func=self.perturb_func,
-                indices=np.tile(np.arange(0, x_batch[0].size), (batch_size, 1)),
-                indexed_axes=np.arange(0, x_batch[0].ndim),
-                arr=x_batch,
-                **self.perturb_func_kwargs,
-            )
+            x_perturbed = self.perturb_batch(x_batch)
             # Generate explanations for perturbed input.
-            a_batch_perturbed = self.generate_normalised_explanations_batch(
-                x_perturbed, y_batch, _explain_func
-            )
+            a_batch_perturbed = self.explain_batch(model, x_perturbed, y_batch)
             # Execute forward pass on perturbed inputs.
-            logits_perturbed = model.predict(x_perturbed)
+            logits_perturbed = get_logits_for_labels(
+                model.predict(x_perturbed), y_batch
+            )
             # Compute maximization's objective.
             ros = self.relative_output_stability_objective(
                 logits, logits_perturbed, a_batch, a_batch_perturbed
             )
             ros_batch[index] = ros
-            # We're done with this sample if `return_nan_when_prediction_changes`==False.
-            if not self._return_nan_when_prediction_changes:
-                continue
-
             # If perturbed input caused change in prediction, then it's ROS=nan.
-            predicted_y = model.predict(x_batch).argmax(axis=-1)
-            predicted_y_perturbed = model.predict(x_perturbed).argmax(axis=-1)
-            changed_prediction_indices = np.argwhere(
-                predicted_y != predicted_y_perturbed
-            ).reshape(-1)
-
-            if len(changed_prediction_indices) == 0:
-                continue
-            ros_batch[index, changed_prediction_indices] = np.nan
+            changed_prediction_indices = self.changed_prediction_indices(
+                model, x_batch, x_perturbed
+            )
+            if len(changed_prediction_indices) != 0:
+                ros_batch[index, changed_prediction_indices] = np.nan
 
         # Compute ROS.
         result = np.max(ros_batch, axis=0)
-        if self.return_aggregate:
-            result = [self.aggregate_func(result)]
+        return result
+
+    @evaluate_batch.register
+    def _(
+        self,
+        model: TextClassifier,
+        x_batch: List[str],
+        y_batch: np.ndarray,
+        a_batch: List[Explanation],
+        s_batch=None,
+        custom_batch: Optional[List[List[str]]] = None,
+    ) -> np.ndarray:
+
+        # Execute forward pass on provided inputs.
+        logits = get_logits_for_labels(model.predict(x_batch), y_batch)
+        # Prepare output array.
+        ros_batch = np.zeros(shape=[self.nr_samples, len(x_batch)])
+
+        for index in range(self.nr_samples):
+            if is_plain_text_perturbation(self.perturb_func):
+                ros_batch[index] = self._eval_step_plain_text(
+                    model, x_batch, y_batch, a_batch, logits, custom_batch[index]
+                )
+            else:
+                ros_batch[index] = self._eval_step_embeddings(
+                    model, x_batch, y_batch, a_batch, logits
+                )
+
+        # Compute ROS.
+        result = np.max(ros_batch, axis=0)
         return result
+
+    def _eval_step_embeddings(
+        self,
+        model: TextClassifier,
+        x_batch: List[str],
+        y_batch: np.ndarray,
+        a_batch: List[Explanation],
+        og_logits: np.ndarray,
+    ) -> np.ndarray:
+
+        x_embeddings, predict_kwargs = model.get_embeddings(x_batch)
+        # Perturb input.
+        x_perturbed = self.perturb_batch(x_embeddings)
+
+        # Generate explanations for perturbed input.
+        a_batch_perturbed = self.explain_batch(
+            model, x_perturbed, y_batch, **predict_kwargs
+        )
+        # Execute forward pass on perturbed inputs.
+        logits_perturbed = get_logits_for_labels(
+            safe_as_array(model.predict(x_perturbed, **predict_kwargs), force=True),
+            y_batch,
+        )
+        # Compute maximization's objective.
+        ros = self.relative_output_stability_objective(
+            og_logits, logits_perturbed, get_scores(a_batch), a_batch_perturbed
+        )
+        changed_prediction_indices = self.changed_prediction_indices(
+            model, x_embeddings, x_perturbed, **predict_kwargs
+        )
+        if len(changed_prediction_indices) != 0:
+            ros[changed_prediction_indices] = np.nan
+        return ros
+
+    def _eval_step_plain_text(
+        self,
+        model: TextClassifier,
+        x_batch: List[str],
+        y_batch: np.ndarray,
+        a_batch: List[Explanation],
+        og_logits: np.ndarray,
+        x_perturbed: List[str],
+    ) -> np.ndarray:
+
+        # Generate explanations for perturbed input.
+        a_batch_perturbed = self.explain_batch(model, x_perturbed, y_batch)
+        # Execute forward pass on perturbed inputs.
+        logits_perturbed = get_logits_for_labels(model.predict(x_perturbed), y_batch)
+        # Compute maximization's objective.
+        ros = self.relative_output_stability_objective(
+            og_logits,
+            logits_perturbed,
+            get_scores(a_batch),
+            get_scores(a_batch_perturbed),
+        )
+        changes_prediction_indices = self.changed_prediction_indices(
+            model, x_batch, x_perturbed
+        )
+        if len(changes_prediction_indices) != 0:
+            ros[changes_prediction_indices] = np.nan
+        return ros
+
+    @staticmethod
+    def relative_output_stability_objective(
+        h_x: np.ndarray,
+        h_xs: np.ndarray,
+        e_x: np.ndarray,
+        e_xs: np.ndarray,
+    ) -> np.ndarray:
+        """
+        Computes relative output stability's maximization objective
+         as defined here :ref:`https://arxiv.org/pdf/2203.06877.pdf` by the authors.
+
+        Parameters
+        ----------
+        h_x: np.ndarray
+            Output logits for x_batch.
+        h_xs: np.ndarray
+            Output logits for xs_batch.
+        e_x: np.ndarray
+            Explanations for x.
+        e_xs: np.ndarray
+            Explanations for xs.
+
+        Returns
+        -------
+        ros_obj: np.ndarray
+            ROS maximization objective.
+        """
+
+        # prevent division by 0
+        eps_min = np.finfo(np.float32).eps
+
+        nominator = (e_x - e_xs) / (e_x + eps_min)
+        nominator = l2_norm(nominator)
+
+        denominator = h_x - h_xs
+        denominator = l2_norm(denominator) + eps_min
+        return nominator / denominator
Index: quantus/metrics/robustness/relative_representation_stability.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/quantus/metrics/robustness/relative_representation_stability.py b/quantus/metrics/robustness/relative_representation_stability.py
--- a/quantus/metrics/robustness/relative_representation_stability.py	(revision c2255b793bae21a32b1274275ae60b44cdd94d7b)
+++ b/quantus/metrics/robustness/relative_representation_stability.py	(date 1681078345885)
@@ -6,23 +6,28 @@
 
 from __future__ import annotations
 
+from functools import singledispatchmethod
 from typing import TYPE_CHECKING, Optional, Callable, Dict, List
+
 import numpy as np
-from functools import partial
 
 if TYPE_CHECKING:
     import tensorflow as tf
     import torch
 
 
-from quantus.helpers.model.model_interface import ModelInterface
+from quantus.helpers.model.model_interface import ModelInterface, HiddenRepresentationsModel
 from quantus.metrics.base_batched import BatchedPerturbationMetric
 from quantus.helpers.warn import warn_parameterisation
 from quantus.helpers.asserts import attributes_check
 from quantus.functions.normalise_func import normalise_by_average_second_moment_estimate
-from quantus.functions.perturb_func import uniform_noise, perturb_batch
-from quantus.helpers.utils import expand_attribution_channel
+from quantus.functions.perturb_func import uniform_noise
+from quantus.helpers.collection_utils import value_or_default
+from quantus.functions.norm_func import l2_norm
 
+from quantus.helpers.types import Explanation
+from quantus.helpers.model.text_classifier import TextClassifier
+from quantus.helpers.nlp_utils import is_plain_text_perturbation, get_scores
 
 class RelativeRepresentationStability(BatchedPerturbationMetric):
     """
@@ -37,6 +42,8 @@
         1) Chirag Agarwal, et. al., 2022. "Rethinking stability for attribution based explanations.", https://arxiv.org/pdf/2203.06877.pdf
     """
 
+    data_domain_applicability: List[str] = BatchedPerturbationMetric.data_domain_applicability + ["NLP"]
+
     @attributes_check
     def __init__(
         self,
@@ -51,7 +58,6 @@
         aggregate_func: Optional[Callable[[np.ndarray], np.ndarray]] = np.mean,
         disable_warnings: bool = False,
         display_progressbar: bool = False,
-        eps_min: float = 1e-6,
         default_plot_func: Optional[Callable] = None,
         layer_names: Optional[List[str]] = None,
         layer_indices: Optional[List[int]] = None,
@@ -85,8 +91,6 @@
             Indicates whether a tqdm-progress-bar is printed, default=False.
         default_plot_func: callable
             Callable that plots the metrics result.
-        eps_min: float
-            Small constant to prevent division by 0 in relative_stability_objective, default 1e-6.
         layer_names: List[str], optional
             Names of layers, representations of which should be used for RRS computation, default = all.
         layer_indices: List[int], optional
@@ -95,14 +99,9 @@
             When set to true, the metric will be evaluated to NaN if the prediction changes after the perturbation is applied, default=True.
         """
 
-        if normalise_func is None:
-            normalise_func = normalise_by_average_second_moment_estimate
-
-        if perturb_func is None:
-            perturb_func = uniform_noise
-
-        if perturb_func_kwargs is None:
-            perturb_func_kwargs = {"upper_bound": 0.2}
+        normalise_func = value_or_default(normalise_func, lambda: normalise_by_average_second_moment_estimate)
+        perturb_func = value_or_default(perturb_func, lambda: uniform_noise)
+        perturb_func_kwargs = value_or_default(perturb_func_kwargs, lambda: {"upper_bound": 0.2})
 
         super().__init__(
             abs=abs,
@@ -116,10 +115,10 @@
             default_plot_func=default_plot_func,
             display_progressbar=display_progressbar,
             disable_warnings=disable_warnings,
+            nr_samples=nr_samples,
+            return_nan_when_prediction_changes=return_nan_when_prediction_changes,
             **kwargs,
         )
-        self._nr_samples = nr_samples
-        self._eps_min = eps_min
         if layer_names is not None and layer_indices is not None:
             raise ValueError(
                 "Must provide either layer_names OR layer_indices, not both."
@@ -127,7 +126,6 @@
 
         self._layer_names = layer_names
         self._layer_indices = layer_indices
-        self._return_nan_when_prediction_changes = return_nan_when_prediction_changes
 
         if not self.disable_warnings:
             warn_parameterisation(
@@ -153,8 +151,9 @@
         softmax: bool = False,
         channel_first: bool = True,
         batch_size: int = 64,
+        tokenizer=None,
         **kwargs,
-    ) -> List[float]:
+    ) -> np.ndarray:
         """
         For each image `x`:
          - Generate `num_perturbations` perturbed `xs` in the neighborhood of `x`.
@@ -208,95 +207,19 @@
             model_predict_kwargs=model_predict_kwargs,
             s_batch=None,
             batch_size=batch_size,
+            tokenizer=tokenizer,
+            **kwargs
         )
 
-    def relative_representation_stability_objective(
-        self,
-        l_x: np.ndarray,
-        l_xs: np.ndarray,
-        e_x: np.ndarray,
-        e_xs: np.ndarray,
-    ) -> np.ndarray:
-        """
-        Computes relative representation stabilities maximization objective
-        as defined here https://arxiv.org/pdf/2203.06877.pdf by the authors.
-
-        Parameters
-        ----------
-        l_x: np.ndarray
-            Internal representation for x_batch.
-        l_xs: np.ndarray
-            Internal representation for xs_batch.
-        e_x: np.ndarray
-            Explanations for x.
-        e_xs: np.ndarray
-            Explanations for xs.
-
-        Returns
-        -------
-        rrs_obj: np.ndarray
-            RRS maximization objective.
-        """
-
-        num_dim = e_x.ndim
-        if num_dim == 4:
-            norm_function = lambda arr: np.linalg.norm(
-                np.linalg.norm(arr, axis=(-1, -2)), axis=-1
-            )  # noqa
-        elif num_dim == 3:
-            norm_function = lambda arr: np.linalg.norm(arr, axis=(-1, -2))  # noqa
-        elif num_dim == 2:
-            norm_function = lambda arr: np.linalg.norm(arr, axis=-1)
-        else:
-            raise ValueError(
-                "Relative Input Stability only supports 4D, 3D and 2D inputs (batch dimension inclusive)."
-            )
-
-        # fmt: off
-        nominator = (e_x - e_xs) / (e_x + (e_x == 0) * self._eps_min)  # prevent division by 0
-        nominator = norm_function(nominator)
-        # fmt: on
-        denominator = l_x - l_xs
-        denominator /= l_x + (l_x == 0) * self._eps_min  # prevent division by 0
-        denominator = np.linalg.norm(denominator, axis=-1)
-        denominator += (denominator == 0) * self._eps_min
-        return nominator / denominator
-
-    def generate_normalised_explanations_batch(
-        self, x_batch: np.ndarray, y_batch: np.ndarray, explain_func: Callable
-    ) -> np.ndarray:
-        """
-        Generate explanation, apply normalization and take absolute values if configured so during metric instantiation.
-
-        Parameters
-        ----------
-        x_batch: np.ndarray
-            4D tensor representing batch of input images.
-        y_batch: np.ndarray
-             1D tensor, representing predicted labels for the x_batch.
-        explain_func: callable
-            Function to generate explanations, takes only inputs,targets kwargs.
-
-        Returns
-        -------
-        a_batch: np.ndarray
-            A batch of explanations.
-        """
-        a_batch = explain_func(inputs=x_batch, targets=y_batch)
-        if self.normalise:
-            a_batch = self.normalise_func(a_batch, **self.normalise_func_kwargs)
-        if self.abs:
-            a_batch = np.abs(a_batch)
-        return expand_attribution_channel(a_batch, x_batch)
-
+    @singledispatchmethod
     def evaluate_batch(
         self,
         model: ModelInterface,
         x_batch: np.ndarray,
         y_batch: np.ndarray,
         a_batch: np.ndarray,
-        *args,
-        **kwargs,
+        s_batch = None,
+        custom_batch = None,
     ) -> np.ndarray:
         """
         Parameters
@@ -320,30 +243,19 @@
             The batched evaluation results.
 
         """
-        batch_size = x_batch.shape[0]
-        _explain_func = partial(
-            self.explain_func, model=model.get_model(), **self.explain_func_kwargs
-        )
+
         # Retrieve internal representation for provided inputs.
         internal_representations = model.get_hidden_representations(
             x_batch, self._layer_names, self._layer_indices
         )
         # Prepare output array.
-        rrs_batch = np.zeros(shape=[self._nr_samples, x_batch.shape[0]])
+        rrs_batch = np.zeros(shape=[self.nr_samples, x_batch.shape[0]])
 
-        for index in range(self._nr_samples):
+        for index in range(self.nr_samples):
             # Perturb input.
-            x_perturbed = perturb_batch(
-                perturb_func=self.perturb_func,
-                indices=np.tile(np.arange(0, x_batch[0].size), (batch_size, 1)),
-                indexed_axes=np.arange(0, x_batch[0].ndim),
-                arr=x_batch,
-                **self.perturb_func_kwargs,
-            )
+            x_perturbed = self.perturb_batch(x_batch)
             # Generate explanations for perturbed input.
-            a_batch_perturbed = self.generate_normalised_explanations_batch(
-                x_perturbed, y_batch, _explain_func
-            )
+            a_batch_perturbed = self.explain_batch(model, x_perturbed, y_batch)
             # Retrieve internal representation for perturbed inputs.
             internal_representations_perturbed = model.get_hidden_representations(
                 x_perturbed, self._layer_names, self._layer_indices
@@ -356,23 +268,128 @@
                 a_batch_perturbed,
             )
             rrs_batch[index] = rrs
-            # We're done with this sample if `return_nan_when_prediction_changes`==False.
-            if not self._return_nan_when_prediction_changes:
-                continue
 
             # If perturbed input caused change in prediction, then it's RRS=nan.
-            predicted_y = model.predict(x_batch).argmax(axis=-1)
-            predicted_y_perturbed = model.predict(x_perturbed).argmax(axis=-1)
-            changed_prediction_indices = np.argwhere(
-                predicted_y != predicted_y_perturbed
-            ).reshape(-1)
+            changed_prediction_indices = self.changed_prediction_indices(model, x_batch, x_perturbed)
 
-            if len(changed_prediction_indices) == 0:
-                continue
-            rrs_batch[index, changed_prediction_indices] = np.nan
+            if len(changed_prediction_indices) != 0:
+                rrs_batch[index, changed_prediction_indices] = np.nan
 
         # Compute RRS.
         result = np.max(rrs_batch, axis=0)
-        if self.return_aggregate:
-            result = [self.aggregate_func(result)]
+        return result
+
+    @evaluate_batch.register
+    def _(
+            self,
+            model: TextClassifier,
+            x_batch: List[str],
+            y_batch: np.ndarray,
+            a_batch: List[Explanation],
+            s_batch=None,
+            custom_batch=None,
+    ) -> np.ndarray:
+        ris_batch = np.zeros(shape=[self.nr_samples, len(x_batch)])
+        for index in range(self.nr_samples):
+            if is_plain_text_perturbation(self.perturb_func):
+                ris_batch[index] = self._eval_step_nlp_plain_text(
+                    model, x_batch, y_batch, a_batch, custom_batch[index]
+                )
+            else:
+                ris_batch[index] = self._eval_step_nlp_embeddings(
+                    model, x_batch, y_batch, a_batch
+                )
+
+        # Compute RIS.
+        result = np.max(ris_batch, axis=0)
         return result
+
+    def _eval_step_nlp_plain_text(
+            self,
+            model: TextClassifier,
+            x_batch: List[str],
+            y_batch: np.ndarray,
+            a_batch: List[Explanation],
+            x_perturbed: List[str],
+    ) -> np.ndarray:
+
+        internal_representations = model.get_hidden_representations(x_batch)
+        internal_representations_perturbed = model.get_hidden_representations(x_perturbed)
+
+        a_batch_perturbed = self.explain_batch(model, x_perturbed, y_batch)
+        rrs = self.relative_representation_stability_objective(
+            internal_representations,
+            internal_representations_perturbed,
+            get_scores(a_batch),
+            get_scores(a_batch_perturbed),
+        )
+        changed_prediction_indices = self.changed_prediction_indices(model, x_batch, x_perturbed)
+        if len(changed_prediction_indices) != 0:
+            rrs[changed_prediction_indices] = np.nan
+        return rrs
+
+    def _eval_step_nlp_embeddings(
+        self,
+        model: TextClassifier | HiddenRepresentationsModel,
+        x_batch: List[str],
+        y_batch: np.ndarray,
+        a_batch: List[Explanation],
+    ) -> np.ndarray:
+
+        x_embeddings, predict_kwargs = model.get_embeddings(x_batch)
+        x_perturbed = self.perturb_batch(x_embeddings)
+
+        internal_representations = model.get_hidden_representations(x_embeddings, **predict_kwargs)
+        internal_representations_perturbed = model.get_hidden_representations(x_perturbed, **predict_kwargs)
+
+        a_batch_perturbed = self.explain_batch(model, x_perturbed, y_batch, **predict_kwargs)
+        rrs = self.relative_representation_stability_objective(
+            internal_representations,
+            internal_representations_perturbed,
+            get_scores(a_batch),
+            a_batch_perturbed,
+        )
+        changed_prediction_indices = self.changed_prediction_indices(model, x_embeddings, x_perturbed, **predict_kwargs)
+        if len(changed_prediction_indices) != 0:
+            rrs[changed_prediction_indices] = np.nan
+        return rrs
+
+    @staticmethod
+    def relative_representation_stability_objective(
+            l_x: np.ndarray,
+            l_xs: np.ndarray,
+            e_x: np.ndarray,
+            e_xs: np.ndarray,
+    ) -> np.ndarray:
+        """
+        Computes relative representation stabilities maximization objective
+        as defined here https://arxiv.org/pdf/2203.06877.pdf by the authors.
+
+        Parameters
+        ----------
+        l_x: np.ndarray
+            Internal representation for x_batch.
+        l_xs: np.ndarray
+            Internal representation for xs_batch.
+        e_x: np.ndarray
+            Explanations for x.
+        e_xs: np.ndarray
+            Explanations for xs.
+
+        Returns
+        -------
+        rrs_obj: np.ndarray
+            RRS maximization objective.
+        """
+
+        # prevent division by 0
+        eps_min = np.finfo(np.float32).eps
+
+        nominator = (e_x - e_xs) / (e_x + eps_min)
+        nominator = l2_norm(nominator)
+
+        denominator = l_x - l_xs
+        denominator /= (l_x + eps_min)
+        denominator = l2_norm(denominator) + eps_min
+
+        return nominator / denominator
\ No newline at end of file
Index: quantus/metrics/base.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/quantus/metrics/base.py b/quantus/metrics/base.py
--- a/quantus/metrics/base.py	(revision c2255b793bae21a32b1274275ae60b44cdd94d7b)
+++ b/quantus/metrics/base.py	(date 1681078345883)
@@ -5,11 +5,10 @@
 # You should have received a copy of the GNU Lesser General Public License along with Quantus. If not, see <https://www.gnu.org/licenses/>.
 # Quantus project URL: <https://github.com/understandable-machine-intelligence-lab/Quantus>.
 
-import inspect
 import re
-from abc import abstractmethod
-from collections.abc import Sequence
-from typing import Any, Callable, Dict, Sequence, Optional, Tuple, Union, Collection
+from abc import abstractmethod, ABC
+from typing import Any, Callable, Dict, Sequence, Optional, Union, Collection, List
+
 import matplotlib.pyplot as plt
 import numpy as np
 from tqdm.auto import tqdm
@@ -20,10 +19,9 @@
 from quantus.helpers.model.model_interface import ModelInterface
 
 
-class Metric:
-    """
-    Implementation of the base Metric class.
-    """
+class EvaluateAble(ABC):
+    """A base class for metrics, which can be evaluated in Quantus."""
+    data_domain_applicability: List[str] = ["Image", "Time-Series", "Tabular"]
 
     @asserts.attributes_check
     def __init__(
@@ -101,6 +99,333 @@
         self.last_results: Any = []
         self.all_results: Any = []
 
+    def __call__(
+        self,
+        model,
+        x_batch: np.ndarray,
+        y_batch: Optional[np.ndarray],
+        a_batch: Optional[np.ndarray],
+        s_batch: Optional[np.ndarray],
+        channel_first: Optional[bool],
+        explain_func: Optional[Callable],
+        explain_func_kwargs: Optional[Dict],
+        model_predict_kwargs: Optional[Dict],
+        softmax: Optional[bool],
+        device: Optional[str] = None,
+        batch_size: int = 64,
+        custom_batch: Optional[Any] = None,
+        **kwargs,
+    ) -> Union[int, float, list, dict, Collection[Any], None]:
+        pass
+
+    def general_preprocess(
+        self,
+        model,
+        x_batch: np.ndarray,
+        y_batch: Optional[np.ndarray],
+        a_batch: Optional[np.ndarray],
+        s_batch: Optional[np.ndarray],
+        channel_first: Optional[bool],
+        explain_func: Callable,
+        explain_func_kwargs: Optional[Dict[str, Any]],
+        model_predict_kwargs: Optional[Dict],
+        softmax: bool,
+        device: Optional[str],
+        custom_batch: Optional[np.ndarray],
+    ) -> Dict[str, Any]:
+        """
+        Prepares all necessary variables for evaluation.
+        Parameters
+        ----------
+
+        model: torch.nn.Module, tf.keras.Model
+            A torch or tensorflow model e.g., torchvision.models that is subject to explanation.
+        x_batch: np.ndarray
+            A np.ndarray which contains the input data that are explained.
+        y_batch: np.ndarray
+            A np.ndarray which contains the output labels that are explained.
+        a_batch: np.ndarray, optional
+            A np.ndarray which contains pre-computed attributions i.e., explanations.
+        s_batch: np.ndarray, optional
+            A np.ndarray which contains segmentation masks that matches the input.
+        channel_first: boolean, optional
+            Indicates of the image dimensions are channel first, or channel last.
+            Inferred from the input shape if None.
+        explain_func: callable
+            Callable generating attributions.
+        explain_func_kwargs: dict, optional
+            Keyword arguments to be passed to explain_func on call.
+        model_predict_kwargs: dict, optional
+            Keyword arguments to be passed to the model's predict method.
+        softmax: boolean
+            Indicates whether to use softmax probabilities or logits in model prediction.
+            This is used for this __call__ only and won't be saved as attribute. If None, self.softmax is used.
+        device: string
+            Indicated the device on which a torch.Tensor is or will be allocated: "cpu" or "gpu".
+        custom_batch: any
+            Gives flexibility ot the user to use for evaluation, can hold any variable.
+
+        Returns
+        -------
+        tuple
+            A general preprocess.
+
+        """
+        pass
+
+    def custom_preprocess(
+        self,
+        model: ModelInterface,
+        x_batch: np.ndarray,
+        y_batch: Optional[np.ndarray],
+        a_batch: Optional[np.ndarray],
+        s_batch: np.ndarray,
+        custom_batch: Optional[np.ndarray],
+    ) -> Optional[Dict[str, Any]]:
+        """
+        Implement this method if you need custom preprocessing of data,
+        model alteration or simply for creating/initialising additional
+        attributes or assertions.
+
+        If this method returns a dictionary, the keys (string) will be used as
+        additional arguments for evaluate_instance().
+        If the key ends with `_batch`, this suffix will be removed from the
+        respective argument name when passed to evaluate_instance().
+        If they key corresponds to the arguments `x_batch, y_batch, a_batch, s_batch`,
+        these will be overwritten for passing `x, y, a, s` to `evaluate_instance()`.
+        If this method returns None, no additional keyword arguments will be
+        passed to `evaluate_instance()`.
+
+        Parameters
+        ----------
+        model: torch.nn.Module, tf.keras.Model
+            A torch or tensorflow model e.g., torchvision.models that is subject to explanation.
+        x_batch: np.ndarray
+            A np.ndarray which contains the input data that are explained.
+        y_batch: np.ndarray
+            A np.ndarray which contains the output labels that are explained.
+        a_batch: np.ndarray, optional
+            A np.ndarray which contains pre-computed attributions i.e., explanations.
+        s_batch: np.ndarray, optional
+            A np.ndarray which contains segmentation masks that matches the input.
+        custom_batch: any
+            Gives flexibility to the inheriting metric to use for evaluation, can hold any variable.
+
+        Returns
+        -------
+        dict, optional
+            A dictionary which holds (optionally additional) preprocessed data to
+           be included when calling `evaluate_instance()`.
+
+
+        Examples
+        --------
+            # Custom Metric definition with additional keyword argument used in evaluate_instance():
+            >>> def custom_preprocess(
+            >>>     self,
+            >>>     model: ModelInterface,
+            >>>     x_batch: np.ndarray,
+            >>>     y_batch: Optional[np.ndarray],
+            >>>     a_batch: Optional[np.ndarray],
+            >>>     s_batch: np.ndarray,
+            >>>     custom_batch: Optional[np.ndarray],
+            >>> ) -> Dict[str, Any]:
+            >>>     return {'my_new_variable': np.mean(x_batch)}
+            >>>
+            >>> def evaluate_instance(
+            >>>     self,
+            >>>     model: ModelInterface,
+            >>>     x: np.ndarray,
+            >>>     y: Optional[np.ndarray],
+            >>>     a: Optional[np.ndarray],
+            >>>     s: np.ndarray,
+            >>>     my_new_variable: np.float,
+            >>> ) -> float:
+
+            # Custom Metric definition with additional keyword argument that ends with `_batch`
+            >>> def custom_preprocess(
+            >>>     self,
+            >>>     model: ModelInterface,
+            >>>     x_batch: np.ndarray,
+            >>>     y_batch: Optional[np.ndarray],
+            >>>     a_batch: Optional[np.ndarray],
+            >>>     s_batch: np.ndarray,
+            >>>     custom_batch: Optional[np.ndarray],
+            >>> ) -> Dict[str, Any]:
+            >>>     return {'my_new_variable_batch': np.arange(len(x_batch))}
+            >>>
+            >>> def evaluate_instance(
+            >>>     self,
+            >>>     model: ModelInterface,
+            >>>     x: np.ndarray,
+            >>>     y: Optional[np.ndarray],
+            >>>     a: Optional[np.ndarray],
+            >>>     s: np.ndarray,
+            >>>     my_new_variable: np.int,
+            >>> ) -> float:
+
+            # Custom Metric definition with transformation of an existing
+            # keyword argument from `evaluate_instance()`
+            >>> def custom_preprocess(
+            >>>     self,
+            >>>     model: ModelInterface,
+            >>>     x_batch: np.ndarray,
+            >>>     y_batch: Optional[np.ndarray],
+            >>>     a_batch: Optional[np.ndarray],
+            >>>     s_batch: np.ndarray,
+            >>>     custom_batch: Optional[np.ndarray],
+            >>> ) -> Dict[str, Any]:
+            >>>     return {'x_batch': x_batch - np.mean(x_batch, axis=0)}
+            >>>
+            >>> def evaluate_instance(
+            >>>     self,
+            >>>     model: ModelInterface,
+            >>>     x: np.ndarray,
+            >>>     y: Optional[np.ndarray],
+            >>>     a: Optional[np.ndarray],
+            >>>     s: np.ndarray,
+            >>> ) -> float:
+
+            # Custom Metric definition with None returned in custom_preprocess(),
+            # but with inplace-preprocessing and additional assertion.
+            >>> def custom_preprocess(
+            >>>     self,
+            >>>     model: ModelInterface,
+            >>>     x_batch: np.ndarray,
+            >>>     y_batch: Optional[np.ndarray],
+            >>>     a_batch: Optional[np.ndarray],
+            >>>     s_batch: np.ndarray,
+            >>>     custom_batch: Optional[np.ndarray],
+            >>> ) -> None:
+            >>>     if np.any(np.all(a_batch < 0, axis=0)):
+            >>>         raise ValueError("Attributions must not be all negative")
+            >>>
+            >>>     x_batch -= np.mean(x_batch, axis=0)
+            >>>
+            >>>     return None
+            >>>
+            >>> def evaluate_instance(
+            >>>     self,
+            >>>     model: ModelInterface,
+            >>>     x: np.ndarray,
+            >>>     y: Optional[np.ndarray],
+            >>>     a: Optional[np.ndarray],
+            >>>     s: np.ndarray,
+            >>> ) -> float:
+
+        """
+        pass
+
+    def custom_postprocess(
+        self,
+        model: ModelInterface,
+        x_batch: np.ndarray,
+        y_batch: Optional[np.ndarray],
+        a_batch: Optional[np.ndarray],
+        s_batch: np.ndarray,
+        **kwargs,
+    ) -> Optional[Any]:
+        """
+        Implement this method if you need custom postprocessing of results or
+        additional attributes.
+
+        Parameters
+        ----------
+        model: torch.nn.Module, tf.keras.Model
+            A torch or tensorflow model e.g., torchvision.models that is subject to explanation.
+        x_batch: np.ndarray
+            A np.ndarray which contains the input data that are explained.
+        y_batch: np.ndarray
+            A np.ndarray which contains the output labels that are explained.
+        a_batch: np.ndarray, optional
+            A np.ndarray which contains pre-computed attributions i.e., explanations.
+        s_batch: np.ndarray, optional
+            A np.ndarray which contains segmentation masks that matches the input.
+        kwargs: any, optional
+            Additional data which was created in custom_preprocess().
+
+        Returns
+        -------
+        any
+            Can be implemented, optionally by the child class.
+        """
+        pass
+
+    def plot(
+        self,
+        plot_func: Callable,
+        show: bool = True,
+        path_to_save: Union[str, None] = None,
+        *args,
+        **kwargs,
+    ) -> None:
+        """
+        Basic plotting functionality for Metric class.
+        The user provides a plot_func (Callable) that contains the actual plotting logic (but returns None).
+
+        Parameters
+        ----------
+        plot_func: callable
+            A Callable with the actual plotting logic.
+        show: boolean
+            A boolean to state if the plot shall be shown.
+        path_to_save (str):
+            A string that specifies the path to save file.
+        args: optional
+            An optional with additional arguments.
+        kwargs: optional
+            An optional dict with additional arguments.
+
+        Returns
+        -------
+        None
+        """
+        # Get plotting func if not provided.
+        if plot_func is None:
+            plot_func = self.default_plot_func
+
+        # Asserts.
+        asserts.assert_plot_func(plot_func=plot_func)
+
+        # Plot!
+        plot_func(*args, **kwargs)
+
+        if show:
+            plt.show()
+
+        if path_to_save:
+            plt.savefig(fname=path_to_save, dpi=400)
+
+        return None
+
+    def interpret_scores(self) -> None:
+        """
+        Get an interpretation of the scores.
+        """
+        print(self.__init__.__doc__.split(".")[1].split("References")[0])
+
+    @property
+    def get_params(self) -> dict:
+        """
+        List parameters of metric.
+
+        Returns
+        -------
+        dict
+            A dictionary with attributes if not excluded from pre-determined list.
+        """
+        attr_exclude = [
+            "args",
+            "kwargs",
+            "all_results",
+            "last_results",
+            "default_plot_func",
+        ]
+        return {k: v for k, v in self.__dict__.items() if k not in attr_exclude}
+
+class Metric(EvaluateAble):
+    """Implementation of the base single value Metric class."""
+
     def __call__(
         self,
         model,
@@ -247,39 +572,6 @@
 
         return self.last_results
 
-    @abstractmethod
-    def evaluate_instance(
-        self,
-        model: ModelInterface,
-        x: np.ndarray,
-        y: Optional[np.ndarray],
-        a: Optional[np.ndarray],
-        s: Optional[np.ndarray],
-    ) -> Any:
-        """
-        Evaluate instance gets model and data for a single instance as input and returns the evaluation result.
-
-        This method needs to be implemented to use __call__().
-
-        Parameters
-        ----------
-        model: ModelInterface
-            A ModelInteface that is subject to explanation.
-        x: np.ndarray
-            The input to be evaluated on an instance-basis.
-        y: np.ndarray
-            The output to be evaluated on an instance-basis.
-        a: np.ndarray
-            The explanation to be evaluated on an instance-basis.
-        s: np.ndarray
-            The segmentation to be evaluated on an instance-basis.
-
-        Returns
-        -------
-        Any
-        """
-        raise NotImplementedError()
-
     def general_preprocess(
         self,
         model,
@@ -430,149 +722,6 @@
 
         return data
 
-    def custom_preprocess(
-        self,
-        model: ModelInterface,
-        x_batch: np.ndarray,
-        y_batch: Optional[np.ndarray],
-        a_batch: Optional[np.ndarray],
-        s_batch: np.ndarray,
-        custom_batch: Optional[np.ndarray],
-    ) -> Optional[Dict[str, Any]]:
-        """
-        Implement this method if you need custom preprocessing of data,
-        model alteration or simply for creating/initialising additional
-        attributes or assertions.
-
-        If this method returns a dictionary, the keys (string) will be used as
-        additional arguments for evaluate_instance().
-        If the key ends with `_batch`, this suffix will be removed from the
-        respective argument name when passed to evaluate_instance().
-        If they key corresponds to the arguments `x_batch, y_batch, a_batch, s_batch`,
-        these will be overwritten for passing `x, y, a, s` to `evaluate_instance()`.
-        If this method returns None, no additional keyword arguments will be
-        passed to `evaluate_instance()`.
-
-        Parameters
-        ----------
-        model: torch.nn.Module, tf.keras.Model
-            A torch or tensorflow model e.g., torchvision.models that is subject to explanation.
-        x_batch: np.ndarray
-            A np.ndarray which contains the input data that are explained.
-        y_batch: np.ndarray
-            A np.ndarray which contains the output labels that are explained.
-        a_batch: np.ndarray, optional
-            A np.ndarray which contains pre-computed attributions i.e., explanations.
-        s_batch: np.ndarray, optional
-            A np.ndarray which contains segmentation masks that matches the input.
-        custom_batch: any
-            Gives flexibility to the inheriting metric to use for evaluation, can hold any variable.
-
-        Returns
-        -------
-        dict, optional
-            A dictionary which holds (optionally additional) preprocessed data to
-           be included when calling `evaluate_instance()`.
-
-
-        Examples
-        --------
-            # Custom Metric definition with additional keyword argument used in evaluate_instance():
-            >>> def custom_preprocess(
-            >>>     self,
-            >>>     model: ModelInterface,
-            >>>     x_batch: np.ndarray,
-            >>>     y_batch: Optional[np.ndarray],
-            >>>     a_batch: Optional[np.ndarray],
-            >>>     s_batch: np.ndarray,
-            >>>     custom_batch: Optional[np.ndarray],
-            >>> ) -> Dict[str, Any]:
-            >>>     return {'my_new_variable': np.mean(x_batch)}
-            >>>
-            >>> def evaluate_instance(
-            >>>     self,
-            >>>     model: ModelInterface,
-            >>>     x: np.ndarray,
-            >>>     y: Optional[np.ndarray],
-            >>>     a: Optional[np.ndarray],
-            >>>     s: np.ndarray,
-            >>>     my_new_variable: np.float,
-            >>> ) -> float:
-
-            # Custom Metric definition with additional keyword argument that ends with `_batch`
-            >>> def custom_preprocess(
-            >>>     self,
-            >>>     model: ModelInterface,
-            >>>     x_batch: np.ndarray,
-            >>>     y_batch: Optional[np.ndarray],
-            >>>     a_batch: Optional[np.ndarray],
-            >>>     s_batch: np.ndarray,
-            >>>     custom_batch: Optional[np.ndarray],
-            >>> ) -> Dict[str, Any]:
-            >>>     return {'my_new_variable_batch': np.arange(len(x_batch))}
-            >>>
-            >>> def evaluate_instance(
-            >>>     self,
-            >>>     model: ModelInterface,
-            >>>     x: np.ndarray,
-            >>>     y: Optional[np.ndarray],
-            >>>     a: Optional[np.ndarray],
-            >>>     s: np.ndarray,
-            >>>     my_new_variable: np.int,
-            >>> ) -> float:
-
-            # Custom Metric definition with transformation of an existing
-            # keyword argument from `evaluate_instance()`
-            >>> def custom_preprocess(
-            >>>     self,
-            >>>     model: ModelInterface,
-            >>>     x_batch: np.ndarray,
-            >>>     y_batch: Optional[np.ndarray],
-            >>>     a_batch: Optional[np.ndarray],
-            >>>     s_batch: np.ndarray,
-            >>>     custom_batch: Optional[np.ndarray],
-            >>> ) -> Dict[str, Any]:
-            >>>     return {'x_batch': x_batch - np.mean(x_batch, axis=0)}
-            >>>
-            >>> def evaluate_instance(
-            >>>     self,
-            >>>     model: ModelInterface,
-            >>>     x: np.ndarray,
-            >>>     y: Optional[np.ndarray],
-            >>>     a: Optional[np.ndarray],
-            >>>     s: np.ndarray,
-            >>> ) -> float:
-
-            # Custom Metric definition with None returned in custom_preprocess(),
-            # but with inplace-preprocessing and additional assertion.
-            >>> def custom_preprocess(
-            >>>     self,
-            >>>     model: ModelInterface,
-            >>>     x_batch: np.ndarray,
-            >>>     y_batch: Optional[np.ndarray],
-            >>>     a_batch: Optional[np.ndarray],
-            >>>     s_batch: np.ndarray,
-            >>>     custom_batch: Optional[np.ndarray],
-            >>> ) -> None:
-            >>>     if np.any(np.all(a_batch < 0, axis=0)):
-            >>>         raise ValueError("Attributions must not be all negative")
-            >>>
-            >>>     x_batch -= np.mean(x_batch, axis=0)
-            >>>
-            >>>     return None
-            >>>
-            >>> def evaluate_instance(
-            >>>     self,
-            >>>     model: ModelInterface,
-            >>>     x: np.ndarray,
-            >>>     y: Optional[np.ndarray],
-            >>>     a: Optional[np.ndarray],
-            >>>     s: np.ndarray,
-            >>> ) -> float:
-
-        """
-        pass
-
     def get_instance_iterator(self, data: Dict[str, Any]):
         """
         Creates iterator to iterate over all instances in data dictionary.
@@ -640,113 +789,38 @@
 
         return iterator
 
-    def custom_postprocess(
+    @abstractmethod
+    def evaluate_instance(
         self,
         model: ModelInterface,
-        x_batch: np.ndarray,
-        y_batch: Optional[np.ndarray],
-        a_batch: Optional[np.ndarray],
-        s_batch: np.ndarray,
-        **kwargs,
-    ) -> Optional[Any]:
+        x: np.ndarray,
+        y: Optional[np.ndarray],
+        a: Optional[np.ndarray],
+        s: Optional[np.ndarray],
+    ) -> Any:
         """
-        Implement this method if you need custom postprocessing of results or
-        additional attributes.
+        Evaluate instance gets model and data for a single instance as input and returns the evaluation result.
+
+        This method needs to be implemented to use __call__().
 
         Parameters
         ----------
-        model: torch.nn.Module, tf.keras.Model
-            A torch or tensorflow model e.g., torchvision.models that is subject to explanation.
-        x_batch: np.ndarray
-            A np.ndarray which contains the input data that are explained.
-        y_batch: np.ndarray
-            A np.ndarray which contains the output labels that are explained.
-        a_batch: np.ndarray, optional
-            A np.ndarray which contains pre-computed attributions i.e., explanations.
-        s_batch: np.ndarray, optional
-            A np.ndarray which contains segmentation masks that matches the input.
-        kwargs: any, optional
-            Additional data which was created in custom_preprocess().
+        model: ModelInterface
+            A ModelInteface that is subject to explanation.
+        x: np.ndarray
+            The input to be evaluated on an instance-basis.
+        y: np.ndarray
+            The output to be evaluated on an instance-basis.
+        a: np.ndarray
+            The explanation to be evaluated on an instance-basis.
+        s: np.ndarray
+            The segmentation to be evaluated on an instance-basis.
 
         Returns
         -------
-        any
-            Can be implemented, optionally by the child class.
-        """
-        pass
-
-    def plot(
-        self,
-        plot_func: Callable,
-        show: bool = True,
-        path_to_save: Union[str, None] = None,
-        *args,
-        **kwargs,
-    ) -> None:
-        """
-        Basic plotting functionality for Metric class.
-        The user provides a plot_func (Callable) that contains the actual plotting logic (but returns None).
-
-        Parameters
-        ----------
-        plot_func: callable
-            A Callable with the actual plotting logic.
-        show: boolean
-            A boolean to state if the plot shall be shown.
-        path_to_save (str):
-            A string that specifies the path to save file.
-        args: optional
-            An optional with additional arguments.
-        kwargs: optional
-            An optional dict with additional arguments.
-
-        Returns
-        -------
-        None
-        """
-        # Get plotting func if not provided.
-        if plot_func is None:
-            plot_func = self.default_plot_func
-
-        # Asserts.
-        asserts.assert_plot_func(plot_func=plot_func)
-
-        # Plot!
-        plot_func(*args, **kwargs)
-
-        if show:
-            plt.show()
-
-        if path_to_save:
-            plt.savefig(fname=path_to_save, dpi=400)
-
-        return None
-
-    @property
-    def interpret_scores(self) -> None:
-        """
-        Get an interpretation of the scores.
+        Any
         """
-        print(self.__init__.__doc__.split(".")[1].split("References")[0])
-
-    @property
-    def get_params(self) -> dict:
-        """
-        List parameters of metric.
-
-        Returns
-        -------
-        dict
-            A dictionary with attributes if not excluded from pre-determined list.
-        """
-        attr_exclude = [
-            "args",
-            "kwargs",
-            "all_results",
-            "last_results",
-            "default_plot_func",
-        ]
-        return {k: v for k, v in self.__dict__.items() if k not in attr_exclude}
+        raise NotImplementedError()
 
 
 class PerturbationMetric(Metric):
@@ -826,36 +900,3 @@
         if perturb_func_kwargs is None:
             perturb_func_kwargs = {}
         self.perturb_func_kwargs = perturb_func_kwargs
-
-    @abstractmethod
-    def evaluate_instance(
-        self,
-        model: ModelInterface,
-        x: np.ndarray,
-        y: Optional[np.ndarray],
-        a: Optional[np.ndarray],
-        s: Optional[np.ndarray],
-    ) -> Any:
-        """
-        Evaluate instance gets model and data for a single instance as input and returns the evaluation result.
-
-        This method needs to be implemented to use __call__().
-
-        Parameters
-        ----------
-        model: ModelInterface
-            A ModelInteface that is subject to explanation.
-        x: np.ndarray
-            The input to be evaluated on an instance-basis.
-        y: np.ndarray
-            The output to be evaluated on an instance-basis.
-        a: np.ndarray
-            The explanation to be evaluated on an instance-basis.
-        s: np.ndarray
-            The segmentation to be evaluated on an instance-basis.
-
-        Returns
-        -------
-        Any
-        """
-        raise NotImplementedError()
Index: quantus/metrics/base_batched.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/quantus/metrics/base_batched.py b/quantus/metrics/base_batched.py
--- a/quantus/metrics/base_batched.py	(revision c2255b793bae21a32b1274275ae60b44cdd94d7b)
+++ b/quantus/metrics/base_batched.py	(date 1681078345883)
@@ -5,23 +5,80 @@
 # Quantus is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 # You should have received a copy of the GNU Lesser General Public License along with Quantus. If not, see <https://www.gnu.org/licenses/>.
 # Quantus project URL: <https://github.com/understandable-machine-intelligence-lab/Quantus>.
+from __future__ import annotations
 
-import inspect
-import math
-import re
-from abc import abstractmethod
-from typing import Any, Callable, Dict, Optional, Sequence, Union
+from abc import ABC, abstractmethod
+from functools import partial, singledispatchmethod
+from operator import itemgetter
+from typing import (
+    TYPE_CHECKING,
+    Any,
+    Callable,
+    Dict,
+    List,
+    Optional,
+    Sequence,
+    Tuple,
+    TypedDict,
+    TypeVar,
+    Union,
+)
 
 import numpy as np
 from tqdm.auto import tqdm
 
-from quantus.metrics.base import Metric
-from quantus.helpers import asserts
-from quantus.helpers import warn
+from quantus.functions.perturb_func import perturb_batch as perturb_batch_fn
+from quantus.helpers import asserts, warn
+from quantus.helpers.collection_utils import (
+    add_default_items,
+    batch_inputs,
+    map_optional,
+    safe_as_array,
+    value_or_default,
+)
 from quantus.helpers.model.model_interface import ModelInterface
+from quantus.helpers.model.text_classifier import TextClassifier, Tokenizable
+from quantus.helpers.nlp_utils import is_plain_text_perturbation, map_explanations
+from quantus.helpers.tf_utils import is_tensorflow_model
+from quantus.helpers.torch_utils import is_torch_model
+from quantus.helpers.types import (
+    AggregateFn,
+    ExplainFn,
+    Explanation,
+    MetricScores,
+    NormaliseFn,
+    PerturbFn,
+)
+from quantus.helpers.utils import (
+    get_wrapped_model,
+    get_wrapped_text_classifier,
+    infer_channel_first,
+    make_channel_first,
+)
+from quantus.metrics.base import EvaluateAble
+
+if TYPE_CHECKING:
+    from quantus.helpers.types import ModelT, TokenizerT
 
 
-class BatchedMetric(Metric):
+T = TypeVar("T", bound=MetricScores, covariant=True)
+# C stands for custom (batch).
+C = TypeVar("C", bound=MetricScores, covariant=True)
+DataDict = TypedDict(
+    "DataDict",
+    {
+        "model": Union[ModelInterface, TextClassifier],
+        "x_batch": Union[np.ndarray | List[str]],
+        "y_batch": Optional[np.ndarray],
+        "a_batch": Optional[Union[np.ndarray | List[Explanation]]],
+        "s_batch": Optional[np.ndarray],
+        "custom_batch": Optional[C],
+    },
+    total=False,
+)
+
+
+class BatchedMetric(EvaluateAble, ABC):
     """
     Implementation base BatchedMetric class.
     """
@@ -31,10 +88,10 @@
         self,
         abs: bool,
         normalise: bool,
-        normalise_func: Optional[Callable],
-        normalise_func_kwargs: Optional[Dict[str, Any]],
+        normalise_func: Optional[NormaliseFn],
+        normalise_func_kwargs: Optional[Dict[str, ...]],
         return_aggregate: bool,
-        aggregate_func: Optional[Callable],
+        aggregate_func: Optional[AggregateFn],
         default_plot_func: Optional[Callable],
         disable_warnings: bool,
         display_progressbar: bool,
@@ -93,21 +150,22 @@
 
     def __call__(
         self,
-        model,
-        x_batch: np.ndarray,
+        model: ModelT,
+        x_batch: np.ndarray | List[str],
         y_batch: Optional[np.ndarray],
-        a_batch: Optional[np.ndarray],
-        s_batch: Optional[np.ndarray],
+        a_batch: Optional[np.ndarray | List[Explanation]],
         channel_first: Optional[bool],
-        explain_func: Optional[Callable],
-        explain_func_kwargs: Optional[Dict[str, Any]],
-        model_predict_kwargs: Optional[Dict],
+        explain_func: ExplainFn,
+        explain_func_kwargs: Optional[Dict[str, ...]],
+        model_predict_kwargs: Optional[Dict[str, ...]],
         softmax: Optional[bool],
         device: Optional[str] = None,
         batch_size: int = 64,
         custom_batch: Optional[Any] = None,
+        s_batch: Optional[Any] = None,
+        tokenizer: Optional[TokenizerT] = None,
         **kwargs,
-    ) -> Union[int, float, list, dict, None]:
+    ) -> MetricScores:
         """
         This implementation represents the main logic of the metric and makes the class object callable.
         It completes batch-wise evaluation of explanations (a_batch) with respect to input data (x_batch),
@@ -191,64 +249,234 @@
         warn.deprecation_warnings(kwargs)
         warn.check_kwargs(kwargs)
 
+        x = 1
+
         data = self.general_preprocess(
             model=model,
             x_batch=x_batch,
             y_batch=y_batch,
             a_batch=a_batch,
             s_batch=s_batch,
-            custom_batch=custom_batch,
             channel_first=channel_first,
             explain_func=explain_func,
             explain_func_kwargs=explain_func_kwargs,
             model_predict_kwargs=model_predict_kwargs,
             softmax=softmax,
             device=device,
-        )
-
-        # Create generator for generating batches.
-        batch_generator = self.generate_batches(
-            data=data,
+            custom_batch=custom_batch,
             batch_size=batch_size,
+            tokenizer=tokenizer,
+        )
+        # We should not use un-batched version after general preprocess.
+        del x_batch
+        del y_batch
+        del a_batch
+        del s_batch
+        del model
+
+        pbar = tqdm(
+            data["x_batch"],
+            disable=not self.display_progressbar,
         )
 
-        self.last_results = []
-        for data_batch in batch_generator:
-            result = self.evaluate_batch(**data_batch)
-            self.last_results.extend(result)
+        model = data["model"]
+        scores_batch = []
+
+        for i, x in enumerate(pbar):
+            # Get batch from data dict.
+            y = map_optional(data["y_batch"], itemgetter(i))
+            a = map_optional(data["a_batch"], itemgetter(i))
+            s = map_optional(data["s_batch"], itemgetter(i))
+            # TODO clarify what is custom batch
+            # custom = map_optional(data["custom_batch"], itemgetter(i))
+            x, y, a, custom_batch = self.batch_preprocess(model, x, y, a)
+            score = self.evaluate_batch(model, x, y, a, s, custom_batch)
+            score = self.batch_postprocess(model, x, y, a, s, score)
+            scores_batch.extend(score)
 
         # Call post-processing.
         self.custom_postprocess(**data)
-
         if self.return_aggregate:
-            if self.aggregate_func:
-                try:
-                    self.last_results = [self.aggregate_func(self.last_results)]
-                except:
-                    print(
-                        "The aggregation of evaluation scores failed. Check that "
-                        "'aggregate_func' supplied is appropriate for the data "
-                        "in 'last_results'."
-                    )
-            else:
-                raise KeyError(
-                    "Specify an 'aggregate_func' (Callable) to aggregate evaluation scores."
-                )
-
+            scores_batch = self.aggregate_func(scores_batch)
         # Append content of last results to all results.
-        self.all_results.append(self.last_results)
+        scores_batch = np.asarray(scores_batch)
+        self.all_results.append(scores_batch)
+        return scores_batch
+
+    @singledispatchmethod
+    def explain_batch(
+        self, model: ModelInterface, x_batch: np.ndarray, y_batch: np.ndarray, **kwargs
+    ) -> np.ndarray:
+        """
+        Call self.explain_func, normalise and take absolute value, if was configured to during metric initialization.
+
+        Parameters
+        ----------
+        model:
+            DNN model, which is subject to explanation.
+        x_batch:
+            model inputs.
+        y_batch:
+            Target labels.
+        kwargs:
+            Additional kwargs passed to self.explain_func
+
+        Returns
+        -------
 
-        return self.last_results
+        a_batch:
+            List of (normalised absolute) explanations.
+
+        """
+        a_batch = self.explain_func(
+            model.get_model(), x_batch, y_batch, **self.explain_func_kwargs, **kwargs
+        )
+        if self.normalise:
+            a_batch = self.normalise_func(a_batch, **self.normalise_func_kwargs)
+        if self.abs:
+            a_batch = np.abs(a_batch)
+        return a_batch
+
+    @explain_batch.register
+    def _(
+        self,
+        model: TextClassifier,
+        x_batch: Union[List[str], np.ndarray],
+        y_batch: np.ndarray,
+        **kwargs,
+    ):
+        a_batch = self.explain_func(
+            model, x_batch, y_batch, **self.explain_func_kwargs, **kwargs
+        )
+        if self.normalise:
+            a_batch = map_explanations(
+                a_batch, partial(self.normalise_func, **self.normalise_func_kwargs)
+            )
+        if self.abs:
+            a_batch = map_explanations(a_batch, np.abs)
+
+        return a_batch
+
+    def general_preprocess(
+        self,
+        model: ModelT,
+        x_batch: np.ndarray | List[str],
+        y_batch: Optional[np.ndarray],
+        a_batch: Optional[np.ndarray | List[Explanation]],
+        s_batch: Optional[np.ndarray],
+        channel_first: Optional[bool],
+        explain_func: ExplainFn,
+        explain_func_kwargs: Optional[Dict[str, ...]],
+        model_predict_kwargs: Optional[Dict],
+        softmax: bool,
+        device: Optional[str],
+        custom_batch: Optional[np.ndarray],
+        batch_size: int = 64,
+        tokenizer: Optional[TokenizerT] = None,
+    ) -> DataDict:
+        if is_tensorflow_model(model):
+            model_predict_kwargs = value_or_default(model_predict_kwargs, lambda: {})
+            model_predict_kwargs = add_default_items(
+                model_predict_kwargs, dict(batch_size=batch_size, verbose=0)
+            )
+
+        if isinstance(x_batch, np.ndarray):
+            # Reshape input batch to channel first order:
+            if not isinstance(channel_first, bool):  # None is not a boolean instance.
+                channel_first = infer_channel_first(x_batch)
+            x_batch = make_channel_first(x_batch, channel_first)
+            model_wrapper = get_wrapped_model(
+                model,
+                channel_first,
+                softmax,
+                device,
+                model_predict_kwargs,
+            )
+        else:
+            # For NLP we don't need it
+            model_wrapper = get_wrapped_text_classifier(
+                model,
+                softmax,
+                device,
+                model_predict_kwargs,
+                tokenizer,
+            )
+
+        # Save as attribute, some metrics need it during processing.
+        self.explain_func = explain_func
+        self.explain_func_kwargs = value_or_default(explain_func_kwargs, lambda: {})
+        if is_torch_model(model):
+            self.explain_func_kwargs = add_default_items(
+                self.explain_func_kwargs, {"device": device}
+            )
+
+        # Create extra axis for inputs.
+        batch_fn = partial(batch_inputs, batch_size=batch_size)
+        x_batch = batch_fn(x_batch)
+
+        # Batch additional inputs, if present, otherwise keep them as None.
+        # We keep y_batch and a_batch as None to avoid calling model and explain function on whole dataset at once.
+        y_batch = map_optional(y_batch, batch_fn)
+        a_batch = map_optional(a_batch, batch_fn)
+        s_batch = map_optional(s_batch, batch_fn)
+        return {
+            "model": model_wrapper,
+            "x_batch": x_batch,
+            "y_batch": y_batch,
+            "a_batch": a_batch,
+            "s_batch": s_batch,
+            "custom_batch": None,
+        }
+
+    def batch_preprocess(
+        self,
+        model: ModelInterface | TextClassifier,
+        x_batch: np.ndarray | List[str],
+        y_batch: Optional[np.ndarray],
+        a_batch: Optional[np.ndarray | List[Explanation]],
+    ) -> Tuple[
+        np.ndarray | List[str],
+        np.ndarray,
+        np.ndarray | List[Explanation],
+        Optional[Any],
+    ]:
+        """Generate y_batch, a_batch, custom_batch if were not provided."""
+        # Generate y_batch if not provided.
+        y_batch = value_or_default(
+            y_batch, lambda: model.predict(x_batch).argmax(axis=-1)
+        )
+        if a_batch is None:
+            # Generate a_batch if not provided.
+            a_batch = self.explain_batch(
+                model,
+                x_batch,
+                y_batch,
+            )
+        # TODO is there any way to find out if provide a_batch is normalised and absolute???
+        return x_batch, y_batch, a_batch, None
+
+    def batch_postprocess(
+        self,
+        model: ModelInterface | TextClassifier,
+        x_batch: np.ndarray | List[str],
+        y_batch: np.ndarray,
+        a_batch: np.ndarray | List[Explanation],
+        s_batch: Optional[np.ndarray],
+        score: T,
+    ) -> T:
+        """Apply post-processing to batch scores, default noop."""
+        return score
 
     @abstractmethod
     def evaluate_batch(
         self,
-        model: ModelInterface,
-        x_batch: np.ndarray,
+        model: ModelInterface | TextClassifier,
+        x_batch: np.ndarray | List[str],
         y_batch: np.ndarray,
-        a_batch: np.ndarray,
-        s_batch: np.ndarray,
-    ):
+        a_batch: np.ndarray | List[Explanation],
+        s_batch: Optional[np.ndarray],
+        custom_batch: Optional[Any] = None,
+    ) -> MetricScores:
         """
         Evaluates model and attributes on a single data batch and returns the batched evaluation result.
 
@@ -266,6 +494,8 @@
             The explanation to be evaluated on a batch-basis.
         s_batch: np.ndarray
             The segmentation to be evaluated on a batch-basis.
+        custom_batch:
+
 
         Returns
         -------
@@ -274,132 +504,8 @@
         """
         raise NotImplementedError()
 
-    @staticmethod
-    def get_number_of_batches(n_instances: int, batch_size: int) -> int:
-        """
-        Get the number of batches given number of samples/ instances and a batch size.
-
-        Parameters
-        ----------
-        n_instances: int
-            The number of instances.
-        batch_size: int
-            The batch size.
-
-        Returns
-        -------
-        integer
-        """
-        return math.ceil(n_instances / batch_size)
-
-    def generate_batches(
-        self,
-        data: Dict[str, Any],
-        batch_size: int,
-    ):
-        """
-        Creates iterator to iterate over all batched instances in data dictionary.
-        Each iterator output element is a keyword argument dictionary with
-        string keys.
-
-        Each item key in the input data dictionary has to be of type string.
-        - If the item value is not a sequence, the respective item key/value pair
-          will be written to each iterator output dictionary.
-        - If the item value is a sequence and the item key ends with '_batch',
-          a check will be made to make sure length matches number of instances.
-          The values of the batch instances in the sequence will be added to the respective
-          iterator output dictionary with the '_batch' suffix removed.
-        - If the item value is a sequence but doesn't end with '_batch', it will be treated
-          as a simple value and the respective item key/value pair will be
-          written to each iterator output dictionary.
-
-        Parameters
-        ----------
-        data: dict[str, any]
-            The data input dictionary.
-        batch_size: int
-            The batch size to be used.
-
-        Returns
-        -------
-        iterator
-            Each iterator output element is a keyword argument dictionary (string keys).
 
-        """
-        n_instances = len(data["x_batch"])
-
-        single_value_kwargs: Dict[str, Any] = {}
-        batched_value_kwargs: Dict[str, Any] = {}
-
-        for key, value in list(data.items()):
-            # If data-value is not a Sequence or a string, create list of value with length of n_instances.
-            if not isinstance(value, (Sequence, np.ndarray)) or isinstance(value, str):
-                single_value_kwargs[key] = value
-
-            # If data-value is a sequence and ends with '_batch', only check for correct length.
-            elif key.endswith("_batch"):
-                if len(value) != n_instances:
-                    # Sequence has to have correct length.
-                    raise ValueError(
-                        f"'{key}' has incorrect length (expected: {n_instances}, is: {len(value)})"
-                    )
-                else:
-                    batched_value_kwargs[key] = value
-
-            # If data-value is a sequence and doesn't end with '_batch', create
-            # list of repeated sequences with length of n_instances.
-            else:
-                single_value_kwargs[key] = [value for _ in range(n_instances)]
-
-        n_batches = self.get_number_of_batches(
-            n_instances=n_instances, batch_size=batch_size
-        )
-
-        # Create iterator for batch index.
-        iterator = tqdm(
-            range(0, n_batches),
-            total=n_batches,
-            disable=not self.display_progressbar,
-        )
-
-        # Iterate over batch index
-        for batch_idx in iterator:
-            # Calculate instance index for start and end of batch.
-            batch_start = batch_size * batch_idx
-            batch_end = min(batch_size * (batch_idx + 1), n_instances)
-
-            # Create batch dictionary with all specified batch instance values
-            batch = {
-                key: value[batch_start:batch_end]
-                for key, value in batched_value_kwargs.items()
-            }
-
-            # Yield batch dictionary including single value keyword arguments.
-            yield {**batch, **single_value_kwargs}
-
-    def evaluate_instance(
-        self,
-        model: ModelInterface,
-        x: np.ndarray,
-        y: Optional[np.ndarray],
-        a: Optional[np.ndarray],
-        s: Optional[np.ndarray],
-        **kwargs,
-    ) -> Any:
-        """
-        This method from the parent Metric class needs to be defined to implement this abstract class.
-        However we use evalaute_batch() instead for BatchedMetric.
-
-        Returns
-        -------
-        Any
-        """
-        raise NotImplementedError(
-            "evaluate_instance() not implemented for BatchedMetric"
-        )
-
-
-class BatchedPerturbationMetric(BatchedMetric):
+class BatchedPerturbationMetric(BatchedMetric, ABC):
     """
     Implementation base BatchedPertubationMetric class.
 
@@ -412,14 +518,16 @@
         abs: bool,
         normalise: bool,
         normalise_func: Optional[Callable],
-        normalise_func_kwargs: Optional[Dict[str, Any]],
-        perturb_func: Callable,
-        perturb_func_kwargs: Optional[Dict[str, Any]],
+        normalise_func_kwargs: Optional[Dict[str, ...]],
+        perturb_func: PerturbFn,
+        perturb_func_kwargs: Optional[Dict[str, ...]],
         return_aggregate: bool,
-        aggregate_func: Optional[Callable],
+        aggregate_func: Optional[AggregateFn],
         default_plot_func: Optional[Callable],
         disable_warnings: bool,
         display_progressbar: bool,
+        nr_samples: int = None,
+        return_nan_when_prediction_changes: bool = None,
         **kwargs,
     ):
         """
@@ -469,63 +577,161 @@
 
         # Save perturbation metric attributes.
         self.perturb_func = perturb_func
+        self.perturb_func_kwargs = value_or_default(perturb_func_kwargs, lambda: {})
+        self.return_nan_when_prediction_changes = return_nan_when_prediction_changes
+        self.nr_samples = nr_samples
 
-        if perturb_func_kwargs is None:
-            perturb_func_kwargs = {}
-        self.perturb_func_kwargs = perturb_func_kwargs
-
-    @abstractmethod
-    def evaluate_batch(
+    @singledispatchmethod
+    def changed_prediction_indices(
         self,
         model: ModelInterface,
         x_batch: np.ndarray,
-        y_batch: np.ndarray,
-        a_batch: np.ndarray,
+        x_perturbed: np.ndarray,
+        **kwargs,
+    ) -> Sequence[int]:
+        """Predict on x_batch and x_perturbed, return indices of mismatched labels."""
+        if not self.return_nan_when_prediction_changes:
+            return []
+        og_labels = model.predict(x_batch).argmax(axis=-1)
+        perturbed_labels = model.predict(x_perturbed).argmax(axis=-1)
+        return np.reshape(np.argwhere(og_labels != perturbed_labels), -1)
+
+    @changed_prediction_indices.register
+    def _(
+        self,
+        model: TextClassifier,
+        x_batch: List[str] | np.ndarray,
+        x_perturbed: List[str] | np.ndarray,
+        **kwargs,
+    ) -> Sequence[int]:
+        if not self.return_nan_when_prediction_changes:
+            return []
+
+        if is_plain_text_perturbation(self.perturb_func):
+            og_logits = model.predict(x_batch)
+            perturbed_logits = model.predict(x_perturbed)
+        else:
+            og_logits = safe_as_array(model(x_batch, **kwargs))
+            perturbed_logits = safe_as_array(model(x_perturbed, **kwargs))
+
+        og_labels = np.argmax(og_logits, axis=-1)
+        perturbed_labels = np.argmax(perturbed_logits, axis=-1)
+
+        return np.reshape(np.argwhere(og_labels != perturbed_labels), -1)
+
+    def perturb_batch(self, x_batch: np.ndarray) -> np.ndarray:
+        """Apply self.perturb_fn to batch of images."""
+        batch_size = x_batch.shape[0]
+        size = np.size(x_batch[0])
+        ndim = np.ndim(x_batch[0])
+
+        return perturb_batch_fn(
+            perturb_func=self.perturb_func,
+            indices=np.tile(np.arange(0, size), (batch_size, 1)),
+            indexed_axes=np.arange(0, ndim),
+            arr=x_batch,
+            **self.perturb_func_kwargs,
+        )
+
+    def custom_preprocess(
+        self,
+        model: ModelInterface | TextClassifier,
+        x_batch: np.ndarray | List[str],
+        y_batch: Optional[np.ndarray],
+        a_batch: Optional[np.ndarray | List[Explanation]],
         s_batch: np.ndarray,
-    ) -> np.ndarray:
+        custom_batch: Optional[Any],
+    ):
         """
-        Evaluates model and attributes on a single data batch and returns the batched evaluation result.
-
-        This method needs to be implemented to use __call__().
+        Implementation of custom_preprocess_batch.
 
         Parameters
         ----------
-        model: ModelInterface
-            A ModelInteface that is subject to explanation.
+        model: torch.nn.Module, tf.keras.Model
+            A torch or tensorflow model e.g., torchvision.models that is subject to explanation.
         x_batch: np.ndarray
-            The input to be evaluated on a batch-basis.
+            A np.ndarray which contains the input data that are explained.
         y_batch: np.ndarray
-            The output to be evaluated on a batch-basis.
-        a_batch: np.ndarray
-            The explanation to be evaluated on a batch-basis.
-        s_batch: np.ndarray
-            The segmentation to be evaluated on a batch-basis.
+            A np.ndarray which contains the output labels that are explained.
+        a_batch: np.ndarray, optional
+            A np.ndarray which contains pre-computed attributions i.e., explanations.
+        s_batch: np.ndarray, optional
+            A np.ndarray which contains segmentation masks that matches the input.
+        custom_batch: any
+            Gives flexibility ot the user to use for evaluation, can hold any variable.
 
         Returns
         -------
-        np.ndarray
-            The batched evaluation results.
+        None
         """
-        raise NotImplementedError()
+        # Additional explain_func assert, as the one in prepare() won't be
+        # executed when a_batch != None.
+        asserts.assert_explain_func(explain_func=self.explain_func)
 
-    def evaluate_instance(
+    def batch_preprocess(
         self,
-        model: ModelInterface,
-        x: np.ndarray,
-        y: Optional[np.ndarray],
-        a: Optional[np.ndarray],
-        s: Optional[np.ndarray],
-        **kwargs,
-    ) -> Any:
+        model: ModelInterface | TextClassifier,
+        x_batch: np.ndarray | List[str],
+        y_batch: Optional[np.ndarray],
+        a_batch: Optional[np.ndarray | List[Explanation]],
+    ) -> Tuple[
+        Union[np.ndarray, List[str]],
+        np.ndarray,
+        Union[np.ndarray, List[Explanation]],
+        Optional[Any],
+    ]:
+        """
+        For text classification + plain-text perturb_func we need to pre-compute
+        perturbations, and then pad all them, so all plain-text sequences have same number of tokens.
+        We also hook into tokenizer.batch_encode to prevent removing of added padded tokens.
         """
-        This method from the parent Metric class needs to be defined to implement this abstract class.
-        However we use evalaute_batch() instead for BatchedMetric.
+        if "NLP" not in self.data_domain_applicability:
+            return super().batch_preprocess(model, x_batch, y_batch, a_batch)
+        if not is_plain_text_perturbation(self.perturb_func):
+            return super().batch_preprocess(model, x_batch, y_batch, a_batch)
+
+        batch_size = len(x_batch)
+        # For plain text we need to first collect perturbations, then
+        # "pre-tokenize" them, so we end up with sequences all the same length.
+        x_perturbed_batches = [x_batch] + [
+            self.perturb_func(x_batch, **self.perturb_func_kwargs)
+            for _ in range(self.nr_samples)
+        ]
+        x_perturbed_batches = np.reshape(x_perturbed_batches, -1).tolist()
+        x_perturbed_ids, _ = model.tokenizer.get_input_ids(x_perturbed_batches)
+        x_perturbed_batches = model.tokenizer.batch_decode(x_perturbed_ids)
+        x_batch, x_perturbed_batches = (
+            x_perturbed_batches[:batch_size],
+            x_perturbed_batches[batch_size:],
+        )
+        x_perturbed_batches = np.reshape(x_perturbed_batches, (self.nr_samples, -1))
+        x_perturbed_batches = [i.tolist() for i in x_perturbed_batches]
+
+        # Leave padding tokens in.
+        model.tokenizer.batch_encode = partial(
+            model.tokenizer.batch_encode, add_special_tokens=False
+        )
+        x_batch, y_batch, a_batch, _ = super().batch_preprocess(
+            model, x_batch, y_batch, a_batch
+        )
+        return x_batch, y_batch, a_batch, x_perturbed_batches
 
-        Parameters
-        ----------
-        kwargs: optional
-            Keyword arguments.
+    def batch_postprocess(
+        self,
+        model: ModelInterface | TextClassifier,
+        x_batch: np.ndarray | List[str],
+        y_batch: np.ndarray,
+        a_batch: np.ndarray | List[Explanation],
+        s_batch: Optional[np.ndarray],
+        score: np.ndarray,
+    ) -> np.ndarray:
         """
-        raise NotImplementedError(
-            "evaluate_instance() not implemented for BatchedPerturbationMetric"
+        Since for text classification + plain-text perturb_func we modified tokenizer.batch_encode's behaviour,
+        here we restore the default one.
+        """
+        if isinstance(x_batch[0], str):
+            if is_plain_text_perturbation(self.perturb_func):
+                model.tokenizer.batch_encode = model.tokenizer.batch_encode.func
+        return super().batch_postprocess(
+            model, x_batch, y_batch, a_batch, s_batch, score
         )
Index: quantus/__init__.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/quantus/__init__.py b/quantus/__init__.py
--- a/quantus/__init__.py	(revision c2255b793bae21a32b1274275ae60b44cdd94d7b)
+++ b/quantus/__init__.py	(date 1681078345878)
@@ -5,7 +5,7 @@
 # Quantus project URL: <https://github.com/understandable-machine-intelligence-lab/Quantus>.
 
 # Expose quantus.evaluate to the user.
-from quantus.evaluation import evaluate
+from quantus.evaluation import evaluate, evaluate_nlp
 
 # Expose quantus.explain to the user.
 from quantus.functions.explanation_func import explain
@@ -18,3 +18,10 @@
 
 # Expose quantus.helpers.constants to the user.
 from quantus.helpers.constants import *
+
+import logging
+
+logging.basicConfig(
+    format="%(asctime)s:[%(filename)s:%(lineno)s->%(funcName)s()]:%(levelname)s: %(message)s",
+    level=logging.DEBUG,
+)
Index: quantus/evaluation.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/quantus/evaluation.py b/quantus/evaluation.py
--- a/quantus/evaluation.py	(revision c2255b793bae21a32b1274275ae60b44cdd94d7b)
+++ b/quantus/evaluation.py	(date 1681078345879)
@@ -5,31 +5,65 @@
 # Quantus is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 # You should have received a copy of the GNU Lesser General Public License along with Quantus. If not, see <https://www.gnu.org/licenses/>.
 # Quantus project URL: <https://github.com/understandable-machine-intelligence-lab/Quantus>.
+from __future__ import annotations
+
 import warnings
-from typing import Union, Callable, Dict, Optional, List
+from functools import partial
+from typing import (
+    Union,
+    Callable,
+    Dict,
+    Optional,
+    List,
+    TYPE_CHECKING,
+    Mapping,
+    Tuple,
+)
 
 import numpy as np
+from tqdm.auto import tqdm
 
+from quantus.functions.explanation_func import explain
 from quantus.helpers import asserts
 from quantus.helpers import utils
 from quantus.helpers import warn
+from quantus.helpers.collection_utils import (
+    value_or_default,
+    batch_inputs,
+    flatten,
+)
 from quantus.helpers.model.model_interface import ModelInterface
-from quantus.functions.explanation_func import explain
+from quantus.helpers.model.text_classifier import TextClassifier
+from quantus.helpers.nlp_utils import map_explanations
+from quantus.helpers.tf_utils import is_tensorflow_model
+from quantus.helpers.types import (
+    Explanation,
+    ExplainFn,
+    PersistFn,
+    CallKwargs,
+)
+from quantus.metrics.base_batched import BatchedMetric
+
+if TYPE_CHECKING:
+    from tensorflow import keras
+    import torch.nn as nn
+
+    from quantus.helpers.types import ModelT, TokenizerT
 
 
 def evaluate(
-    metrics: Dict,
-    xai_methods: Union[Dict[str, Callable], Dict[str, Dict], Dict[str, np.ndarray]],
-    model: ModelInterface,
+    metrics: dict,
+    xai_methods: dict[str, Callable] | dict[str, dict] | dict[str, np.ndarray],
+    model: ModelInterface | nn.Module | keras.Model,
     x_batch: np.ndarray,
     y_batch: np.ndarray,
-    s_batch: Union[np.ndarray, None] = None,
+    s_batch: np.ndarray | None = None,
     agg_func: Callable = lambda x: x,
     progress: bool = False,
-    explain_func_kwargs: Optional[dict] = None,
-    call_kwargs: Union[Dict, Dict[str, Dict]] = None,
+    explain_func_kwargs: dict | None = None,
+    call_kwargs: dict | dict[str, dict] = None,
     **kwargs,
-) -> Optional[dict]:
+) -> dict | None:
     """
     A method to evaluate some explanation methods given some metrics.
 
@@ -85,8 +119,8 @@
     elif not isinstance(call_kwargs, Dict):
         raise TypeError("xai_methods type is not Dict[str, Dict].")
 
-    results: Dict[str, dict] = {}
-    explain_funcs: Dict[str, Callable] = {}
+    results: dict[str, dict] = {}
+    explain_funcs: dict[str, Callable] = {}
 
     if not isinstance(xai_methods, dict):
         "xai_methods type is not in: Dict[str, Callable], Dict[str, Dict], Dict[str, np.ndarray]."
@@ -171,3 +205,120 @@
                 )
 
     return results
+
+
+def evaluate_nlp(
+    *,
+    metrics: Mapping[str, BatchedMetric],
+    model: ModelT,
+    x_batch: list[str],
+    y_batch: np.ndarray | None,
+    explain_func: ExplainFn | None,
+    explain_func_kwargs: dict[str, ...] | None = None,
+    batch_size: int = 64,
+    tokenizer: TokenizerT | None = None,
+    verbose: bool = True,
+    persist_callback: PersistFn | None = None,
+) -> dict[str, np.ndarray | dict[str, np.ndarray]]:
+    for i in metrics.values():
+        if "NLP" not in i.data_domain_applicability:
+            raise ValueError(f"{i} does not support NLP.")
+
+    (
+        model,
+        y_batch,
+        a_batch,
+        metric_wise_a_batch,
+    ) = prepare_text_classification_metrics_inputs(
+        metrics=metrics,
+        model=model,
+        x_batch=x_batch,
+        y_batch=y_batch,
+        explain_func=explain_func,
+        explain_func_kwargs=explain_func_kwargs,
+        batch_size=batch_size,
+        tokenizer=tokenizer,
+    )
+
+    pbar = tqdm(total=len(metrics.keys()), disable=not verbose, desc="Evaluation...")
+
+    result = {}
+
+    with pbar as pbar:
+        for metric_name, metric_instance in metrics.items():
+            pbar.desc = f"Evaluating {metric_name}"
+            if metric_name in metric_wise_a_batch:
+                a_batch_for_metric = metric_wise_a_batch[metric_name]
+            else:
+                a_batch_for_metric = a_batch
+
+            scores = metric_instance(
+                model=model,
+                x_batch=x_batch,
+                y_batch=y_batch,
+                a_batch=a_batch_for_metric,
+                explain_func=explain_func,
+                explain_func_kwargs=explain_func_kwargs,
+                batch_size=batch_size,
+                channel_first=None,
+                model_predict_kwargs=None,
+                softmax=None,
+            )
+            result[metric_name] = scores
+
+            if persist_callback is not None:
+                persist_callback(metric_name, explain_func_kwargs, scores)
+            pbar.update()
+
+    return result
+
+
+def prepare_text_classification_metrics_inputs(
+    metrics: Mapping[str, BatchedMetric],
+    model: ModelT,
+    x_batch: list[str],
+    y_batch: np.ndarray | None,
+    explain_func: ExplainFn | None,
+    explain_func_kwargs: dict[str, ...] | None,
+    batch_size: int,
+    tokenizer,
+) -> tuple[TextClassifier, np.ndarray, list[Explanation], dict[str, CallKwargs]]:
+    if is_tensorflow_model(model):
+        model_predict_kwargs = dict(batch_size=batch_size, verbose=0)
+    else:
+        model_predict_kwargs = dict()
+
+    model_wrapper = utils.get_wrapped_text_classifier(
+        model=model, model_predict_kwargs=model_predict_kwargs, tokenizer=tokenizer
+    )
+    if y_batch is None:
+        y_batch = model_wrapper.predict(x_batch).argmax(axis=-1)
+    explain_func_kwargs = value_or_default(explain_func_kwargs, lambda: {})
+
+    x_batches = batch_inputs(x_batch, batch_size)
+    y_batches = batch_inputs(y_batch, batch_size)
+
+    a_batches = []
+    for x, y in zip(x_batches, y_batches):
+        a = explain_func(model_wrapper, x, y, **explain_func_kwargs)
+        a_batches.append(a)
+
+    a_batch = flatten(a_batches)
+
+    metric_wise_a_batch = {}
+    for name, metric in metrics.items():
+        a_batch_for_metric = None
+
+        if metric.normalise:
+            a_batch_for_metric = map_explanations(
+                a_batch, partial(metric.normalise_func, **metric.normalise_func_kwargs)
+            )
+        if metric.abs:
+            a_batch_for_metric = map_explanations(
+                value_or_default(a_batch_for_metric, lambda: a_batch), np.abs
+            )
+
+        if a_batch_for_metric is not None:
+            metric_wise_a_batch[name] = a_batch_for_metric
+
+    return model_wrapper, y_batch, a_batch, metric_wise_a_batch
Index: quantus/py.typed
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/quantus/py.typed b/quantus/py.typed
new file mode 100644
--- /dev/null	(date 1681078345885)
+++ b/quantus/py.typed	(date 1681078345885)
@@ -0,0 +1,1 @@
+# Marker file for PEP 561.  The mypy package uses inline types.
Index: tests/helpers/test_explanation_func.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/tests/helpers/test_explanation_func.py b/tests/helpers/test_explanation_func.py
--- a/tests/helpers/test_explanation_func.py	(revision c2255b793bae21a32b1274275ae60b44cdd94d7b)
+++ b/tests/helpers/test_explanation_func.py	(date 1681078327804)
@@ -6,6 +6,7 @@
 
 from quantus.functions.explanation_func import *
 from quantus.functions.normalise_func import normalise_by_max
+from quantus.helpers.model.model_interface import ModelInterface
 
 
 @pytest.mark.explain_func
Index: tests/helpers/test_explanation_func_nlp.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/tests/helpers/test_explanation_func_nlp.py b/tests/helpers/test_explanation_func_nlp.py
new file mode 100644
--- /dev/null	(date 1681078345893)
+++ b/tests/helpers/test_explanation_func_nlp.py	(date 1681078345893)
@@ -0,0 +1,123 @@
+from typing import List, Callable
+
+import numpy as np
+import pytest
+import tensorflow as tf
+
+from quantus.functions.explanation_func import explain
+from quantus.functions.nlp_explanation_func import ShapConfig
+from quantus.functions.nlp_explanation_func.lime import LimeConfig
+from quantus.functions.nlp_explanation_func.tf_explanation_func import (
+    IntGradConfig,
+    NoiseGradConfig,
+    NoiseGradPlusPlusConfig,
+)
+from quantus.helpers.tf_utils import is_xla_compatible_platform
+
+
+def unk_token_baseline_func() -> Callable:
+    unknown_token = tf.constant(np.load("tests/assets/unknown_token_embedding.npy"))
+
+    @tf.function(reduce_retracing=True, jit_compile=is_xla_compatible_platform())
+    def unk_token_baseline(x):
+        return unknown_token
+
+    return unk_token_baseline
+
+
+@pytest.mark.nlp
+@pytest.mark.parametrize(
+    "kwargs",
+    [
+        {"method": "GradNorm"},
+        {"method": "GradXInput"},
+        {"method": "IntGrad", "config": IntGradConfig(batch_interpolated_inputs=False)},
+        # It is not really slow, but rather running it with xdist can crash runner with OOM.
+        pytest.param({"method": "IntGrad"}, marks=pytest.mark.slow),
+        {
+            "method": "IntGrad",
+            "config": IntGradConfig(
+                baseline_fn=unk_token_baseline_func(), batch_interpolated_inputs=False
+            ),
+        },
+        {
+            "method": "NoiseGrad",
+            "config": NoiseGradConfig(n=2, explain_fn="GradXInput"),
+        },
+        {
+            "method": "NoiseGrad++",
+            "config": NoiseGradPlusPlusConfig(
+                n=2, m=2, explain_fn="GradNorm", noise_type="additive"
+            ),
+        },
+        {"method": "LIME", "config": LimeConfig(num_samples=5)},
+        {"method": "SHAP", "config": ShapConfig(max_evals=5)},
+    ],
+    ids=[
+        "GradNorm",
+        "GradXInput",
+        "IntGrad iterative",
+        "IntGrad batched",
+        "IntGrad [UNK] baseline",
+        "NoiseGrad",
+        "NoiseGrad++",
+        "LIME",
+        "SHAP",
+    ],
+)
+def test_tf_model(tf_sst2_model_wrapper, sst2_dataset, kwargs):
+    a_batch = explain(
+        tf_sst2_model_wrapper,
+        inputs=sst2_dataset["x_batch"],
+        targets=sst2_dataset["y_batch"],
+        **kwargs,
+    )
+    assert len(a_batch) == 8
+    for tokens, scores in a_batch:
+        assert isinstance(tokens, List)
+        # assert isinstance(scores, (np.ndarray, tf.Tensor))
+        assert len(scores.shape) == 1
+
+
+@pytest.mark.nlp
+@pytest.mark.parametrize(
+    "kwargs",
+    [
+        {"method": "GradNorm"},
+        {"method": "GradXInput"},
+        {"method": "IntGrad"},
+        {
+            "method": "NoiseGrad",
+            "explain_fn": "GradXInput",
+            "config": NoiseGradConfig(n=2),
+        },
+        {
+            "method": "NoiseGrad++",
+            "explain_fn": "GradXInput",
+            "config": NoiseGradPlusPlusConfig(n=2, m=2, noise_type="additive"),
+        },
+        {"method": "LIME", "config": LimeConfig(num_samples=5)},
+        {"method": "SHAP", "config": ShapConfig(max_evals=5)},
+    ],
+    ids=[
+        "GradNorm",
+        "GradXInput",
+        "IntGrad",
+        "NoiseGrad",
+        "NoiseGrad++",
+        "LIME",
+        "SHAP",
+    ],
+)
+def test_torch_model(torch_sst2_model_wrapper, sst2_dataset, kwargs):
+    a_batch = explain(
+        torch_sst2_model_wrapper,
+        inputs=sst2_dataset["x_batch"],
+        targets=sst2_dataset["y_batch"],
+        **kwargs,
+    )
+    assert len(a_batch) == 8
+    for tokens, scores in a_batch:
+        assert isinstance(tokens, List)
+        assert isinstance(scores, np.ndarray)
+        assert scores.ndim == 1
Index: tests/helpers/test_norm_func.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/tests/helpers/test_norm_func.py b/tests/helpers/test_norm_func.py
--- a/tests/helpers/test_norm_func.py	(revision c2255b793bae21a32b1274275ae60b44cdd94d7b)
+++ b/tests/helpers/test_norm_func.py	(date 1681078345893)
@@ -8,7 +8,7 @@
 
 @pytest.fixture
 def atts_norm_ones():
-    return np.ones((10))
+    return np.ones(10)
 
 
 @pytest.fixture
@@ -26,7 +26,7 @@
 )
 def test_fro_norm(data: np.ndarray, params: dict, expected: Union[float, dict, bool]):
     out = fro_norm(a=data)
-    assert out == expected, "Test failed."
+    assert np.allclose(out, expected)
 
 
 @pytest.mark.norm_func
@@ -39,7 +39,7 @@
 )
 def test_linf_norm(data: np.ndarray, params: dict, expected: Union[float, dict, bool]):
     out = linf_norm(a=data)
-    assert out == expected, "Test failed."
+    assert np.allclose(out, expected)
 
 
 @pytest.mark.norm_func
@@ -50,6 +50,6 @@
         (lazy_fixture("atts_norm_fill"), {}, 11.40175425099138),
     ],
 )
-def test_l2_norm(data: dict, params: dict, expected: Union[float, dict, bool]):
+def test_l2_norm(data, params: dict, expected: Union[float, dict, bool]):
     out = l2_norm(a=data)
-    assert out == expected, "Test failed."
+    assert np.allclose(out, expected)
Index: tests/helpers/test_normalise_func.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/tests/helpers/test_normalise_func.py b/tests/helpers/test_normalise_func.py
--- a/tests/helpers/test_normalise_func.py	(revision c2255b793bae21a32b1274275ae60b44cdd94d7b)
+++ b/tests/helpers/test_normalise_func.py	(date 1681078308178)
@@ -400,3 +400,25 @@
 ):
     out = normalise_by_average_second_moment_estimate(a=data, **params)
     assert np.all(out == expected), f"Test failed. (expected: {expected}, is: {out})"
+
+
+@pytest.mark.normalise_func
+@pytest.mark.parametrize(
+    "a_batch",
+    [
+        np.random.default_rng(0).normal(size=8),
+        np.random.default_rng(0).normal(size=(8, 32)),
+    ],
+    ids=["1D", "2D"],
+)
+def test_normalise_func(a_batch):
+    result = normalize_sum_to_1(a_batch)
+    assert np.allclose(np.sum(np.abs(result), axis=-1), 1.0)
+
+
+@pytest.mark.normalise_func
+def test_invalid_input_shape():
+    x_batch = np.random.default_rng(0).normal(size=(8, 32, 32))
+    with pytest.raises(ValueError):
+        normalize_sum_to_1(x_batch)
+
Index: tests/helpers/test_pytorch_model.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/tests/helpers/test_pytorch_model.py b/tests/helpers/test_pytorch_model.py
--- a/tests/helpers/test_pytorch_model.py	(revision c2255b793bae21a32b1274275ae60b44cdd94d7b)
+++ b/tests/helpers/test_pytorch_model.py	(date 1681078327804)
@@ -215,7 +215,7 @@
 
     for layer_name, random_layer_model in model.get_random_layer_generator():
         layer = getattr(model.get_model(), layer_name).parameters()
-        new_layer = getattr(random_layer_model, layer_name).parameters()
+        new_layer = getattr(random_layer_model.get_model(), layer_name).parameters()
 
         assert layer != new_layer, "Test failed."
 
Index: tests/helpers/test_similarity_func.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/tests/helpers/test_similarity_func.py b/tests/helpers/test_similarity_func.py
--- a/tests/helpers/test_similarity_func.py	(revision c2255b793bae21a32b1274275ae60b44cdd94d7b)
+++ b/tests/helpers/test_similarity_func.py	(date 1681078327805)
@@ -213,7 +213,7 @@
     data: np.ndarray, params: dict, expected: Union[float, dict, bool]
 ):
     out = abs_difference(a=data["a"], b=data["b"])
-    assert round(out, 2) == expected, "Test failed."
+    assert np.allclose(np.round(out, 2), expected)
 
 
 @pytest.mark.similar_func
@@ -241,7 +241,7 @@
 def test_ssim(data: np.ndarray, params: dict, expected: Union[float, dict, bool]):
     """Calculate Structural Similarity Index Measure of two images (or explanations)."""
     out = ssim(a=data["a"], b=data["b"])
-    assert round(out, 2) == expected, "Test failed."
+    assert np.allclose(np.round(out, 2), expected)
 
 
 @pytest.mark.similar_func
Index: tests/helpers/test_tf_model.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/tests/helpers/test_tf_model.py b/tests/helpers/test_tf_model.py
--- a/tests/helpers/test_tf_model.py	(revision c2255b793bae21a32b1274275ae60b44cdd94d7b)
+++ b/tests/helpers/test_tf_model.py	(date 1681078345893)
@@ -1,7 +1,6 @@
 from functools import reduce
 from operator import and_
 from typing import Union
-import tensorflow as tf
 
 import numpy as np
 import pytest
@@ -142,7 +141,7 @@
 
     for layer_name, random_layer_model in model.get_random_layer_generator():
         old = old_weights[layer_name]
-        new = random_layer_model.get_layer(layer_name).get_weights()
+        new = random_layer_model.get_model().get_layer(layer_name).get_weights()
 
         assert reduce(
             and_, [not np.allclose(x, y) for x, y in zip(old, new)]
Index: tests/helpers/test_utils_2.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/tests/helpers/test_utils_2.py b/tests/helpers/test_utils_2.py
new file mode 100644
--- /dev/null	(date 1681078345893)
+++ b/tests/helpers/test_utils_2.py	(date 1681078345893)
@@ -0,0 +1,41 @@
+from typing import List
+
+import numpy as np
+import pytest
+
+from quantus.helpers.utils import get_logits_for_labels
+from quantus.helpers.collection_utils import batch_inputs
+
+# test utils is already 1k lines long, so I added these tests in separate file.
+
+
+@pytest.mark.nlp
+def test_batch_list():
+    flat_list = list(range(1000))
+    batched_list = batch_inputs(flat_list, batch_size=32)
+    assert isinstance(batched_list, List)
+    for index, element in enumerate(batched_list):
+        assert isinstance(element, List)
+        if index != len(batched_list) - 1:
+            assert len(element) == 32
+
+
+@pytest.mark.nlp
+def test_list_is_divisible():
+    flat_list = list(range(960))
+    batched_list = batch_inputs(flat_list, batch_size=32)
+    assert isinstance(batched_list, List)
+    for index, element in enumerate(batched_list):
+        assert isinstance(element, List)
+        assert len(element) == 32
+
+
+logits = np.random.uniform(size=(8, 2))
+y_batch = np.asarray([0, 0, 1, 1, 0, 0, 1, 1])
+expected_logits = np.asarray([i[j] for i, j in zip(logits, y_batch)])
+
+
+@pytest.mark.nlp
+def test_get_logits_for_labels():
+    result = get_logits_for_labels(logits, y_batch)
+    assert (result == expected_logits).all()
Index: tests/metrics/conftest.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/tests/metrics/conftest.py b/tests/metrics/conftest.py
--- a/tests/metrics/conftest.py	(revision c2255b793bae21a32b1274275ae60b44cdd94d7b)
+++ b/tests/metrics/conftest.py	(date 1681078308179)
@@ -2,6 +2,14 @@
 import numpy as np
 from pytest_mock import MockerFixture
 
+predict_functions = (
+    "quantus.helpers.model.tf_model.TensorFlowModel.predict",
+    "quantus.helpers.model.pytorch_model.PyTorchModel.predict",
+
+    "quantus.helpers.model.tf_hf_model.TFHuggingFaceTextClassifier.predict",
+    "quantus.helpers.model.torch_hf_model.TorchHuggingFaceTextClassifier.predict",
+)
+
 
 @pytest.fixture(scope="function")
 def mock_prediction_changed(mocker: MockerFixture):
@@ -9,17 +17,15 @@
     # generated pseudo-logits will always stay the same.
     rng = np.random.default_rng(42)
 
-    def mock_predict(self, x_batch, *args):
+    def mock_predict(self, x_batch, *args, **kwargs):
         # Event though technically, this is a stub, we called fixture and function `mock_`
         # to be aligned with pytest_mock naming.
         batch_size = len(x_batch)
         y_batch = rng.uniform(size=(batch_size, 10), low=-100, high=100)
         return y_batch
 
-    mocker.patch("quantus.helpers.model.tf_model.TensorFlowModel.predict", mock_predict)
-    mocker.patch(
-        "quantus.helpers.model.pytorch_model.PyTorchModel.predict", mock_predict
-    )
+    for i in predict_functions:
+        mocker.patch(i, mock_predict)
     yield
     # Restore original behaviour after test finished execution.
     mocker.resetall()
Index: tests/metrics/test_faithfulness_metrics.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/tests/metrics/test_faithfulness_metrics.py b/tests/metrics/test_faithfulness_metrics.py
--- a/tests/metrics/test_faithfulness_metrics.py	(revision c2255b793bae21a32b1274275ae60b44cdd94d7b)
+++ b/tests/metrics/test_faithfulness_metrics.py	(date 1681078345894)
@@ -292,7 +292,7 @@
     )[0]
 
     assert np.all(
-        ((scores >= expected["min"]) & (scores <= expected["max"]))
+        (scores >= expected["min"]) & (scores <= expected["max"])
     ), "Test failed."
 
 
@@ -1439,6 +1439,7 @@
     assert type(metric.get_auc_score) == expected["type"], "Test failed."
 
 
+@pytest.mark.xfail
 @pytest.mark.faithfulness
 @pytest.mark.parametrize(
     "model,data,params,expected",
Index: tests/metrics/test_localisation_metrics.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/tests/metrics/test_localisation_metrics.py b/tests/metrics/test_localisation_metrics.py
--- a/tests/metrics/test_localisation_metrics.py	(revision c2255b793bae21a32b1274275ae60b44cdd94d7b)
+++ b/tests/metrics/test_localisation_metrics.py	(date 1681078345894)
@@ -325,7 +325,11 @@
     """Load a pre-trained LeNet classification model (architecture at quantus/helpers/models)."""
     model = LeNetAdaptivePooling(input_shape=(1, 28, 28))
     model.load_state_dict(
-        torch.load("tests/assets/mnist", map_location="cpu", pickle_module=pickle)
+        torch.load(
+            "tests/assets/weights/mnist.pickle",
+            map_location="cpu",
+            pickle_module=pickle,
+        )
     )
     return model
 
@@ -350,7 +354,11 @@
     """Load a pre-trained LeNet classification model (architecture at quantus/helpers/models)."""
     model = LeNetAdaptivePooling(input_shape=(3, 32, 32))
     model.load_state_dict(
-        torch.load("tests/assets/cifar10", map_location="cpu", pickle_module=pickle)
+        torch.load(
+            "tests/assets/weights/lenet_cifar10.pickle",
+            map_location="cpu",
+            pickle_module=pickle,
+        )
     )
     return model
 
Index: tests/metrics/test_randomisation_metrics.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/tests/metrics/test_randomisation_metrics.py b/tests/metrics/test_randomisation_metrics.py
--- a/tests/metrics/test_randomisation_metrics.py	(revision c2255b793bae21a32b1274275ae60b44cdd94d7b)
+++ b/tests/metrics/test_randomisation_metrics.py	(date 1681078345894)
@@ -1,19 +1,19 @@
-from typing import Union
-
+import numpy as np
 import pytest
 from pytest_lazyfixture import lazy_fixture
-import numpy as np
 
 from quantus.functions.explanation_func import explain
-from quantus.functions.similarity_func import correlation_spearman, correlation_pearson
-from quantus.helpers.model.model_interface import ModelInterface
+from quantus.functions.similarity_func import (
+    correlation_spearman,
+    correlation_pearson,
+    correlation_kendall_tau,
+)
 from quantus.metrics.randomisation import ModelParameterRandomisation, RandomLogit
 
 
-def explain_func_stub(*args, **kwargs):
+def explain_func_stub(model, inputs, targets, **kwargs):
     # tf-explain does not support 2D inputs
-    input_shape = kwargs.get("inputs").shape
-    return np.random.uniform(low=0, high=0.5, size=input_shape)
+    return np.random.default_rng(42).uniform(low=0, high=0.5, size=inputs.shape)
 
 
 @pytest.mark.randomisation
@@ -100,7 +100,7 @@
             },
             {"min": -1.0, "max": 1.0},
         ),
-        (
+        pytest.param(
             lazy_fixture("load_mnist_model_tf"),
             lazy_fixture("load_mnist_images_tf"),
             {
@@ -119,6 +119,7 @@
                 },
             },
             {"min": -1.0, "max": 1.0},
+            marks=pytest.mark.xfail,
         ),
         (
             lazy_fixture("load_1d_3ch_conv_model_tf"),
@@ -141,7 +142,7 @@
             },
             {"exception": ValueError},
         ),
-        (
+        pytest.param(
             lazy_fixture("load_mnist_model_tf"),
             lazy_fixture("load_mnist_images_tf"),
             {
@@ -161,6 +162,7 @@
                 },
             },
             {"min": -1.0, "max": 1.0},
+            marks=pytest.mark.xfail,
         ),
         (
             lazy_fixture("load_1d_3ch_conv_model"),
@@ -236,15 +238,47 @@
                 },
                 "call": {"explain_func": explain_func_stub},
             },
+            {"min": -1.0, "max": 1.0},
+        ),
+        pytest.param(
+            lazy_fixture("tf_sst2_model"),
+            lazy_fixture("sst2_dataset"),
+            {
+                "a_batch_generate": False,
+                "init": {
+                    "layer_order": "independent",
+                    "similarity_func": correlation_kendall_tau,
+                    "abs": True,
+                    "disable_warnings": True,
+                },
+                "call": {"explain_func": explain},
+            },
+            {"min": -1.0, "max": 1.01},
+            marks=pytest.mark.nlp,
+        ),
+        pytest.param(
+            lazy_fixture("torch_sst2_model"),
+            lazy_fixture("sst2_dataset"),
+            {
+                "a_batch_generate": False,
+                "init": {
+                    "layer_order": "independent",
+                    "similarity_func": correlation_kendall_tau,
+                    "abs": True,
+                    "disable_warnings": True,
+                },
+                "call": {"explain_func": explain},
+            },
             {"min": -1.0, "max": 1.01},
+            marks=pytest.mark.nlp,
         ),
     ],
 )
 def test_model_parameter_randomisation(
-    model: ModelInterface,
-    data: np.ndarray,
-    params: dict,
-    expected: Union[float, dict, bool],
+    model,
+    data,
+    params,
+    expected,
 ):
     x_batch, y_batch = (
         data["x_batch"],
@@ -292,7 +326,7 @@
         ), "Test failed."
     else:
         assert all(
-            ((s > expected["min"]) & (s < expected["max"]))
+            ((s >= expected["min"]) & (s <= expected["max"]))
             for layer, scores in scores_layers.items()
             for s in scores
         ), "Test failed."
@@ -451,14 +485,46 @@
                 "call": {"explain_func": explain_func_stub},
             },
             {"min": -1.0, "max": 1.01},
+        ),
+        pytest.param(
+            lazy_fixture("tf_sst2_model"),
+            lazy_fixture("sst2_dataset"),
+            {
+                "a_batch_generate": False,
+                "init": {
+                    "num_classes": 2,
+                    "normalise": True,
+                    "abs": True,
+                    "disable_warnings": True,
+                },
+                "call": {"explain_func": explain},
+            },
+            {"min": -1.0, "max": 1.01},
+            marks=pytest.mark.nlp,
+        ),
+        pytest.param(
+            lazy_fixture("torch_sst2_model"),
+            lazy_fixture("sst2_dataset"),
+            {
+                "a_batch_generate": False,
+                "init": {
+                    "num_classes": 2,
+                    "normalise": True,
+                    "abs": True,
+                    "disable_warnings": True,
+                },
+                "call": {"explain_func": explain},
+            },
+            {"min": -1.0, "max": 1.01},
+            marks=pytest.mark.nlp,
         ),
     ],
 )
 def test_random_logit(
-    model: ModelInterface,
-    data: np.ndarray,
-    params: dict,
-    expected: Union[float, dict, bool],
+    model,
+    data,
+    params,
+    expected,
 ):
     x_batch, y_batch = (
         data["x_batch"],
Index: tests/metrics/test_relative_stability.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/tests/metrics/test_relative_stability.py b/tests/metrics/test_relative_stability.py
--- a/tests/metrics/test_relative_stability.py	(revision c2255b793bae21a32b1274275ae60b44cdd94d7b)
+++ b/tests/metrics/test_relative_stability.py	(date 1681078345894)
@@ -1,65 +1,57 @@
 from __future__ import annotations
 
+import functools
+
+import numpy as np
 import pytest
-import torch
 from pytest_lazyfixture import lazy_fixture
-from typing import Dict, TYPE_CHECKING
-import functools
 
-from quantus.functions.perturb_func import *
 from quantus.functions.explanation_func import explain
+from quantus.functions.perturb_func import (
+    typo_replacement,
+    spelling_replacement,
+    synonym_replacement,
+)
 from quantus.metrics.robustness import (
     RelativeInputStability,
     RelativeOutputStability,
     RelativeRepresentationStability,
 )
 
-if TYPE_CHECKING:
-    import tensorflow as tf
-
 # fmt: off
 RIS_CONSTRUCTOR = functools.partial(RelativeInputStability, nr_samples=5, disable_warnings=True)
 ROS_CONSTRUCTOR = functools.partial(RelativeOutputStability, nr_samples=5, disable_warnings=True)
 RRS_CONSTRUCTOR = functools.partial(RelativeRepresentationStability, nr_samples=5, disable_warnings=True)
-
-
 # fmt: on
 
 
-def predict(model: tf.keras.Model | torch.nn.Module, x_batch: np.ndarray) -> np.ndarray:
-    if isinstance(model, torch.nn.Module):
-        with torch.no_grad():
-            return model(torch.Tensor(x_batch)).argmax(axis=1).numpy()
-    else:
-        return model.predict(x_batch, verbose=0).argmax(1)
-
-
-@pytest.mark.robustness
-@pytest.mark.parametrize(
+relative_stability_tests = pytest.mark.parametrize(
     "model,data,init_kwargs,call_kwargs",
     [
-        (
+        pytest.param(
             lazy_fixture("load_mnist_model"),
             lazy_fixture("load_mnist_images"),
             {},
             {"explain_func_kwargs": {"method": "GradientShap"}},
+            id="mnist",
         ),
-        (
+        pytest.param(
             lazy_fixture("load_mnist_model"),
             lazy_fixture("load_mnist_images"),
             {
                 "abs": True,
                 "normalise": True,
                 "return_aggregate": True,
-                "return_nan_when_prediction_changes": False,
             },
             {},
+            id="mnist_aggregate",
         ),
-        (
+        pytest.param(
             lazy_fixture("load_mnist_model_tf"),
             lazy_fixture("load_mnist_images_tf"),
             {},
             {"explain_func_kwargs": {"method": "IntegratedGradients"}},
+            id="tf_mnist",
         ),
         (
             lazy_fixture("load_1d_3ch_conv_model"),
@@ -73,175 +65,172 @@
             {},
             {},
         ),
+        # ------------ NLP ------------
+        pytest.param(
+            lazy_fixture("tf_sst2_model"),
+            lazy_fixture("sst2_dataset"),
+            {"perturb_func": typo_replacement},
+            {},
+            marks=[pytest.mark.slow, pytest.mark.nlp],
+            id="tf_nlp_plain_text",
+        ),
+        pytest.param(
+            lazy_fixture("torch_sst2_model"),
+            lazy_fixture("sst2_dataset"),
+            {
+                "perturb_func": typo_replacement,
+            },
+            {},
+            marks=[pytest.mark.slow, pytest.mark.nlp],
+            id="torch_nlp_plain_text",
+        ),
+        pytest.param(
+            lazy_fixture("tf_sst2_model"),
+            lazy_fixture("sst2_dataset"),
+            {},
+            {},
+            marks=[pytest.mark.slow, pytest.mark.nlp],
+            id="tf_nlp_latent",
+        ),
+        pytest.param(
+            lazy_fixture("torch_sst2_model"),
+            lazy_fixture("sst2_dataset"),
+            {},
+            {},
+            marks=[pytest.mark.slow, pytest.mark.nlp],
+            id="torch_nlp_latent",
+        ),
     ],
 )
+
+
+@pytest.mark.robustness
+@relative_stability_tests
 def test_relative_input_stability(
-    model: tf.keras.Model, data: Dict[str, np.ndarray], init_kwargs, call_kwargs
+    model, data, init_kwargs, call_kwargs, sst2_tokenizer
 ):
-    ris = RIS_CONSTRUCTOR(**init_kwargs)
     x_batch = data["x_batch"]
-    y_batch = predict(model, x_batch)
-
+    ris = RIS_CONSTRUCTOR(return_nan_when_prediction_changes=False, **init_kwargs)
     result = ris(
         model=model,
         x_batch=x_batch,
-        y_batch=y_batch,
+        y_batch=data["y_batch"],
         explain_func=explain,
+        tokenizer=sst2_tokenizer,
         **call_kwargs,
     )
     result = np.asarray(result)
     assert (result != np.nan).all()
     if init_kwargs.get("return_aggregate", False):
-        assert result.shape == (1,)
+        assert result.shape == ()
     else:
-        assert result.shape[0] == x_batch.shape[0]
+        assert result.shape[0] == len(x_batch)
 
 
 @pytest.mark.robustness
-@pytest.mark.parametrize(
-    "model,data,init_kwargs,call_kwargs",
-    [
-        (
-            lazy_fixture("load_mnist_model"),
-            lazy_fixture("load_mnist_images"),
-            {},
-            {"explain_func_kwargs": {"method": "GradientShap"}},
-        ),
-        (
-            lazy_fixture("load_mnist_model"),
-            lazy_fixture("load_mnist_images"),
-            {
-                "abs": True,
-                "normalise": True,
-                "return_aggregate": True,
-                "return_nan_when_prediction_changes": False,
-            },
-            {},
-        ),
-        (
-            lazy_fixture("load_mnist_model_tf"),
-            lazy_fixture("load_mnist_images_tf"),
-            {},
-            {"explain_func_kwargs": {"method": "IntegratedGradients"}},
-        ),
-        (
-            lazy_fixture("load_1d_3ch_conv_model"),
-            lazy_fixture("almost_uniform_1d"),
-            {},
-            {},
-        ),
-        (
-            lazy_fixture("load_mnist_model"),
-            lazy_fixture("almost_uniform_2d_no_abatch"),
-            {},
-            {},
-        ),
-    ],
-)
+@relative_stability_tests
 def test_relative_output_stability(
-    model: tf.keras.Model, data: Dict[str, np.ndarray], init_kwargs, call_kwargs
+    model, data, init_kwargs, call_kwargs, sst2_tokenizer
 ):
-    ris = ROS_CONSTRUCTOR(**init_kwargs)
-
     x_batch = data["x_batch"]
-    y_batch = predict(model, x_batch)
+    ris = ROS_CONSTRUCTOR(return_nan_when_prediction_changes=False, **init_kwargs)
 
     result = ris(
         model=model,
         x_batch=x_batch,
-        y_batch=y_batch,
+        y_batch=data["y_batch"],
         explain_func=explain,
+        tokenizer=sst2_tokenizer,
         **call_kwargs,
     )
     result = np.asarray(result)
     assert (result != np.nan).all()
     if init_kwargs.get("return_aggregate", False):
-        assert result.shape == (1,)
+        assert result.shape == ()
     else:
-        assert result.shape[0] == x_batch.shape[0]
+        assert result.shape[0] == len(x_batch)
 
 
 @pytest.mark.robustness
-@pytest.mark.parametrize(
-    "model,data,init_kwargs,call_kwargs",
-    [
-        (
-            lazy_fixture("load_mnist_model"),
-            lazy_fixture("load_mnist_images"),
-            {},
-            {"explain_func_kwargs": {"method": "GradientShap"}},
-        ),
-        (
-            lazy_fixture("load_mnist_model"),
-            lazy_fixture("load_mnist_images"),
-            {
-                "abs": True,
-                "normalise": True,
-                "return_aggregate": True,
-                "return_nan_when_prediction_changes": False,
-            },
-            {},
-        ),
-        (
-            lazy_fixture("load_mnist_model_tf"),
-            lazy_fixture("load_mnist_images_tf"),
-            {},
-            {"explain_func_kwargs": {"method": "IntegratedGradients"}},
-        ),
-        (
-            lazy_fixture("load_1d_3ch_conv_model"),
-            lazy_fixture("almost_uniform_1d"),
-            {},
-            {},
-        ),
-        (
-            lazy_fixture("load_mnist_model"),
-            lazy_fixture("almost_uniform_2d_no_abatch"),
-            {},
-            {},
-        ),
-    ],
-)
+@relative_stability_tests
 def test_relative_representation_stability(
-    model: tf.keras.Model, data: Dict[str, np.ndarray], init_kwargs, call_kwargs
+    model, data, init_kwargs, call_kwargs, sst2_tokenizer
 ):
-    ris = RRS_CONSTRUCTOR(**init_kwargs)
-
     x_batch = data["x_batch"]
-    y_batch = predict(model, x_batch)
-
+    ris = RRS_CONSTRUCTOR(return_nan_when_prediction_changes=False, **init_kwargs)
     result = ris(
         model=model,
         x_batch=x_batch,
-        y_batch=y_batch,
+        y_batch=data["y_batch"],
         explain_func=explain,
+        tokenizer=sst2_tokenizer,
         **call_kwargs,
     )
     result = np.asarray(result)
     assert (result != np.nan).all()
     if init_kwargs.get("return_aggregate", False):
-        assert result.shape == (1,)
+        assert result.shape == ()
     else:
-        assert result.shape[0] == x_batch.shape[0]
+        assert result.shape[0] == len(x_batch)
 
 
 @pytest.mark.robustness
 @pytest.mark.parametrize(
-    "metric",
-    [RIS_CONSTRUCTOR, ROS_CONSTRUCTOR, RRS_CONSTRUCTOR],
-    ids=["RIS", "ROS", "RRS"],
+    "metric, model, data, call_kwargs",
+    [
+        (
+            RIS_CONSTRUCTOR,
+            lazy_fixture("load_mnist_model_tf"),
+            lazy_fixture("load_mnist_images_tf"),
+            {},
+        ),
+        (
+            ROS_CONSTRUCTOR,
+            lazy_fixture("load_mnist_model"),
+            lazy_fixture("load_mnist_images"),
+            {},
+        ),
+        (
+            RRS_CONSTRUCTOR,
+            lazy_fixture("load_mnist_model_tf"),
+            lazy_fixture("load_mnist_images_tf"),
+            {},
+        ),
+        # ------- NLP --------
+        pytest.param(
+            functools.partial(RIS_CONSTRUCTOR, perturb_func=spelling_replacement),
+            lazy_fixture("tf_sst2_model"),
+            lazy_fixture("sst2_dataset"),
+            {},
+            marks=pytest.mark.nlp,
+        ),
+        pytest.param(
+            functools.partial(ROS_CONSTRUCTOR, perturb_func=spelling_replacement),
+            lazy_fixture("tf_sst2_model"),
+            lazy_fixture("sst2_dataset"),
+            {},
+            marks=pytest.mark.nlp,
+        ),
+        pytest.param(
+            functools.partial(RRS_CONSTRUCTOR, perturb_func=synonym_replacement),
+            lazy_fixture("torch_sst2_model"),
+            lazy_fixture("sst2_dataset"),
+            {},
+            marks=pytest.mark.nlp,
+        ),
+    ],
+    ids=["RIS", "ROS", "RRS", "RIS_nlp", "ROS_nlp", "RRS_nlp"],
 )
 def test_return_nan(
-    metric, load_mnist_model_tf, load_mnist_images_tf, mock_prediction_changed
+    metric, model, data, call_kwargs, sst2_tokenizer, mock_prediction_changed
 ):
-    x_batch = load_mnist_images_tf["x_batch"]
-    y_batch = predict(load_mnist_model_tf, x_batch)
-
-    rs = metric()
+    rs = metric(return_nan_when_prediction_changes=True)
     result = rs(
-        model=load_mnist_model_tf,
-        x_batch=x_batch,
-        y_batch=y_batch,
+        model=model,
+        x_batch=data["x_batch"],
+        y_batch=data["y_batch"],
         explain_func=explain,
+        tokenizer=sst2_tokenizer,
+        **call_kwargs,
     )
-    assert np.isnan(result).any(), "Test Failed"
+    assert np.isnan(result).all()
Index: tests/metrics/test_robustness_metrics.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/tests/metrics/test_robustness_metrics.py b/tests/metrics/test_robustness_metrics.py
--- a/tests/metrics/test_robustness_metrics.py	(revision c2255b793bae21a32b1274275ae60b44cdd94d7b)
+++ b/tests/metrics/test_robustness_metrics.py	(date 1681078345894)
@@ -13,174 +13,108 @@
     LocalLipschitzEstimate,
     MaxSensitivity,
 )
+from quantus.functions.perturb_func import synonym_replacement, spelling_replacement
 
+# ----------------------- sensitivity -----------------------
 
-@pytest.mark.robustness
-@pytest.mark.parametrize(
-    "model,data,params,expected",
+sensitivity_tests = pytest.mark.parametrize(
+    "model,data,params",
     [
         (
             lazy_fixture("load_1d_3ch_conv_model"),
             lazy_fixture("almost_uniform_1d_no_abatch"),
             {
-                "init": {
-                    "lower_bound": 0.2,
-                    "disable_warnings": False,
-                    "display_progressbar": False,
-                },
-                "call": {
-                    "explain_func": explain,
-                    "explain_func_kwargs": {
-                        "method": "Saliency",
-                    },
-                },
-            },
-            {"min": 0.0, "max": 1.0},
-        ),
-        (
-            lazy_fixture("load_mnist_model"),
-            lazy_fixture("load_mnist_images"),
-            {
-                "init": {
-                    "lower_bound": 0.2,
-                    "nr_samples": 10,
-                    "disable_warnings": False,
-                    "display_progressbar": False,
-                },
-                "call": {
-                    "explain_func": explain,
-                    "explain_func_kwargs": {
-                        "method": "Saliency",
-                    },
-                },
-            },
-            {"min": 0.0, "max": 1.0},
-        ),
-        (
-            lazy_fixture("load_1d_3ch_conv_model"),
-            lazy_fixture("almost_uniform_1d_no_abatch"),
-            {
-                "init": {
-                    "lower_bound": 0.2,
-                    "disable_warnings": True,
-                    "display_progressbar": False,
-                },
-                "call": {
-                    "explain_func": explain,
-                    "explain_func_kwargs": {
-                        "method": "Saliency",
-                    },
-                },
-            },
-            {"min": 0.0, "max": 1.0},
-        ),
-        (
-            lazy_fixture("load_mnist_model"),
-            lazy_fixture("load_mnist_images"),
-            {
-                "init": {
-                    "lower_bound": 0.2,
-                    "nr_samples": 10,
-                    "disable_warnings": True,
-                    "display_progressbar": False,
-                },
-                "call": {
-                    "explain_func": explain,
-                    "explain_func_kwargs": {
-                        "method": "Saliency",
-                    },
-                },
-            },
-            {"min": 0.0, "max": 1.0},
-        ),
-        (
-            lazy_fixture("load_1d_3ch_conv_model"),
-            lazy_fixture("almost_uniform_1d_no_abatch"),
-            {
-                "init": {
-                    "lower_bound": 0.2,
-                    "disable_warnings": True,
-                    "display_progressbar": True,
-                },
+                "init": {},
                 "call": {
-                    "explain_func": explain,
                     "explain_func_kwargs": {
                         "method": "Saliency",
                     },
                 },
             },
-            {"min": 0.0, "max": 1.0},
         ),
-        (
+        pytest.param(
             lazy_fixture("load_mnist_model"),
             lazy_fixture("load_mnist_images"),
             {
-                "init": {
-                    "lower_bound": 0.2,
-                    "nr_samples": 10,
-                    "disable_warnings": True,
-                    "display_progressbar": True,
-                },
+                "init": {"return_aggregate": True},
                 "call": {
-                    "explain_func": explain,
                     "explain_func_kwargs": {
                         "method": "Saliency",
                     },
                 },
             },
-            {"min": 0.0, "max": 1.0},
+            id="torch_mnist",
         ),
-        (
+        pytest.param(
             lazy_fixture("load_mnist_model_tf"),
             lazy_fixture("load_mnist_images_tf"),
             {
                 "init": {
-                    "lower_bound": 0.2,
-                    "nr_samples": 10,
-                    "disable_warnings": True,
-                    "display_progressbar": True,
                     "abs": True,
                     "normalise": True,
                 },
                 "call": {
-                    "explain_func": explain,
                     "explain_func_kwargs": {
                         "method": "VanillaGradients",
                     },
                 },
             },
-            {"min": 0.0, "max": 1.0},
+            id="tf_mnist",
+        ),
+        # ------------ NLP -------------
+        pytest.param(
+            lazy_fixture("tf_sst2_model"),
+            lazy_fixture("sst2_dataset"),
+            {
+                "a_batch_generate": False,
+                "init": {"perturb_func": synonym_replacement},
+                "call": {},
+            },
+            marks=[pytest.mark.nlp],
+            id="tf_nlp_plain_text",
         ),
-        (
-            lazy_fixture("load_mnist_model_tf"),
-            lazy_fixture("load_mnist_images_tf"),
+        pytest.param(
+            lazy_fixture("torch_sst2_model"),
+            lazy_fixture("sst2_dataset"),
             {
+                "a_batch_generate": False,
                 "init": {
-                    "lower_bound": 0.2,
-                    "nr_samples": 10,
-                    "disable_warnings": True,
-                    "display_progressbar": True,
-                    "abs": True,
-                    "normalise": True,
-                    "return_aggregate": True,
+                    "perturb_func": spelling_replacement,
                 },
-                "call": {
-                    "explain_func": explain,
-                    "explain_func_kwargs": {
-                        "method": "VanillaGradients",
-                    },
-                },
+                "call": {},
+            },
+            marks=[pytest.mark.nlp],
+            id="torch_nlp_plain_text",
+        ),
+        pytest.param(
+            lazy_fixture("tf_sst2_model"),
+            lazy_fixture("sst2_dataset"),
+            {
+                "a_batch_generate": False,
+                "init": {},
+                "call": {},
+            },
+            marks=[pytest.mark.nlp],
+            id="tf_nlp_latent",
+        ),
+        pytest.param(
+            lazy_fixture("torch_sst2_model"),
+            lazy_fixture("sst2_dataset"),
+            {
+                "a_batch_generate": False,
+                "init": {},
+                "call": {},
             },
-            {"min": 0.0, "max": 1.0},
+            marks=[pytest.mark.nlp],
+            id="torch_nlp_latent",
         ),
     ],
 )
-def test_max_sensitivity(
-    model: ModelInterface,
-    data: np.ndarray,
-    params: dict,
-    expected: Union[float, dict, bool],
-):
+
+
+@pytest.mark.robustness
+@sensitivity_tests
+def test_max_sensitivity(model, data, params, sst2_tokenizer):
     x_batch, y_batch = (
         data["x_batch"],
         data["y_batch"],
@@ -190,7 +124,6 @@
     call_params = params.get("call", {})
 
     if params.get("a_batch_generate", True):
-        explain = call_params["explain_func"]
         explain_func_kwargs = call_params.get("explain_func_kwargs", {})
         a_batch = explain(
             model=model,
@@ -202,21 +135,71 @@
         a_batch = data["a_batch"]
     else:
         a_batch = None
-    scores = MaxSensitivity(**init_params)(
+    scores = MaxSensitivity(
+        **init_params, lower_bound=0.2, nr_samples=10, disable_warnings=True
+    )(
         model=model,
         x_batch=x_batch,
         y_batch=y_batch,
         a_batch=a_batch,
+        explain_func=explain,
+        tokenizer=sst2_tokenizer,
         **call_params,
     )
-    if isinstance(expected, float):
-        assert all(s == expected for s in scores), "Test failed."
+
+    if init_params.get("return_aggregate", False):
+        assert scores.shape == ()
+    else:
+        assert isinstance(scores, np.ndarray)
+
+    assert np.all(np.asarray(scores) >= 0)
+    # assert np.all(np.asarray(scores) <= 1.)
+
+
+@pytest.mark.robustness
+@sensitivity_tests
+def test_avg_sensitivity(model, data, params, sst2_tokenizer):
+    x_batch, y_batch = (
+        data["x_batch"],
+        data["y_batch"],
+    )
+
+    init_params = params.get("init", {})
+    call_params = params.get("call", {})
+
+    if params.get("a_batch_generate", True):
+        explain_func_kwargs = call_params.get("explain_func_kwargs", {})
+        a_batch = explain(
+            model=model,
+            inputs=x_batch,
+            targets=y_batch,
+            **explain_func_kwargs,
+        )
+    elif "a_batch" in data:
+        a_batch = data["a_batch"]
+    else:
+        a_batch = None
+    scores = AvgSensitivity(
+        **init_params, lower_bound=0.2, nr_samples=10, disable_warnings=True
+    )(
+        model=model,
+        x_batch=x_batch,
+        y_batch=y_batch,
+        a_batch=a_batch,
+        explain_func=explain,
+        tokenizer=sst2_tokenizer,
+        **call_params,
+    )
+    if init_params.get("return_aggregate", False):
+        assert scores.shape == ()
     else:
-        assert np.all(
-            ((s >= expected["min"]) & (s <= expected["max"])) for s in scores
-        ), "Test failed."
+        assert isinstance(scores, np.ndarray)
 
+    assert np.all(np.asarray(scores) >= 0)
+    # assert np.all(np.asarray(scores) <= 1.)
 
+
+# --------------------------------------------------------------------------
 @pytest.mark.robustness
 @pytest.mark.parametrize(
     "model,data,params,expected",
@@ -338,27 +321,6 @@
             },
             {"min": 0.0, "max": 1.0},
         ),
-        (
-            lazy_fixture("load_mnist_model"),
-            lazy_fixture("load_mnist_images"),
-            {
-                "a_batch_generate": False,
-                "init": {
-                    "perturb_std": 0.1,
-                    "nr_samples": 10,
-                    "disable_warnings": True,
-                    "display_progressbar": True,
-                    "return_aggregate": True,
-                },
-                "call": {
-                    "explain_func": explain,
-                    "explain_func_kwargs": {
-                        "method": "Saliency",
-                    },
-                },
-            },
-            {"min": 0.0, "max": 1.0},
-        ),
     ],
 )
 def test_local_lipschitz_estimate(
@@ -556,192 +518,6 @@
         assert scores is not None, "Test failed."
 
 
-@pytest.mark.robustness
-@pytest.mark.parametrize(
-    "model,data,params,expected",
-    [
-        (
-            lazy_fixture("load_1d_3ch_conv_model"),
-            lazy_fixture("almost_uniform_1d_no_abatch"),
-            {
-                "a_batch_generate": False,
-                "init": {
-                    "lower_bound": 0.2,
-                    "disable_warnings": False,
-                    "display_progressbar": False,
-                },
-                "call": {
-                    "explain_func": explain,
-                    "explain_func_kwargs": {
-                        "method": "Saliency",
-                    },
-                },
-            },
-            {"min": 0.0, "max": 1.0},
-        ),
-        (
-            lazy_fixture("load_mnist_model"),
-            lazy_fixture("load_mnist_images"),
-            {
-                "a_batch_generate": False,
-                "init": {
-                    "lower_bound": 0.2,
-                    "nr_samples": 10,
-                    "disable_warnings": False,
-                    "display_progressbar": False,
-                },
-                "call": {
-                    "explain_func": explain,
-                    "explain_func_kwargs": {
-                        "method": "Saliency",
-                    },
-                },
-            },
-            {"min": 0.0, "max": 1.0},
-        ),
-        (
-            lazy_fixture("load_1d_3ch_conv_model"),
-            lazy_fixture("almost_uniform_1d_no_abatch"),
-            {
-                "a_batch_generate": False,
-                "init": {
-                    "lower_bound": 0.2,
-                    "disable_warnings": True,
-                    "display_progressbar": False,
-                },
-                "call": {
-                    "explain_func": explain,
-                    "explain_func_kwargs": {
-                        "method": "Saliency",
-                    },
-                },
-            },
-            {"min": 0.0, "max": 1.0},
-        ),
-        (
-            lazy_fixture("load_mnist_model"),
-            lazy_fixture("load_mnist_images"),
-            {
-                "a_batch_generate": False,
-                "init": {
-                    "lower_bound": 0.2,
-                    "nr_samples": 10,
-                    "disable_warnings": True,
-                    "display_progressbar": False,
-                },
-                "call": {
-                    "explain_func": explain,
-                    "explain_func_kwargs": {
-                        "method": "Saliency",
-                    },
-                },
-            },
-            {"min": 0.0, "max": 1.0},
-        ),
-        (
-            lazy_fixture("load_1d_3ch_conv_model"),
-            lazy_fixture("almost_uniform_1d_no_abatch"),
-            {
-                "a_batch_generate": False,
-                "init": {
-                    "lower_bound": 0.2,
-                    "disable_warnings": True,
-                    "display_progressbar": True,
-                },
-                "call": {
-                    "explain_func": explain,
-                    "explain_func_kwargs": {
-                        "method": "Saliency",
-                    },
-                },
-            },
-            {"min": 0.0, "max": 1.0},
-        ),
-        (
-            lazy_fixture("load_mnist_model"),
-            lazy_fixture("load_mnist_images"),
-            {
-                "a_batch_generate": False,
-                "init": {
-                    "lower_bound": 0.2,
-                    "nr_samples": 10,
-                    "disable_warnings": True,
-                    "display_progressbar": True,
-                },
-                "call": {
-                    "explain_func": explain,
-                    "explain_func_kwargs": {
-                        "method": "Saliency",
-                    },
-                },
-            },
-            {"min": 0.0, "max": 1.0},
-        ),
-        (
-            lazy_fixture("load_mnist_model"),
-            lazy_fixture("load_mnist_images"),
-            {
-                "a_batch_generate": False,
-                "init": {
-                    "lower_bound": 0.2,
-                    "nr_samples": 10,
-                    "disable_warnings": True,
-                    "display_progressbar": True,
-                    "return_aggregate": True,
-                },
-                "call": {
-                    "explain_func": explain,
-                    "explain_func_kwargs": {
-                        "method": "Saliency",
-                    },
-                },
-            },
-            {"min": 0.0, "max": 1.0},
-        ),
-    ],
-)
-def test_avg_sensitivity(
-    model: ModelInterface,
-    data: np.ndarray,
-    params: dict,
-    expected: Union[float, dict, bool],
-):
-    x_batch, y_batch = (
-        data["x_batch"],
-        data["y_batch"],
-    )
-
-    init_params = params.get("init", {})
-    call_params = params.get("call", {})
-
-    if params.get("a_batch_generate", True):
-        explain = call_params["explain_func"]
-        explain_func_kwargs = call_params.get("explain_func_kwargs", {})
-        a_batch = explain(
-            model=model,
-            inputs=x_batch,
-            targets=y_batch,
-            **explain_func_kwargs,
-        )
-    elif "a_batch" in data:
-        a_batch = data["a_batch"]
-    else:
-        a_batch = None
-    scores = AvgSensitivity(**init_params)(
-        model=model,
-        x_batch=x_batch,
-        y_batch=y_batch,
-        a_batch=a_batch,
-        **call_params,
-    )
-    if isinstance(expected, float):
-        assert all(s == expected for s in scores), "Test failed."
-    else:
-        assert np.all(
-            ((s >= expected["min"]) & (s <= expected["max"])) for s in scores
-        ), "Test failed."
-
-
 @pytest.mark.robustness
 @pytest.mark.parametrize(
     "model,data,params,expected",
@@ -822,26 +598,6 @@
             },
             {"min": 0.0, "max": 1.0},
         ),
-        (
-            lazy_fixture("load_mnist_model"),
-            lazy_fixture("load_mnist_images"),
-            {
-                "init": {
-                    "discretise_func": rank,
-                    "disable_warnings": True,
-                    "display_progressbar": False,
-                    "return_aggregate": True,
-                },
-                "call": {
-                    "explain_func": explain,
-                    "explain_func_kwargs": {
-                        "method": "Saliency",
-                    },
-                },
-                "a_batch_generate": False,
-            },
-            {"min": 0.0, "max": 1.0},
-        ),
     ],
 )
 def test_consistency(
@@ -892,84 +648,101 @@
     assert (scores >= expected["min"]) & (scores <= expected["max"]), "Test failed."
 
 
+# -------------------return_nan_when_prediction_changes=True-----------------------
+
+
 @pytest.mark.robustness
 @pytest.mark.parametrize(
-    "metric,model,data,params",
+    "metric,model,data, init_kwargs, call_kwargs",
     [
         (
             LocalLipschitzEstimate,
             lazy_fixture("load_mnist_model"),
             lazy_fixture("load_mnist_images"),
-            {
-                "perturb_std": 255,
-                "perturb_mean": 255,
-            },
+            {},
+            {"explain_func_kwargs": {"method": "Saliency"}},
         ),
         (
             LocalLipschitzEstimate,
             lazy_fixture("load_1d_3ch_conv_model"),
             lazy_fixture("almost_uniform_1d_no_abatch"),
-            {
-                "perturb_std": 255,
-                "perturb_mean": 255,
-            },
+            {},
+            {"explain_func_kwargs": {"method": "Saliency"}},
         ),
         (
             AvgSensitivity,
             lazy_fixture("load_mnist_model"),
             lazy_fixture("load_mnist_images"),
-            {
-                "lower_bound": 1.0,
-                "upper_bound": 255.0,
-            },
+            {},
+            {"explain_func_kwargs": {"method": "Saliency"}},
         ),
         (
             AvgSensitivity,
             lazy_fixture("load_1d_3ch_conv_model"),
             lazy_fixture("almost_uniform_1d_no_abatch"),
-            {
-                "lower_bound": 1.0,
-                "upper_bound": 255.0,
-            },
+            {},
+            {"explain_func_kwargs": {"method": "Saliency"}},
         ),
         (
             MaxSensitivity,
             lazy_fixture("load_mnist_model"),
             lazy_fixture("load_mnist_images"),
-            {
-                "lower_bound": 1.0,
-                "upper_bound": 255.0,
-            },
+            {},
+            {"explain_func_kwargs": {"method": "Saliency"}},
         ),
         (
             MaxSensitivity,
             lazy_fixture("load_1d_3ch_conv_model"),
             lazy_fixture("almost_uniform_1d_no_abatch"),
-            {
-                "lower_bound": 1.0,
-                "upper_bound": 255.0,
-            },
+            {},
+            {"explain_func_kwargs": {"method": "Saliency"}},
         ),
+        # ------------- NLP -----------
+        # Requires to mock __call__, which will cause gradients to be None
+        # pytest.param(
+        #     AvgSensitivity,
+        #     lazy_fixture("tf_sst2_model"),
+        #     lazy_fixture("sst2_dataset"),
+        #     {},
+        #     {"explain_func_kwargs": {"method": "GradNorm"}},
+        #     marks=pytest.mark.nlp,
+        # ),
+        pytest.param(
+            MaxSensitivity,
+            lazy_fixture("tf_sst2_model"),
+            lazy_fixture("sst2_dataset"),
+            {"perturb_func": spelling_replacement},
+            {"explain_func_kwargs": {"method": "GradNorm"}},
+            marks=pytest.mark.nlp,
+        ),
+    ],
+    ids=[
+        "lipschitz_mnist",
+        "lipschitz_tabular",
+        "avg_sen_mnist",
+        "avg_sen_tabular",
+        "max_sen_mnist",
+        "max_sen_tabular",
+        # "avg_sen_NLP",
+        "max_sen_NLP_plain_text",
     ],
 )
 def test_return_nan_when_prediction_changes(
-    metric, model, data, params, mock_prediction_changed
+    metric, model, data, init_kwargs, call_kwargs, mock_prediction_changed
 ):
     # This test case requires different set-up and assertions, so we have it in separate function.
     metric_instance = metric(
-        **params,
         disable_warnings=True,
         nr_samples=10,
         return_nan_when_prediction_changes=True,
+        **init_kwargs,
     )
     result = metric_instance(
         model,
         data["x_batch"],
         data["y_batch"],
         explain_func=explain,
-        explain_func_kwargs={
-            "method": "Saliency",
-        },
+        **call_kwargs,
     )
     assert np.isnan(result).all()
 
Index: tests/metrics/test_token_flipping.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/tests/metrics/test_token_flipping.py b/tests/metrics/test_token_flipping.py
new file mode 100644
--- /dev/null	(date 1681078345894)
+++ b/tests/metrics/test_token_flipping.py	(date 1681078345894)
@@ -0,0 +1,38 @@
+import numpy as np
+import pytest
+from pytest_lazyfixture import lazy_fixture
+
+from quantus.functions.explanation_func import explain
+from quantus.metrics.faithfulness import TokenFlipping
+
+
+@pytest.mark.nlp
+@pytest.mark.parametrize(
+    "model,tokenizer,init_kwargs",
+    [
+        (
+            lazy_fixture("tf_sst2_model"),
+            lazy_fixture("sst2_tokenizer"),
+            {"normalise": True},
+        ),
+        (
+            lazy_fixture("torch_sst2_model"),
+            lazy_fixture("sst2_tokenizer"),
+            {"normalise": True, "task": "activation"},
+        ),
+    ],
+    ids=["pruning_tf", "activation_torch"],
+)
+def test_token_flipping(model, tokenizer, sst2_dataset, init_kwargs):
+    metric = TokenFlipping(**init_kwargs)
+    result = metric(
+        model, **sst2_dataset, a_batch=None, explain_func=explain, tokenizer=tokenizer
+    )
+    assert isinstance(result, np.ndarray)
+    assert isinstance(result, np.ndarray)
+    assert not (result == np.NINF).any()
+    assert not (result == np.PINF).any()
+    assert not (result == np.NAN).any()
+    # assert not (result == np.NZERO).any()
+    # assert not (result == np.PZERO).any()
+    assert result.shape == (29,)
Index: tests/conftest.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/tests/conftest.py b/tests/conftest.py
--- a/tests/conftest.py	(revision c2255b793bae21a32b1274275ae60b44cdd94d7b)
+++ b/tests/conftest.py	(date 1681078345893)
@@ -1,123 +1,27 @@
-import pytest
 import pickle
-import torch
+from importlib import util
+
 import numpy as np
-from keras.datasets import cifar10
-import pandas as pd
-from sklearn.model_selection import train_test_split
-
-from quantus.helpers.model.models import (
-    LeNet,
-    LeNetTF,
-    CifarCNNModel,
-    ConvNet1D,
-    ConvNet1DTF,
-    TitanicSimpleTFModel,
-    TitanicSimpleTorchModel,
-)
-
-CIFAR_IMAGE_SIZE = 32
-MNIST_IMAGE_SIZE = 28
-BATCH_SIZE = 124
-MINI_BATCH_SIZE = 8
-
-
-@pytest.fixture(scope="session", autouse=True)
-def load_mnist_model():
-    """Load a pre-trained LeNet classification model (architecture at quantus/helpers/models)."""
-    model = LeNet()
-    model.load_state_dict(
-        torch.load("tests/assets/mnist", map_location="cpu", pickle_module=pickle)
-    )
-    return model
-
-
-@pytest.fixture(scope="session", autouse=True)
-def load_mnist_model_tf():
-    """Load a pre-trained LeNet classification model (architecture at quantus/helpers/models)."""
-    model = LeNetTF()
-    model.load_weights("tests/assets/lenet_mnist_weights.keras")
-    return model
-
-
-@pytest.fixture(scope="session", autouse=True)
-def load_cifar10_model_tf():
-    """Load a pre-trained LeNet classification model (architecture at quantus/helpers/models)."""
-    model = CifarCNNModel()
-    model.load_weights("tests/assets/cifar_tf_weights.keras")
-    return model
-
-
-@pytest.fixture(scope="session", autouse=True)
-def load_1d_1ch_conv_model():
-    """Load a pre-trained 1d-convolutional classification model (architecture at quantus/helpers/models)."""
-    model = ConvNet1D(n_channels=1, n_classes=10)
-    model.eval()
-    # TODO: add trained model weights
-    # model.load_state_dict(
-    #    torch.load("tests/assets/mnist", map_location="cpu", pickle_module=pickle)
-    # )
-    return model
-
-
-@pytest.fixture(scope="session", autouse=True)
-def load_1d_3ch_conv_model():
-    """Load a pre-trained 1d-convolutional classification model (architecture at quantus/helpers/models)."""
-    model = ConvNet1D(n_channels=3, n_classes=10)
-    model.eval()
-    # TODO: add trained model weights
-    # model.load_state_dict(
-    #    torch.load("tests/assets/mnist", map_location="cpu", pickle_module=pickle)
-    # )
-    return model
-
-
-@pytest.fixture(scope="session", autouse=True)
-def load_1d_3ch_conv_model_tf():
-    """Load a pre-trained 1d-convolutional classification model (architecture at quantus/helpers/models)."""
-    model = ConvNet1DTF(n_channels=3, seq_len=100, n_classes=10)
-    # TODO: add trained model weights
-    # model = LeNetTF()
-    # model.load_weights("tests/assets/mnist_tf_weights/")
-    return model
-
+import pytest
 
-@pytest.fixture(scope="session", autouse=True)
-def load_mnist_images():
-    """Load a batch of MNIST digits: inputs and outputs to use for testing."""
-    x_batch = (
-        np.loadtxt("tests/assets/mnist_x")
-        .astype(float)
-        .reshape((BATCH_SIZE, 1, MNIST_IMAGE_SIZE, MNIST_IMAGE_SIZE))
-    )[:MINI_BATCH_SIZE]
-    y_batch = np.loadtxt("tests/assets/mnist_y").astype(int)[:MINI_BATCH_SIZE]
-    return {"x_batch": x_batch, "y_batch": y_batch}
+# Set seed for reproducibility.
+np.random.seed(42)
 
+# Please, note that all datasets and weights are stored locally,
+# using TensorFlow or HuggingFace datasets (or .from_pretrained(...)) may seem convenient,
+# but it will cost us 2-3 additional minutes on every GitHUb action run.
 
-@pytest.fixture(scope="session", autouse=True)
-def load_cifar10_images():
-    """Load a batch of MNIST digits: inputs and outputs to use for testing."""
-    (x_train, y_train), (_, _) = cifar10.load_data()
-    x_batch = (
-        x_train[:BATCH_SIZE]
-        .reshape((BATCH_SIZE, 3, CIFAR_IMAGE_SIZE, CIFAR_IMAGE_SIZE))
-        .astype(float)
-    )[:MINI_BATCH_SIZE]
-    y_batch = y_train[:BATCH_SIZE].reshape(-1).astype(int)[:MINI_BATCH_SIZE]
-    return {"x_batch": x_batch, "y_batch": y_batch}
 
-
-@pytest.fixture(scope="session", autouse=True)
+@pytest.fixture(scope="session")
 def load_mnist_images_tf(load_mnist_images):
     """Load a batch of MNIST digits: inputs and outputs to use for testing."""
-
     return {
         "x_batch": np.moveaxis(load_mnist_images["x_batch"], 1, -1),
         "y_batch": load_mnist_images["y_batch"],
     }
 
 
-@pytest.fixture(scope="session", autouse=True)
+@pytest.fixture(scope="session")
 def almost_uniform_1d():
     return {
         "x_batch": np.random.randn(10, 3, 100),
@@ -126,7 +30,7 @@
     }
 
 
-@pytest.fixture(scope="session", autouse=True)
+@pytest.fixture(scope="session")
 def almost_uniform_1d_no_abatch_channel_last():
     return {
         "x_batch": np.random.randn(10, 100, 3),
@@ -134,7 +38,7 @@
     }
 
 
-@pytest.fixture(scope="session", autouse=True)
+@pytest.fixture(scope="session")
 def almost_uniform_1d_no_abatch():
     return {
         "x_batch": np.random.randn(10, 3, 100),
@@ -143,7 +47,7 @@
     }
 
 
-@pytest.fixture(scope="session", autouse=True)
+@pytest.fixture(scope="session")
 def almost_uniform_2d():
     return {
         "x_batch": np.random.randn(10, 3, 224, 224),
@@ -152,7 +56,7 @@
     }
 
 
-@pytest.fixture(scope="session", autouse=True)
+@pytest.fixture(scope="session")
 def almost_uniform_2d_no_abatch():
     return {
         "x_batch": np.random.randn(10, 1, 28, 28),
@@ -161,7 +65,7 @@
     }
 
 
-@pytest.fixture(scope="session", autouse=True)
+@pytest.fixture(scope="session")
 def flat_image_array():
     return {
         "x": np.zeros((1, 3 * 28 * 28)),
@@ -170,7 +74,7 @@
     }
 
 
-@pytest.fixture(scope="session", autouse=True)
+@pytest.fixture(scope="session")
 def flat_sequence_array():
     return {
         "x": np.zeros((1, 3 * 28)),
@@ -179,30 +83,165 @@
     }
 
 
-@pytest.fixture(scope="session", autouse=True)
-def titanic_model_torch():
-    model = TitanicSimpleTorchModel()
-    model.load_state_dict(torch.load("tests/assets/titanic_model_torch.pickle"))
-    return model
+@pytest.fixture(scope="session")
+def titanic_dataset():
+    x_batch = np.load("tests/assets/titanic/x_batch.npy")
+    y_batch = np.load("tests/assets/titanic/y_batch.npy")
+    return {"x_batch": x_batch, "y_batch": y_batch}
+
+
+def sst2_dataset():
+    x_batch = np.load("tests/assets/cifar10/x_batch.npy")
+    y_batch = np.load("tests/assets/cifar10/y_batch.npy")
+    return {"x_batch": x_batch, "y_batch": y_batch}
+
+
+if util.find_spec("tensorflow"):
+    from quantus.helpers.model.models import (
+        LeNetTF,
+        CifarCNNModel,
+        ConvNet1DTF,
+        TitanicSimpleTFModel,
+    )
+
+    @pytest.fixture(scope="session")
+    def load_mnist_model_tf():
+        """Load a pre-trained LeNet classification model (architecture at quantus/helpers/models)."""
+        model = LeNetTF()
+        model.load_weights("tests/assets/weights/lenet_mnist.keras")
+        return model
+
+    @pytest.fixture(scope="session")
+    def load_cifar10_model_tf():
+        """Load a pre-trained LeNet classification model (architecture at quantus/helpers/models)."""
+        model = CifarCNNModel()
+        model.load_weights("tests/assets/weights/cifar_cnn.keras")
+        return model
+
+    @pytest.fixture(scope="session")
+    def load_1d_3ch_conv_model_tf():
+        """Load a pre-trained 1d-convolutional classification model (architecture at quantus/helpers/models)."""
+        model = ConvNet1DTF(n_channels=3, seq_len=100, n_classes=10)
+        # TODO: add trained model weights
+        # model = LeNetTF()
+        # model.load_weights("tests/assets/mnist_tf_weights/")
+        return model
 
-
-@pytest.fixture(scope="session", autouse=True)
-def titanic_model_tf(titanic_dataset):
-    model = TitanicSimpleTFModel()
-    model(titanic_dataset["x_batch"], training=False)
-    model.load_weights("tests/assets/titanic_model_tensorflow.keras")
-    return model
+    @pytest.fixture(scope="session")
+    def titanic_model_tf(titanic_dataset):
+        model = TitanicSimpleTFModel()
+        model(titanic_dataset["x_batch"], training=False)
+        model.load_weights("tests/assets/weights/titanic.keras")
+        return model
 
 
-@pytest.fixture(scope="session")
-def titanic_dataset():
-    df = pd.read_csv("tutorials/assets/titanic3.csv")
-    df = df[["age", "embarked", "fare", "parch", "pclass", "sex", "sibsp", "survived"]]
-    df["age"] = df["age"].fillna(df["age"].mean())
-    df["fare"] = df["fare"].fillna(df["fare"].mean())
+if util.find_spec("torch"):
+    import torch
+    from quantus.helpers.model.models import (
+        LeNet,
+        ConvNet1D,
+        ConvNet1DTF,
+        TitanicSimpleTorchModel,
+    )
+
+    @pytest.fixture(scope="session")
+    def load_mnist_model():
+        """Load a pre-trained LeNet classification model (architecture at quantus/helpers/models)."""
+        model = LeNet()
+        model.load_state_dict(
+            torch.load(
+                "tests/assets/weights/mnist.pickle",
+                map_location="cpu",
+                pickle_module=pickle,
+            )
+        )
+        return model
+
+    @pytest.fixture(scope="session")
+    def load_1d_1ch_conv_model():
+        """Load a pre-trained 1d-convolutional classification model (architecture at quantus/helpers/models)."""
+        model = ConvNet1D(n_channels=1, n_classes=10)
+        model.eval()
+        # TODO: add trained model weights
+        # model.load_state_dict(
+        #    torch.load("tests/assets/mnist", map_location="cpu", pickle_module=pickle)
+        # )
+        return model
 
-    df_enc = pd.get_dummies(df, columns=["embarked", "pclass", "sex"]).sample(frac=1)
-    X = df_enc.drop(["survived"], axis=1).values.astype(float)
-    Y = df_enc["survived"].values.astype(int)
-    _, test_features, _, test_labels = train_test_split(X, Y, test_size=0.3)
-    return {"x_batch": test_features, "y_batch": test_labels}
+    @pytest.fixture(scope="session")
+    def load_1d_3ch_conv_model():
+        """Load a pre-trained 1d-convolutional classification model (architecture at quantus/helpers/models)."""
+        model = ConvNet1D(n_channels=3, n_classes=10)
+        model.eval()
+        # TODO: add trained model weights
+        # model.load_state_dict(
+        #    torch.load("tests/assets/mnist", map_location="cpu", pickle_module=pickle)
+        # )
+        return model
+
+    @pytest.fixture(scope="session")
+    def titanic_model_torch():
+        model = TitanicSimpleTorchModel()
+        model.load_state_dict(torch.load("tests/assets/weights/titanic.pickle"))
+        return model
+
+
+@pytest.fixture(scope="session")
+def load_mnist_images():
+    """Load a batch of MNIST digits: inputs and outputs to use for testing."""
+    x_batch = np.load("tests/assets/mnist/x_batch.npy")
+    y_batch = np.load("tests/assets/mnist/y_batch.npy")
+    return {"x_batch": x_batch, "y_batch": y_batch}
+
+
+@pytest.fixture(scope="session")
+def load_cifar10_images():
+    """Load a batch of MNIST digits: inputs and outputs to use for testing."""
+    x_batch = np.load("tests/assets/cifar10/x_batch.npy")
+    y_batch = np.load("tests/assets/cifar10/y_batch.npy")
+    return {"x_batch": x_batch, "y_batch": y_batch}
+
+
+# Just some aliases to avoid long names in parameterized tests.
+# TODO
+# ---------------- NLP fixtures ------------------
+
+
+@pytest.fixture(scope="session")
+def sst2_dataset():
+    x_batch = np.load("tests/assets/sst2/x_batch.npy").tolist()
+    y_batch = np.load("tests/assets/sst2/y_batch.npy")
+    return {"x_batch": x_batch, "y_batch": y_batch}
+
+
+if util.find_spec("transformers"):
+    from quantus.helpers.utils import get_wrapped_text_classifier
+    from transformers import (
+        TFDistilBertForSequenceClassification,
+        DistilBertForSequenceClassification,
+        DistilBertTokenizer,
+    )
+
+    @pytest.fixture(scope="session")
+    def tf_sst2_model():
+        return TFDistilBertForSequenceClassification.from_pretrained(
+            "tests/assets/distilbert/"
+        )
+
+    @pytest.fixture(scope="session")
+    def torch_sst2_model():
+        return DistilBertForSequenceClassification.from_pretrained(
+            "tests/assets/distilbert/"
+        )
+
+    @pytest.fixture(scope="session")
+    def sst2_tokenizer():
+        return DistilBertTokenizer.from_pretrained("tests/assets/distilbert/")
+
+    @pytest.fixture(scope="session")
+    def tf_sst2_model_wrapper(tf_sst2_model, sst2_tokenizer):
+        return get_wrapped_text_classifier(tf_sst2_model, sst2_tokenizer)
+
+    @pytest.fixture(scope="session")
+    def torch_sst2_model_wrapper(torch_sst2_model, sst2_tokenizer):
+        return get_wrapped_text_classifier(torch_sst2_model, sst2_tokenizer)
Index: tests/README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/tests/README.md b/tests/README.md
--- a/tests/README.md	(revision c2255b793bae21a32b1274275ae60b44cdd94d7b)
+++ b/tests/README.md	(date 1681078345885)
@@ -1,13 +1,42 @@
 ### How to run tests
 
-Run all tests at once:
+Run all unit tests at once on all available CPU cores:
 
-```pytest```
+```shell
+pytest -n auto
+```
 
 Run a subset of tests with e.g., localisation metrics (see available markers in the pytest.ini files):
 
-```pytest -m localisation -s```
+```shell
+pytest -m localisation -s
+```
 
 Run pytest with coverage:
 
-```pytest tests -v --cov-report term --cov-report html:htmlcov --cov-report xml --cov=quantus```
\ No newline at end of file
+```shell
+tox run -r coverage
+```
+
+### Integration tests
+These tests verify, that quantus is usable without all optional dependencies installed.
+
+Run integration tests in isolated environment:
+- base TensorFlow installation
+```shell
+tox -e run tf_only
+```
+- base Torch installation
+```shell
+tox -e run torch_only
+```
+
+- TensorFlow + NLP installation
+```shell
+tox -e run tf_nlp
+```
+
+- Torch + NLP installation
+```shell
+tox -e run torch_nlp
+```
Index: tests/test_evaluation.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/tests/test_evaluation.py b/tests/test_evaluation.py
--- a/tests/test_evaluation.py	(revision c2255b793bae21a32b1274275ae60b44cdd94d7b)
+++ b/tests/test_evaluation.py	(date 1681078345895)
@@ -2,14 +2,19 @@
 
 import pytest
 from pytest_lazyfixture import lazy_fixture
+from pytest_mock import MockerFixture
 import numpy as np
-from quantus.evaluation import evaluate
+
+import quantus
+from quantus.evaluation import evaluate, evaluate_nlp
 from quantus.functions.explanation_func import explain
+from quantus.functions.perturb_func import synonym_replacement, spelling_replacement
 
-from quantus.metrics.complexity import Sparseness
-from quantus.metrics.robustness import MaxSensitivity
+from quantus.metrics.complexity import Sparseness  # noqa
+from quantus.metrics.robustness import MaxSensitivity  # noqa
 
 
+@pytest.mark.order(-1)
 @pytest.mark.evaluate_func
 @pytest.mark.parametrize(
     "model,data,params,expected",
@@ -167,3 +172,46 @@
             ][list(eval(params["call_kwargs"]).keys())[0]]
             <= expected["max"]
         ), "Test failed."
+
+
+@pytest.mark.order(-2)
+@pytest.mark.last
+@pytest.mark.parametrize(
+    "model, data",
+    [
+        (lazy_fixture("tf_sst2_model"), lazy_fixture("sst2_dataset")),
+        (lazy_fixture("torch_sst2_model"), lazy_fixture("sst2_dataset")),
+    ],
+)
+def test_evaluate_nlp(model, data, sst2_tokenizer, mocker: MockerFixture):
+    nlp_metrics = {
+        "MPR": quantus.ModelParameterRandomisation(disable_warnings=True),
+        "RandomLogit": quantus.RandomLogit(disable_warnings=True),
+        "TokenFlip": quantus.TokenFlipping(disable_warnings=True),
+        "Avg-Sen": quantus.AvgSensitivity(
+            disable_warnings=True, nr_samples=5, perturb_func=synonym_replacement
+        ),
+        "Max-Sen": quantus.MaxSensitivity(
+            disable_warnings=True, nr_samples=5, perturb_func=spelling_replacement
+        ),
+        "RIS": quantus.RelativeInputStability(disable_warnings=True, nr_samples=5),
+        "ROS": quantus.RelativeOutputStability(disable_warnings=True, nr_samples=5),
+        "RRS": quantus.RelativeRepresentationStability(
+            disable_warnings=True, nr_samples=5
+        ),
+    }
+
+    callback_stub = mocker.stub("callback_stub")
+    scores = evaluate_nlp(
+        metrics=nlp_metrics,
+        model=model,
+        x_batch=data["x_batch"],
+        y_batch=data["y_batch"],
+        explain_func=quantus.explain,
+        explain_func_kwargs=dict(method="GradXInput"),
+        persist_callback=callback_stub,
+        verbose=False,
+        tokenizer=sst2_tokenizer,
+    )
+
+    callback_stub.assert_called()
Index: tests/test_installation_extras.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/tests/test_installation_extras.py b/tests/test_installation_extras.py
new file mode 100644
--- /dev/null	(date 1681078345895)
+++ b/tests/test_installation_extras.py	(date 1681078345895)
@@ -0,0 +1,62 @@
+"""
+In this suite we test the cases, when user has installed quantus with only tensorflow (exclusive) or torch,
+with or without NLP support. The idea is to catch references on conditional libraries, and verify Quantus is useable
+in all extra-installations variants. The test are mostly just copy-pasted from test_evaluation.py.
+These are run in separate GitHub actions, as they take a lot of time.
+Run with:
+- tox run -e tf_only
+- tox run -e torch_only
+- tox run -e tf_nlp
+- tox run -e torch_nlp
+"""
+
+from importlib import util
+import pytest
+
+
+def assert_tf_not_installed():
+    assert util.find_spec("tensorflow") is None
+    assert util.find_spec("keras") is None
+
+
+def assert_nlp_libraries_not_installed():
+    assert util.find_spec("transformers") is None
+    assert util.find_spec("nlpaug") is None
+    assert util.find_spec("nltk") is None
+
+
+def assert_torch_not_installed():
+    assert util.find_spec("torch") is None
+    assert util.find_spec("captum") is None
+
+
+skip_if_torch_and_tf_installed = pytest.mark.skipif(
+    util.find_spec("tensorflow") is not None and util.find_spec("torch") is not None,
+    reason="Integration tests must run only with 1 DNN framework installed.",
+)
+
+
+@pytest.mark.integration_test
+@skip_if_torch_and_tf_installed
+def test_base_tf_installation():
+    assert_torch_not_installed()
+    assert_nlp_libraries_not_installed()
+
+
+@pytest.mark.integration_test
+@skip_if_torch_and_tf_installed
+def test_base_torch_installation():
+    assert_tf_not_installed()
+    assert_nlp_libraries_not_installed()
+
+
+@pytest.mark.integration_test
+@skip_if_torch_and_tf_installed
+def test_tf_nlp_installation():
+    assert_torch_not_installed()
+
+
+@pytest.mark.integration_test
+@skip_if_torch_and_tf_installed
+def test_torch_nlp_installation():
+    assert_tf_not_installed()
Index: tutorials/Tutorial_Advanced_NLP_Tasks.ipynb
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/tutorials/Tutorial_Advanced_NLP_Tasks.ipynb b/tutorials/Tutorial_Advanced_NLP_Tasks.ipynb
new file mode 100644
--- /dev/null	(date 1681078345895)
+++ b/tutorials/Tutorial_Advanced_NLP_Tasks.ipynb	(date 1681078345895)
@@ -0,0 +1,34 @@
+{
+ "cells": [
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {
+    "collapsed": true
+   },
+   "outputs": [],
+   "source": []
+  }
+ ],
+ "metadata": {
+  "kernelspec": {
+   "display_name": "Python 3",
+   "language": "python",
+   "name": "python3"
+  },
+  "language_info": {
+   "codemirror_mode": {
+    "name": "ipython",
+    "version": 2
+   },
+   "file_extension": ".py",
+   "mimetype": "text/x-python",
+   "name": "python",
+   "nbconvert_exporter": "python",
+   "pygments_lexer": "ipython2",
+   "version": "2.7.6"
+  }
+ },
+ "nbformat": 4,
+ "nbformat_minor": 0
+}
Index: tutorials/Tutorial_Getting_Started.ipynb
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/tutorials/Tutorial_Getting_Started.ipynb b/tutorials/Tutorial_Getting_Started.ipynb
--- a/tutorials/Tutorial_Getting_Started.ipynb	(revision c2255b793bae21a32b1274275ae60b44cdd94d7b)
+++ b/tutorials/Tutorial_Getting_Started.ipynb	(date 1681078323472)
@@ -17,21 +17,20 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 15,
+   "execution_count": 1,
    "metadata": {
     "id": "4Y7_mNf9Bic0"
    },
    "outputs": [],
    "source": [
     "from IPython.display import clear_output\n",
-    "\n",
     "!pip install torch torchvision captum quantus seaborn\n",
     "clear_output()"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 16,
+   "execution_count": 2,
    "metadata": {
     "id": "RV7X-Ss9-16F"
    },
@@ -46,11 +45,10 @@
     "from captum.attr import *\n",
     "import matplotlib.pyplot as plt\n",
     "import seaborn as sns\n",
-    "\n",
     "sns.set()\n",
     "\n",
     "# Enable GPU.\n",
-    "device = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\n",
+    "device = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\") \n",
     "clear_output()"
    ]
   },
@@ -76,7 +74,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 17,
+   "execution_count": 3,
    "metadata": {
     "colab": {
      "base_uri": "https://localhost:8080/",
@@ -146,15 +144,9 @@
     "# Load datasets and make loaders.\n",
     "test_samples = 24\n",
     "transformer = torchvision.transforms.Compose([torchvision.transforms.ToTensor()])\n",
-    "train_set = torchvision.datasets.MNIST(\n",
-    "    root=\"./sample_data\", train=True, transform=transformer, download=True\n",
-    ")\n",
-    "test_set = torchvision.datasets.MNIST(\n",
-    "    root=\"./sample_data\", train=False, transform=transformer, download=True\n",
-    ")\n",
-    "train_loader = torch.utils.data.DataLoader(\n",
-    "    train_set, batch_size=128, shuffle=True, pin_memory=True\n",
-    ")  # num_workers=4,\n",
+    "train_set = torchvision.datasets.MNIST(root='./sample_data', train=True, transform=transformer, download=True)\n",
+    "test_set = torchvision.datasets.MNIST(root='./sample_data', train=False, transform=transformer, download=True)\n",
+    "train_loader = torch.utils.data.DataLoader(train_set, batch_size=128, shuffle=True, pin_memory=True) # num_workers=4,\n",
     "test_loader = torch.utils.data.DataLoader(test_set, batch_size=200, pin_memory=True)\n",
     "\n",
     "# Load a batch of inputs and outputs to use for evaluation.\n",
@@ -164,7 +156,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 18,
+   "execution_count": 4,
    "metadata": {
     "colab": {
      "base_uri": "https://localhost:8080/",
@@ -186,8 +178,10 @@
    "outputs": [
     {
      "data": {
-      "text/plain": "<Figure size 1080x216 with 5 Axes>",
-      "image/png": "iVBORw0KGgoAAAANSUhEUgAAA1MAAACsCAYAAACelPbNAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/YYfK9AAAACXBIWXMAAAsTAAALEwEAmpwYAAAODUlEQVR4nO3de4iU1f8H8I+uqUQ3jcpuIBWufyxkBCKWmAhZ6rquZCUWUmAWllZsraUWEkgZGOUfQheoxBumaIqhIJUEppaR2QWzq0VqpEYoeMnz/SPaX/tr13bOrjuzO6/Xf84+z+N53M+cmfecOR+7pJRSAAAAUJCuxR4AAABARyRMAQAAZBCmAAAAMghTAAAAGYQpAACADMIUAABAhpIMUz/99FNUVlbGXXfd9a+fzZgxIyorK+PgwYMNx61YsaLRMa+99lrMmDEjIiK2bt0ao0ePbvjZe++9F3fccUeMGTMmRo0aFdOnT499+/ZFRMS0adOipqYmampqorKyMqqrq6OmpibuvvvuFo/977EVw549exrGX1NTE9XV1VFZWRkbN24synjKiZrNt3PnzrjzzjsbanbNmjVFG0s5UbOt99Zbb8X9999f7GGUDTWb7/vvv4+JEyfGyJEj47bbbotvvvmmaGMpN+q29fbu3RsDBw6Mzz77rNhDaVK3Yg+gOT169Ijvvvsufv7557j88ssjIuLo0aOxY8eORsd17do1nnvuubj++uvjqquuOu019+/fH/X19bFq1aqGay5cuDAefvjhWLZsWbz00ksNx1ZWVsYbb7wRvXv3buM7O3OuueaaRm9En3322ejXr1/cfPPNRRxV+VCzhUspxbRp02Lu3LkxePDg2LdvX9TW1sa1114bffv2LfbwOj01m+fw4cMxf/78WLt2bQwcOLDYwykrajZPXV1dTJo0Kaqrq+P999+P6dOnx9q1a6NLly7FHlpZULf5jh07Fo899licOHGi2ENpVkmuTEVEVFRUxK233hpr165teGzjxo0xfPjwRsf17Nkz7rnnnqirq4vjx4+f9pqHDh2KEydOxNGjRxsemzRpUkyZMqXg8X366acxfvz4GD16dNTW1saWLVsa/fzo0aPx+OOPxx133BEjRoyIcePGxbfffttwH7W1tTFu3LgYP358bN++/bSP5/joo49iw4YNMWfOnOxrUBg1W3jNHj9+PKZO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\n"
+      "image/png": "iVBORw0KGgoAAAANSUhEUgAAA1MAAACsCAYAAACelPbNAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/YYfK9AAAACXBIWXMAAAsTAAALEwEAmpwYAAAODUlEQVR4nO3de4iU1f8H8I+uqUQ3jcpuIBWufyxkBCKWmAhZ6rquZCUWUmAWllZsraUWEkgZGOUfQheoxBumaIqhIJUEppaR2QWzq0VqpEYoeMnz/SPaX/tr13bOrjuzO6/Xf84+z+N53M+cmfecOR+7pJRSAAAAUJCuxR4AAABARyRMAQAAZBCmAAAAMghTAAAAGYQpAACADMIUAABAhpIMUz/99FNUVlbGXXfd9a+fzZgxIyorK+PgwYMNx61YsaLRMa+99lrMmDEjIiK2bt0ao0ePbvjZe++9F3fccUeMGTMmRo0aFdOnT499+/ZFRMS0adOipqYmampqorKyMqqrq6OmpibuvvvuFo/977EVw549exrGX1NTE9XV1VFZWRkbN24synjKiZrNt3PnzrjzzjsbanbNmjVFG0s5UbOt99Zbb8X9999f7GGUDTWb7/vvv4+JEyfGyJEj47bbbotvvvmmaGMpN+q29fbu3RsDBw6Mzz77rNhDaVK3Yg+gOT169Ijvvvsufv7557j88ssjIuLo0aOxY8eORsd17do1nnvuubj++uvjqquuOu019+/fH/X19bFq1aqGay5cuDAefvjhWLZsWbz00ksNx1ZWVsYbb7wRvXv3buM7O3OuueaaRm9En3322ejXr1/cfPPNRRxV+VCzhUspxbRp02Lu3LkxePDg2LdvX9TW1sa1114bffv2LfbwOj01m+fw4cMxf/78WLt2bQwcOLDYwykrajZPXV1dTJo0Kaqrq+P999+P6dOnx9q1a6NLly7FHlpZULf5jh07Fo899licOHGi2ENpVkmuTEVEVFRUxK233hpr165teGzjxo0xfPjwRsf17Nkz7rnnnqirq4vjx4+f9pqHDh2KEydOxNGjRxsemzRpUkyZMqXg8X366acxfvz4GD16dNTW1saWLVsa/fzo0aPx+OOPxx133BEjRoyIcePGxbfffttwH7W1tTFu3LgYP358bN++/bSP5/joo49iw4YNMWfOnOxrUBg1W3jNHj9+PKZO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\n",
+      "text/plain": [
+       "<Figure size 1080x216 with 5 Axes>"
+      ]
      },
      "metadata": {},
      "output_type": "display_data"
@@ -196,16 +190,9 @@
    "source": [
     "# Plot some inputs!\n",
     "nr_images = 5\n",
-    "fig, axes = plt.subplots(\n",
-    "    nrows=1, ncols=nr_images, figsize=(nr_images * 3, int(nr_images * 2 / 3))\n",
-    ")\n",
+    "fig, axes = plt.subplots(nrows=1, ncols=nr_images, figsize=(nr_images*3, int(nr_images*2/3)))\n",
     "for i in range(nr_images):\n",
-    "    axes[i].imshow(\n",
-    "        (np.reshape(x_batch[i].cpu().numpy(), (28, 28)) * 255).astype(np.uint8),\n",
-    "        vmin=0.0,\n",
-    "        vmax=1.0,\n",
-    "        cmap=\"gray\",\n",
-    "    )\n",
+    "    axes[i].imshow((np.reshape(x_batch[i].cpu().numpy(), (28, 28)) * 255).astype(np.uint8), vmin=0.0, vmax=1.0, cmap=\"gray\")\n",
     "    axes[i].title.set_text(f\"MNIST class - {y_batch[i].item()}\")\n",
     "    axes[i].axis(\"off\")\n",
     "plt.show()"
@@ -225,7 +212,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 19,
+   "execution_count": 5,
    "metadata": {
     "colab": {
      "base_uri": "https://localhost:8080/"
@@ -269,7 +256,6 @@
    "source": [
     "class LeNet(torch.nn.Module):\n",
     "    \"\"\"Network architecture from: https://github.com/ChawDoe/LeNet5-MNIST-PyTorch.\"\"\"\n",
-    "\n",
     "    def __init__(self):\n",
     "        super().__init__()\n",
     "        self.conv_1 = torch.nn.Conv2d(1, 6, 5)\n",
@@ -293,7 +279,6 @@
     "        x = self.fc_3(x)\n",
     "        return x\n",
     "\n",
-    "\n",
     "# Load model architecture.\n",
     "model = LeNet()\n",
     "print(f\"\\n Model architecture: {model.eval()}\\n\")"
@@ -301,34 +286,31 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 20,
+   "execution_count": 6,
    "metadata": {
     "id": "olAfyOHzevne"
    },
    "outputs": [],
    "source": [
-    "def train_model(\n",
-    "    model,\n",
-    "    train_data: torchvision.datasets,\n",
-    "    test_data: torchvision.datasets,\n",
-    "    device: torch.device,\n",
-    "    epochs: int = 20,\n",
-    "    criterion: torch.nn = torch.nn.CrossEntropyLoss(),\n",
-    "    optimizer: torch.optim = torch.optim.SGD(\n",
-    "        model.parameters(), lr=0.001, momentum=0.9\n",
-    "    ),\n",
-    "    evaluate: bool = False,\n",
-    "):\n",
+    "def train_model(model, \n",
+    "                train_data: torchvision.datasets,\n",
+    "                test_data: torchvision.datasets, \n",
+    "                device: torch.device, \n",
+    "                epochs: int = 20,\n",
+    "                criterion: torch.nn = torch.nn.CrossEntropyLoss(), \n",
+    "                optimizer: torch.optim = torch.optim.SGD(model.parameters(), lr=0.001, momentum=0.9), \n",
+    "                evaluate: bool = False):\n",
     "    \"\"\"Train torch model.\"\"\"\n",
-    "\n",
+    "    \n",
     "    model.train()\n",
-    "\n",
+    "    \n",
     "    for epoch in range(epochs):\n",
+    "\n",
     "        for images, labels in train_data:\n",
     "            images, labels = images.to(device), labels.to(device)\n",
-    "\n",
+    "        \n",
     "            optimizer.zero_grad()\n",
-    "\n",
+    "            \n",
     "            logits = model(images)\n",
     "            loss = criterion(logits, labels)\n",
     "            loss.backward()\n",
@@ -337,16 +319,11 @@
     "        # Evaluate model!\n",
     "        if evaluate:\n",
     "            predictions, labels = evaluate_model(model, test_data, device)\n",
-    "            test_acc = np.mean(\n",
-    "                np.argmax(predictions.cpu().numpy(), axis=1) == labels.cpu().numpy()\n",
-    "            )\n",
-    "\n",
-    "        print(\n",
-    "            f\"Epoch {epoch+1}/{epochs} - test accuracy: {(100 * test_acc):.2f}% and CE loss {loss.item():.2f}\"\n",
-    "        )\n",
+    "            test_acc = np.mean(np.argmax(predictions.cpu().numpy(), axis=1) == labels.cpu().numpy())\n",
+    "        \n",
+    "        print(f\"Epoch {epoch+1}/{epochs} - test accuracy: {(100 * test_acc):.2f}% and CE loss {loss.item():.2f}\")\n",
     "\n",
     "    return model\n",
-    "\n",
     "\n",
     "def evaluate_model(model, data, device):\n",
     "    \"\"\"Evaluate torch model.\"\"\"\n",
@@ -359,13 +336,13 @@
     "            images, labels = images.to(device), labels.to(device)\n",
     "            logits = torch.cat([logits, model(images)])\n",
     "            targets = torch.cat([targets, labels])\n",
-    "\n",
+    "    \n",
     "    return torch.nn.functional.softmax(logits, dim=1), targets"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 21,
+   "execution_count": 7,
    "metadata": {
     "colab": {
      "base_uri": "https://localhost:8080/"
@@ -388,23 +365,21 @@
      "name": "stdout",
      "output_type": "stream",
      "text": [
-      "Epoch 1/1 - test accuracy: 95.71% and CE loss 0.24\n",
-      "Model test accuracy: 95.71%\n"
+      "Epoch 1/1 - test accuracy: 94.30% and CE loss 0.13\n",
+      "Model test accuracy: 94.30%\n"
      ]
     }
    ],
    "source": [
     "# Train and evaluate model.\n",
-    "model = train_model(\n",
-    "    model=model.to(device),\n",
-    "    train_data=train_loader,\n",
-    "    test_data=test_loader,\n",
-    "    device=device,\n",
-    "    epochs=1,\n",
-    "    criterion=torch.nn.CrossEntropyLoss().to(device),\n",
-    "    optimizer=torch.optim.SGD(model.parameters(), lr=0.01, momentum=0.9),\n",
-    "    evaluate=True,\n",
-    ")\n",
+    "model = train_model(model=model.to(device),\n",
+    "                    train_data=train_loader,\n",
+    "                    test_data=test_loader,\n",
+    "                    device=device,\n",
+    "                    epochs=1,\n",
+    "                    criterion=torch.nn.CrossEntropyLoss().to(device),\n",
+    "                    optimizer=torch.optim.SGD(model.parameters(), lr=0.01, momentum=0.9),\n",
+    "                    evaluate=True)\n",
     "\n",
     "# Model to GPU and eval mode.\n",
     "model.to(device)\n",
@@ -412,7 +387,7 @@
     "\n",
     "# Check test set performance.\n",
     "predictions, labels = evaluate_model(model, test_loader, device)\n",
-    "test_acc = np.mean(np.argmax(predictions.cpu().numpy(), axis=1) == labels.cpu().numpy())\n",
+    "test_acc = np.mean(np.argmax(predictions.cpu().numpy(), axis=1) == labels.cpu().numpy())        \n",
     "print(f\"Model test accuracy: {(100 * test_acc):.2f}%\")"
    ]
   },
@@ -429,7 +404,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 22,
+   "execution_count": 8,
    "metadata": {
     "colab": {
      "base_uri": "https://localhost:8080/"
@@ -459,29 +434,14 @@
    ],
    "source": [
     "# Generate normalised Saliency and Integrated Gradients attributions of the first batch of the test set.\n",
-    "a_batch_saliency = quantus.normalise_func.normalise_by_negative(\n",
-    "    Saliency(model)\n",
-    "    .attribute(inputs=x_batch, target=y_batch, abs=True)\n",
-    "    .sum(axis=1)\n",
-    "    .cpu()\n",
-    "    .numpy()\n",
-    ")\n",
-    "a_batch_intgrad = quantus.normalise_func.normalise_by_negative(\n",
-    "    IntegratedGradients(model)\n",
-    "    .attribute(inputs=x_batch, target=y_batch, baselines=torch.zeros_like(x_batch))\n",
-    "    .sum(axis=1)\n",
-    "    .cpu()\n",
-    "    .numpy()\n",
-    ")\n",
+    "a_batch_saliency = quantus.normalise_func.normalise_by_negative(Saliency(model).attribute(inputs=x_batch, target=y_batch, abs=True).sum(axis=1).cpu().numpy())\n",
+    "a_batch_intgrad = quantus.normalise_func.normalise_by_negative(IntegratedGradients(model).attribute(inputs=x_batch, target=y_batch, baselines=torch.zeros_like(x_batch)).sum(axis=1).cpu().numpy())\n",
     "\n",
     "# Save x_batch and y_batch as numpy arrays that will be used to call metric instances.\n",
     "x_batch, y_batch = x_batch.cpu().numpy(), y_batch.cpu().numpy()\n",
     "\n",
     "# Quick assert.\n",
-    "assert [\n",
-    "    isinstance(obj, np.ndarray)\n",
-    "    for obj in [x_batch, y_batch, a_batch_saliency, a_batch_intgrad]\n",
-    "]"
+    "assert [isinstance(obj, np.ndarray) for obj in [x_batch, y_batch, a_batch_saliency, a_batch_intgrad]]"
    ]
   },
   {
@@ -495,7 +455,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 23,
+   "execution_count": 9,
    "metadata": {
     "colab": {
      "base_uri": "https://localhost:8080/",
@@ -517,8 +477,10 @@
    "outputs": [
     {
      "data": {
-      "text/plain": "<Figure size 540x648 with 9 Axes>",
-      "image/png": "\n"
+      "image/png": "\n",
+      "text/plain": [
+       "<Figure size 540x648 with 9 Axes>"
+      ]
      },
      "metadata": {},
      "output_type": "display_data"
@@ -527,16 +489,9 @@
    "source": [
     "# Plot explanations!\n",
     "nr_images = 3\n",
-    "fig, axes = plt.subplots(\n",
-    "    nrows=nr_images, ncols=3, figsize=(nr_images * 2.5, int(nr_images * 3))\n",
-    ")\n",
+    "fig, axes = plt.subplots(nrows=nr_images, ncols=3, figsize=(nr_images*2.5, int(nr_images*3)))\n",
     "for i in range(nr_images):\n",
-    "    axes[i, 0].imshow(\n",
-    "        (np.reshape(x_batch[i], (28, 28)) * 255).astype(np.uint8),\n",
-    "        vmin=0.0,\n",
-    "        vmax=1.0,\n",
-    "        cmap=\"gray\",\n",
-    "    )\n",
+    "    axes[i, 0].imshow((np.reshape(x_batch[i], (28, 28)) * 255).astype(np.uint8), vmin=0.0, vmax=1.0, cmap=\"gray\")\n",
     "    axes[i, 0].title.set_text(f\"MNIST digit {y_batch[i].item()}\")\n",
     "    axes[i, 0].axis(\"off\")\n",
     "    axes[i, 1].imshow(a_batch_saliency[i], cmap=\"seismic\")\n",
@@ -562,15 +517,14 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 24,
+   "execution_count": 10,
    "metadata": {
     "id": "aLjrKsT6mS9X"
    },
    "outputs": [],
    "source": [
     "# Define metric for evaluation.\n",
-    "metric_init = quantus.MaxSensitivity(\n",
-    "    nr_samples=10,\n",
+    "metric_init = quantus.MaxSensitivity(nr_samples=10,\n",
     "    lower_bound=0.1,\n",
     "    norm_numerator=quantus.norm_func.fro_norm,\n",
     "    norm_denominator=quantus.norm_func.fro_norm,\n",
@@ -578,13 +532,12 @@
     "    similarity_func=quantus.similarity_func.difference,\n",
     "    disable_warnings=True,\n",
     "    normalise=True,\n",
-    "    abs=True,\n",
-    ")"
+    "    abs=True)"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 25,
+   "execution_count": 11,
    "metadata": {
     "id": "NlV_43TAmJll"
    },
@@ -595,9 +548,6 @@
      "text": [
       "/Users/dilyarabareeva/Documents/UMI_Lab/Quantus/quantus/helpers/warn.py:263: UserWarning: The settings for perturbing input e.g., 'perturb_func' didn't cause change in input. Reconsider the parameter settings.\n",
       "  warnings.warn(\n",
-      "/Users/dilyarabareeva/Documents/UMI_Lab/Quantus/quantus/functions/explanation_func.py:392: UserWarning: Softmax argument has been passed to the explanation function. Different XAI methods may or may not require the output to go through softmax activation. Make sure that your softmax argument choice aligns with the method intended usage.\n",
-      "\n",
-      "  warnings.warn(\n",
       "/opt/homebrew/Caskroom/miniforge/base/envs/quantus/lib/python3.8/site-packages/captum/_utils/gradient.py:56: UserWarning: Input Tensor 0 did not already require gradients, required_grads has been set automatically.\n",
       "  warnings.warn(\n"
      ]
@@ -605,40 +555,36 @@
    ],
    "source": [
     "# Return Max-Sensitivity scores for Saliency.\n",
-    "scores_saliency = metric_init(\n",
-    "    model=model,\n",
-    "    x_batch=x_batch,\n",
-    "    y_batch=y_batch,\n",
-    "    a_batch=a_batch_intgrad,\n",
-    "    device=device,\n",
-    "    explain_func=quantus.explain,\n",
-    "    explain_func_kwargs={\"method\": \"Saliency\", \"softmax\": False},\n",
-    ")"
+    "scores_saliency = metric_init(model=model, \n",
+    "                                  x_batch=x_batch,\n",
+    "                                  y_batch=y_batch,\n",
+    "                                  a_batch=a_batch_intgrad,\n",
+    "                                  device=device,\n",
+    "                                  explain_func=quantus.explain,\n",
+    "                                  explain_func_kwargs={\"method\": \"Saliency\"})"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 26,
+   "execution_count": 12,
    "metadata": {
     "id": "iq7qqDfSmIdj"
    },
    "outputs": [],
    "source": [
     "# Return Max-Sensitivity scores for Integrated Gradients.\n",
-    "scores_intgrad = metric_init(\n",
-    "    model=model,\n",
-    "    x_batch=x_batch,\n",
-    "    y_batch=y_batch,\n",
-    "    a_batch=a_batch_intgrad,\n",
-    "    device=device,\n",
-    "    explain_func=quantus.explain,\n",
-    "    explain_func_kwargs={\"method\": \"IntegratedGradients\"},\n",
-    ")"
+    "scores_intgrad = metric_init(model=model, \n",
+    "                            x_batch=x_batch,\n",
+    "                            y_batch=y_batch,\n",
+    "                            a_batch=a_batch_intgrad,\n",
+    "                            device=device,\n",
+    "                            explain_func=quantus.explain,\n",
+    "                            explain_func_kwargs={\"method\": \"IntegratedGradients\"})"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 27,
+   "execution_count": 13,
    "metadata": {
     "colab": {
      "base_uri": "https://localhost:8080/"
@@ -663,22 +609,21 @@
      "text": [
       "max-Sensitivity scores by Yeh et al., 2019\n",
       "\n",
-      " • Saliency = 0.39 (0.11).\n",
-      " • Integrated Gradients = 0.25 (0.08).\n"
+      " • Saliency = 0.33 (0.08).\n",
+      " • Integrated Gradients = 0.22 (0.08).\n"
      ]
     }
    ],
    "source": [
-    "print(\n",
-    "    f\"max-Sensitivity scores by Yeh et al., 2019\\n\"\n",
-    "    f\"\\n • Saliency = {np.mean(scores_saliency):.2f} ({np.std(scores_saliency):.2f}).\"\n",
-    "    f\"\\n • Integrated Gradients = {np.mean(scores_intgrad):.2f} ({np.std(scores_intgrad):.2f}).\"\n",
-    ")"
+    "print(f\"max-Sensitivity scores by Yeh et al., 2019\\n\" \\\n",
+    "      f\"\\n • Saliency = {np.mean(scores_saliency):.2f} ({np.std(scores_saliency):.2f}).\" \\\n",
+    "      f\"\\n • Integrated Gradients = {np.mean(scores_intgrad):.2f} ({np.std(scores_intgrad):.2f}).\"\n",
+    "      )"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 28,
+   "execution_count": 15,
    "metadata": {
     "colab": {
      "base_uri": "https://localhost:8080/",
@@ -700,10 +645,45 @@
    "outputs": [
     {
      "data": {
-      "text/plain": "                                  Saliency        IntegratedGradients\nmax-Sensitivity  {'0': 0.3584188719838858}  {'0': 0.2516450374849362}",
-      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Saliency</th>\n      <th>IntegratedGradients</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>max-Sensitivity</th>\n      <td>{'0': 0.3584188719838858}</td>\n      <td>{'0': 0.2516450374849362}</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
+      "text/html": [
+       "<div>\n",
+       "<style scoped>\n",
+       "    .dataframe tbody tr th:only-of-type {\n",
+       "        vertical-align: middle;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe tbody tr th {\n",
+       "        vertical-align: top;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe thead th {\n",
+       "        text-align: right;\n",
+       "    }\n",
+       "</style>\n",
+       "<table border=\"1\" class=\"dataframe\">\n",
+       "  <thead>\n",
+       "    <tr style=\"text-align: right;\">\n",
+       "      <th></th>\n",
+       "      <th>Saliency</th>\n",
+       "      <th>IntegratedGradients</th>\n",
+       "    </tr>\n",
+       "  </thead>\n",
+       "  <tbody>\n",
+       "    <tr>\n",
+       "      <th>max-Sensitivity</th>\n",
+       "      <td>{'0': 0.32729245238006116}</td>\n",
+       "      <td>{'0': 0.2225670438458944}</td>\n",
+       "    </tr>\n",
+       "  </tbody>\n",
+       "</table>\n",
+       "</div>"
+      ],
+      "text/plain": [
+       "                                   Saliency        IntegratedGradients\n",
+       "max-Sensitivity  {'0': 0.32729245238006116}  {'0': 0.2225670438458944}"
+      ]
      },
-     "execution_count": 28,
+     "execution_count": 15,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -712,18 +692,17 @@
     "# Use the quantus.evaluate functionality of Quantus to do a more comprehensive quantification.\n",
     "metrics = {\"max-Sensitivity\": metric_init}\n",
     "\n",
-    "xai_methods = {\"Saliency\": a_batch_saliency, \"IntegratedGradients\": a_batch_intgrad}\n",
+    "xai_methods = {\"Saliency\": a_batch_saliency,\n",
+    "               \"IntegratedGradients\": a_batch_intgrad}\n",
     "\n",
-    "results = quantus.evaluate(\n",
-    "    metrics=metrics,\n",
-    "    xai_methods=xai_methods,\n",
-    "    model=model.cpu(),\n",
-    "    x_batch=x_batch,\n",
-    "    y_batch=y_batch,\n",
-    "    agg_func=np.mean,\n",
-    "    explain_func_kwargs={\"method\": \"IntegratedGradients\", \"device\": device},\n",
-    "    call_kwargs={\"0\": {}},\n",
-    ")\n",
+    "results = quantus.evaluate(metrics=metrics,\n",
+    "                           xai_methods=xai_methods,\n",
+    "                           model=model.cpu(),\n",
+    "                           x_batch=x_batch,\n",
+    "                           y_batch=y_batch,\n",
+    "                           agg_func=np.mean,\n",
+    "                           explain_func_kwargs={\"method\": \"IntegratedGradients\", \"device\": device},\n",
+    "                           call_kwargs={\"0\": {}})\n",
     "\n",
     "df = pd.DataFrame(results)\n",
     "df"
@@ -2131,4 +2110,4 @@
  },
  "nbformat": 4,
  "nbformat_minor": 1
-}
\ No newline at end of file
+}
Index: tutorials/Tutorial_Getting_started_with_NLP.ipynb
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/tutorials/Tutorial_Getting_started_with_NLP.ipynb b/tutorials/Tutorial_Getting_started_with_NLP.ipynb
new file mode 100644
--- /dev/null	(date 1681078345896)
+++ b/tutorials/Tutorial_Getting_started_with_NLP.ipynb	(date 1681078345896)
@@ -0,0 +1,3789 @@
+{
+ "cells": [
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "id": "1sXtIxKhnXp9"
+   },
+   "source": [
+    "# Quantus + NLP\n",
+    "[![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/understandable-machine-intelligence-lab/Quantus/main?labpath=tutorials%2FTutorial_NLP_Demonstration.ipynb)\n",
+    "\n",
+    "\n",
+    "This tutorial demonstrates how to use the library for evaluation explanation of text classification models.\n",
+    "For this purpose, we use a pre-trained [Distilbert](https://huggingface.co/distilbert-base-uncased-finetuned-sst-2-english) model from [Huggingface Hub](https://huggingface.co/models) and [GLUE/SST2](https://huggingface.co/datasets/sst2) dataset.\n",
+    "\n",
+    "Author: Artem Sereda\n",
+    "\n",
+    "[![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/drive/1eWK9ebfMUVRG4mrOAQvXdJ452SMLfffv?usp=sharing)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 1,
+   "metadata": {
+    "ExecuteTime": {
+     "start_time": "2023-04-07T02:48:34.568686Z",
+     "end_time": "2023-04-07T02:48:34.583983Z"
+    }
+   },
+   "outputs": [],
+   "source": [
+    "%load_ext autoreload\n",
+    "%autoreload 2"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 2,
+   "metadata": {
+    "ExecuteTime": {
+     "start_time": "2023-04-07T02:48:34.584732Z",
+     "end_time": "2023-04-07T02:48:43.010672Z"
+    }
+   },
+   "outputs": [
+    {
+     "data": {
+      "text/plain": "[PhysicalDevice(name='/physical_device:CPU:0', device_type='CPU'),\n PhysicalDevice(name='/physical_device:GPU:0', device_type='GPU')]"
+     },
+     "execution_count": 2,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "import numpy as np\n",
+    "import pandas as pd\n",
+    "from datasets import load_dataset\n",
+    "import tensorflow as tf\n",
+    "import logging\n",
+    "import random\n",
+    "import matplotx\n",
+    "import matplotlib.pyplot as plt\n",
+    "from tqdm.notebook import tqdm\n",
+    "from transformers import TFAutoModelForSequenceClassification\n",
+    "\n",
+    "import quantus\n",
+    "from quantus.helpers.plotting import plot_model_parameter_randomisation_experiment, plot_token_flipping_experiment\n",
+    "from quantus.functions.normalise_func import normalize_sum_to_1\n",
+    "from quantus.helpers.nlp_utils import map_explanations\n",
+    "from quantus.helpers.utils import get_wrapped_model\n",
+    "from quantus.helpers.plotting import visualise_explanations_as_pyplot\n",
+    "\n",
+    "\n",
+    "#plt.style.use(matplotx.styles.dufte)\n",
+    "logging.getLogger().setLevel(logging.WARNING)\n",
+    "random.seed(42)\n",
+    "tf.config.list_physical_devices()"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "## 1) Preliminaries"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "### 1.1 Load pre-trained model and tokenizer from [huggingface](https://huggingface.co/models) hub"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 3,
+   "metadata": {
+    "ExecuteTime": {
+     "start_time": "2023-04-07T02:48:43.011207Z",
+     "end_time": "2023-04-07T02:48:44.399257Z"
+    }
+   },
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "Metal device set to: Apple M1 Pro\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "All model checkpoint layers were used when initializing TFDistilBertForSequenceClassification.\n",
+      "\n",
+      "All the layers of TFDistilBertForSequenceClassification were initialized from the model checkpoint at distilbert-base-uncased-finetuned-sst-2-english.\n",
+      "If your task is similar to the task the model of the checkpoint was trained on, you can already use TFDistilBertForSequenceClassification for predictions without further training.\n"
+     ]
+    }
+   ],
+   "source": [
+    "model = get_wrapped_model(\n",
+    "    TFAutoModelForSequenceClassification.from_pretrained(\"distilbert-base-uncased-finetuned-sst-2-english\")\n",
+    ")"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "### 1.2 Load test split of [GLUE/SST2](https://huggingface.co/datasets/sst2) dataset"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 4,
+   "metadata": {
+    "ExecuteTime": {
+     "start_time": "2023-04-07T02:48:44.399920Z",
+     "end_time": "2023-04-07T02:48:45.726255Z"
+    }
+   },
+   "outputs": [
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "Found cached dataset sst2 (/Users/artemsereda/.cache/huggingface/datasets/sst2/default/2.0.0/9896208a8d85db057ac50c72282bcb8fe755accc671a57dd8059d4e130961ed5)\n"
+     ]
+    },
+    {
+     "data": {
+      "text/plain": "  0%|          | 0/3 [00:00<?, ?it/s]",
+      "application/vnd.jupyter.widget-view+json": {
+       "version_major": 2,
+       "version_minor": 0,
+       "model_id": "6bac79e057de418580c40672d17091c8"
+      }
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    }
+   ],
+   "source": [
+    "BATCH_SIZE = 32\n",
+    "\n",
+    "dataset = load_dataset(\"sst2\")[\"test\"]\n",
+    "x_batch = dataset[\"sentence\"][:BATCH_SIZE]\n",
+    "random.shuffle(x_batch)"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "### 1.3 Run an example inference and demonstrate models predictions."
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 5,
+   "metadata": {
+    "ExecuteTime": {
+     "start_time": "2023-04-07T02:48:45.728647Z",
+     "end_time": "2023-04-07T02:48:47.914555Z"
+    }
+   },
+   "outputs": [
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "2023-04-07 02:48:45.839861: W tensorflow/tsl/platform/profile_utils/cpu_utils.cc:128] Failed to get CPU frequency: 0 Hz\n"
+     ]
+    },
+    {
+     "data": {
+      "text/plain": "                                                   0         1\n0        this is junk food cinema at its greasiest .  NEGATIVE\n1             uneasy mishmash of styles and genres .  NEGATIVE\n2                       it 's just incredibly dull .  NEGATIVE\n3  a feel-good picture in the best sense of the t...  POSITIVE\n4  here 's a british flick gleefully unconcerned ...  POSITIVE\n5  a well-made and often lovely depiction of the ...  POSITIVE\n6                                       good movie .  POSITIVE\n7  the best way to hope for any chance of enjoyin...  NEGATIVE\n8  some , like ballistic , arrive stillborn ... l...  NEGATIVE\n9  reinforces the talents of screenwriter charlie...  POSITIVE",
+      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>0</th>\n      <th>1</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>this is junk food cinema at its greasiest .</td>\n      <td>NEGATIVE</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>uneasy mishmash of styles and genres .</td>\n      <td>NEGATIVE</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>it 's just incredibly dull .</td>\n      <td>NEGATIVE</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>a feel-good picture in the best sense of the t...</td>\n      <td>POSITIVE</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>here 's a british flick gleefully unconcerned ...</td>\n      <td>POSITIVE</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>a well-made and often lovely depiction of the ...</td>\n      <td>POSITIVE</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>good movie .</td>\n      <td>POSITIVE</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>the best way to hope for any chance of enjoyin...</td>\n      <td>NEGATIVE</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>some , like ballistic , arrive stillborn ... l...</td>\n      <td>NEGATIVE</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>reinforces the talents of screenwriter charlie...</td>\n      <td>POSITIVE</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
+     },
+     "execution_count": 5,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "def decode_labels(y_batch: np.ndarray):\n",
+    "    \"\"\"A helper function to map integer labels to human-readable class names.\"\"\"\n",
+    "    return [model.get_model().config.id2label[i] for i in y_batch]\n",
+    "\n",
+    "\n",
+    "y_batch = model.predict(x_batch).argmax(axis=-1)\n",
+    "\n",
+    "# Show the x, y data.\n",
+    "pd.DataFrame([x_batch[:10], decode_labels(y_batch[:10])]).T"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "id": "Bo1yUcCh_zBD"
+   },
+   "source": [
+    "### 1.4 Visualise the explanations."
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "All available XAI methods can be listed with `quantus.nlp.available_xai_methods()`"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 6,
+   "metadata": {
+    "ExecuteTime": {
+     "start_time": "2023-04-07T02:48:47.914166Z",
+     "end_time": "2023-04-07T02:48:48.019401Z"
+    }
+   },
+   "outputs": [
+    {
+     "data": {
+      "text/plain": "['GradNorm',\n 'GradXInput',\n 'IntGrad',\n 'LIME',\n 'NoiseGrad',\n 'NoiseGrad++',\n 'SHAP']"
+     },
+     "execution_count": 6,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "xai_methods = quantus.available_nlp_xai_methods_tf()\n",
+    "xai_methods.sort()\n",
+    "xai_methods"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "The main \"entrypoint\" for using built-in XAI methods is `quantus.explain`"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 7,
+   "metadata": {
+    "ExecuteTime": {
+     "start_time": "2023-04-07T02:48:47.964053Z",
+     "end_time": "2023-04-07T02:50:27.917870Z"
+    }
+   },
+   "outputs": [
+    {
+     "data": {
+      "text/plain": "  0%|          | 0/7 [00:00<?, ?it/s]",
+      "application/vnd.jupyter.widget-view+json": {
+       "version_major": 2,
+       "version_minor": 0,
+       "model_id": "fbc2695afe8a4af9b1152d7fd00b0aee"
+      }
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/plain": "<Figure size 1125x875 with 210 Axes>",
+      "image/png": "\n"
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    }
+   ],
+   "source": [
+    "mini_x_batch = [\"director rob marshall went out gunning to make a great one .\"]\n",
+    "mini_y_batch = model.predict(mini_x_batch).argmax(axis=-1)\n",
+    "mini_a_batch = []\n",
+    "\n",
+    "pbar = tqdm(xai_methods)\n",
+    "for i in pbar:\n",
+    "    pbar.desc = i\n",
+    "    a = quantus.explain(model, mini_x_batch, mini_y_batch, method=i)\n",
+    "    mini_a_batch.append(a[0])\n",
+    "\n",
+    "mini_a_batch = map_explanations(mini_a_batch, normalize_sum_to_1)\n",
+    "visualise_explanations_as_pyplot(mini_a_batch, xai_methods)\n",
+    "plt.show()"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "## 2) Quantitative analysis using Quantus.\n",
+    "To see all available metric and their category, we can run `quantus.available_nlp_metrics()`"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 8,
+   "metadata": {
+    "ExecuteTime": {
+     "start_time": "2023-04-07T02:50:27.917722Z",
+     "end_time": "2023-04-07T02:50:28.054921Z"
+    }
+   },
+   "outputs": [
+    {
+     "data": {
+      "text/plain": "{'Faithfulness': ['TokenFlipping'],\n 'Robustness': ['Max-Sensitivity',\n  'Avg-Sensitivity',\n  'Relative Input Stability',\n  'Relative Output Stability',\n  'Relative Representation Stability'],\n 'Randomisation': ['Model Parameter Randomisation', 'Random Logit']}"
+     },
+     "execution_count": 8,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "quantus.available_nlp_metrics()"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 14,
+   "metadata": {
+    "ExecuteTime": {
+     "start_time": "2023-04-07T02:54:43.664862Z",
+     "end_time": "2023-04-07T02:57:43.177241Z"
+    }
+   },
+   "outputs": [
+    {
+     "data": {
+      "text/plain": "Evaluation...:   0%|          | 0/9 [00:00<?, ?it/s]",
+      "application/vnd.jupyter.widget-view+json": {
+       "version_major": 2,
+       "version_minor": 0,
+       "model_id": "d9138ca19cae4e38ad4fa9e3def6b1da"
+      }
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "The settings for perturbing input e.g., 'perturb_func' didn't cause change in input. Reconsider the parameter settings.\n"
+     ]
+    }
+   ],
+   "source": [
+    "# We will need it later\n",
+    "# fmt: off\n",
+    "unk_token_embedding = model.embedding_lookup(\n",
+    "    np.asarray([[model.tokenizer.tokenizer.unk_token_id]])\n",
+    ")[0, 0]\n",
+    "# fmt: on\n",
+    "\n",
+    "metrics = {\n",
+    "    # By default, perturbation is applied to embeddings inputs.\n",
+    "    \"Average Sensitivity\": quantus.AvgSensitivity(nr_samples=10, disable_warnings=True),\n",
+    "    \"Max Sensitivity\": quantus.MaxSensitivity(\n",
+    "        nr_samples=10,\n",
+    "        disable_warnings=True,\n",
+    "        # Perturbation type is inferred from perturb_func signature.\n",
+    "        perturb_func=quantus.spelling_replacement,\n",
+    "        normalise=True,\n",
+    "        normalise_func=normalize_sum_to_1\n",
+    "    ),\n",
+    "    \"Relative Input Stability\": quantus.RelativeInputStability(\n",
+    "        nr_samples=10,\n",
+    "        disable_warnings=True,\n",
+    "        perturb_func=quantus.spelling_replacement,\n",
+    "        normalise=True,\n",
+    "        normalise_func=normalize_sum_to_1\n",
+    "    ),\n",
+    "    \"Relative Output Stability\": quantus.RelativeOutputStability(\n",
+    "        nr_samples=10,\n",
+    "        disable_warnings=True,\n",
+    "        perturb_func=quantus.spelling_replacement,\n",
+    "        normalise=True,\n",
+    "        normalise_func=normalize_sum_to_1\n",
+    "    ),\n",
+    "    \"Relative Representation Stability\": quantus.RelativeRepresentationStability(\n",
+    "        nr_samples=10,\n",
+    "        disable_warnings=True,\n",
+    "        perturb_func=quantus.spelling_replacement,\n",
+    "        normalise=True,\n",
+    "        normalise_func=normalize_sum_to_1\n",
+    "    ),\n",
+    "    \"Model Parameter Randomisation\": quantus.ModelParameterRandomisation(\n",
+    "        seed=42,\n",
+    "        disable_warnings=True,\n",
+    "        normalise=True,\n",
+    "        normalise_func=normalize_sum_to_1\n",
+    "    ),\n",
+    "    \"Random Logit_1\": quantus.RandomLogit(\n",
+    "        num_classes=2,\n",
+    "        seed=42,\n",
+    "        disable_warnings=True,\n",
+    "        normalise=True,\n",
+    "        normalise_func=normalize_sum_to_1,\n",
+    "\n",
+    "    ),\n",
+    "    \"Random Logit_2\": quantus.RandomLogit(\n",
+    "        num_classes=2,\n",
+    "        seed=42,\n",
+    "        disable_warnings=True,\n",
+    "    ),\n",
+    "    \"Token Flipping\": quantus.TokenFlipping(\n",
+    "        disable_warnings=True,\n",
+    "        abs=True,\n",
+    "        normalise=True,\n",
+    "        normalise_func=normalize_sum_to_1\n",
+    "    ),\n",
+    "}\n",
+    "\n",
+    "# By default, qn.explain is used to generate explanations.\n",
+    "call_kwargs = {\n",
+    "    # We use GradXInput as default method for all methods.\n",
+    "    \"explain_func_kwargs\": {\"method\": \"GradXInput\"},\n",
+    "    \"explain_func\": quantus.explain,\n",
+    "    # We evaluate Relative Input Stability for IntGrad with different baselines.\n",
+    "    \"Relative Input Stability\": [\n",
+    "        {\n",
+    "            \"explain_func_kwargs\": {\n",
+    "                \"method\": \"IntGrad\",\n",
+    "            }\n",
+    "        },\n",
+    "        {\n",
+    "            \"explain_func_kwargs\": {\n",
+    "                \"method\": \"IntGrad\",\n",
+    "                \"baseline_fn\": tf.function(lambda x: unk_token_embedding),\n",
+    "            }\n",
+    "        },\n",
+    "    ],\n",
+    "}\n",
+    "\n",
+    "# Explain_func_kwargs are passed only to metrics' __call__ method.\n",
+    "result = quantus.evaluate_nlp(\n",
+    "    metrics=metrics,\n",
+    "    model=model,\n",
+    "    x_batch=x_batch,\n",
+    "    y_batch=y_batch,\n",
+    "    call_kwargs=call_kwargs\n",
+    ")"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "### 2.2 Results visualisation"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "For pruning task (default one) the tokens are removed in order of increasing relevance scores.\n",
+    "We expect Mean Squared Error to increase as we remove more important ones, \n",
+    "which acts as a proof that higher scores are assigned to important features."
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 15,
+   "metadata": {
+    "ExecuteTime": {
+     "start_time": "2023-04-07T03:00:43.274722Z",
+     "end_time": "2023-04-07T03:00:43.646701Z"
+    }
+   },
+   "outputs": [
+    {
+     "data": {
+      "text/plain": "<Figure size 640x480 with 1 Axes>",
+      "image/png": "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h2Pb6dOnTfv27Y3FYnEEVmOMyc/PN2FhYWbcuHGObefbLlc+38q/VV2fBdAQ3LoC3OiDDz5QQECApk6d6rT9nnvukTFG//rXv5y2G2M0efJk/e1vf9Orr76qcePGOfatXLlSBQUFuummm3T06FHHIyAgQP3799fHH39c5fXvuusup+eXXHKJ9u3b51LbExISdO211zqeR0ZG6tZbb9XmzZuVk5PjdOyECRMaPHZmyJAh6tSpk+N5z549FRkZ6VJ709LSdMkllziet23bVt26dXM6d8WKFcrMzFSvXr0c26Kjo/WLX/yizuvn5eVp9erVuv7661VcXOz42x87dkzDhg3Tnj179P333zuOnzdvnmw2m8aOHasZM2bolltu0ejRo6tcNzAwUHfeeafjeXBwsO68804dOXJEGzdulCS99dZb6t69u1JTU50+9yuuuEKSqnzugwcPVlpaWp3vqdL48eMd/w4ICFDfvn1ljNHtt9/u2B4VFVXl73m+7WrI5wu4E4ORATc6cOCAEhISFBER4bS9sgrrwIEDTtsXLVqk48ePa/78+brpppuc9u3Zs0eSHD8k54qMjHR6HhoaqrZt2zpta9WqlfLz811qe+fOnauMpenataskaf/+/YqLi3NsT0lJcematUlKSqqyzdX2unLugQMHlJmZWeW4zp0713n9vXv3yhijGTNmaMaMGdUec+TIEbVr107SmQD19NNP6//9v/+n2NhYPf3009Wek5CQUGXg9tl/4wEDBmjPnj3atWtXlc/y7Nc92/l+Fuf+7Ww2m0JDQ9WmTZsq248dO+Z4fr7tasjnC7gTQQfwoYEDB2rLli2aN2+err/+ekVHRzv22e12SWdK2s8OGZXOLR32ZnVSWFhYlW3nhqRKNQ2Grqm9xoVB2w051xWVf/vf/va3GjZsWLXHnBuYPvzwQ0lSfn6+vvvuu3qXS9vtdl1wwQV68sknq92fmJjo9Ly6z6I21f3tXPl7nm+7PP0ZAa4i6ABulJycrH//+98qLi526tX5+uuvHfvP1rlzZz322GO67LLLNHz4cK1atcpxXmW3f0xMjIYMGeLxtlf2YpwdWL755htJqraa6lytWrWqduK3c3uxvCU5OVl79+6tsr26befq2LGjJCkoKMilv/2KFSv04osv6t5779XixYs1btw4rV+/vkoYPXz4cJVy/HP/xp06ddLWrVt15ZVX1hgefcET7WpM7w/+izE6gBtdffXVqqio0Lx585y2P/XUU7JYLBoxYkSVc3r27KkPPvhAu3bt0qhRo3Ty5ElJ0rBhwxQZGamHH35Y5eXlVc774Ycf3Nr2w4cPa+nSpY7nRUVFWrRokXr16lVtj9K5OnXqpMLCQm3bts2xLTs72+ma3jRs2DCtW7dOW7ZscWzLy8vT4sWL6zw3JiZGl112mZ5//nllZ2dX2X/2376goEDjx49Xv3799PDDD+vFF1/Upk2b9PDDD1c57/Tp03r++ecdz0+dOqXnn39ebdu2VZ8+fSRJ119/vb7//nstWLCgyvknT55USUlJne33BE+0qzLwMTMyPIkeHcCNRo0apcsvv1x//OMftX//fmVkZOijjz7Su+++q2nTpjkNzjzbgAED9O677+rqq6/W2LFjtWzZMkVGRmr+/Pm65ZZb1Lt3b914441q27atDh48qH/+858aOHBglUDVEF27dtXtt9+uDRs2KDY2Vv/3f/+n3Nxcvfzyyy6df+ONN+q+++7Ttddeq6lTp+rEiROaP3++unbtqk2bNrmtna6699579eqrr2ro0KGaMmWKwsPD9eKLLyopKUl5eXl19iY888wzGjRokC644AJNmDBBHTt2VG5urtatW6fvvvtOW7dulST9+te/1rFjx/Tvf/9bAQEBGj58uMaPH6/Zs2dr9OjRysjIcFwzISFBjz76qPbv36+uXbvqjTfe0JYtW/TCCy8oKChI0pnZoN98803ddddd+vjjjzVw4EBVVFTo66+/1ptvvqkPP/xQffv29dwfrgaeaFdluPvjH/+oG2+8UUFBQRo1apTHJqBE80TQAdzIarXqvffe0wMPPKA33nhDL7/8sjp06KDHH39c99xzT63nXnHFFXrzzTc1ZswY3XLLLVqyZIl+/vOfKyEhQY888ogef/xxlZWVqV27drrkkkv0y1/+0q1t79Kli+bOnavf/e532r17t1JSUvTGG2/UOEblXK1bt9bSpUs1ffp03XvvvUpJSdGcOXO0Z88enwSdxMREffzxx5o6daoefvhhtW3bVpMmTVJ4eLimTp1a58zBaWlp+uqrrzRr1iwtXLhQx44dU0xMjC688EI98MADkqT33ntPixYt0hNPPKHU1FTHuU8++aRWrlypcePGacOGDY4Q06pVK/3973/XlClTtGDBAsXGxmrevHmaMGGC41yr1aply5bpqaee0qJFi7R06VK1aNFCHTt21K9//WvH4GVv80S7LrroIv35z3/Wc889pxUrVshutysrK4ugA7eyGEaGAc1ehw4dlJ6ervfff9/XTfG4adOm6fnnn9fx48e9OoD7sssu09GjR7V9+3avvSYAxugA8GOV450qHTt2TK+88ooGDRrEGlpAM8GtKwB+KzMzU5dddpm6d++u3NxcvfTSSyoqKqpxbhwA/oegA8BvXX311frHP/6hF154QRaLRb1799ZLL72kSy+91NdNA+AljNEBAAB+izE6AADAbxF0AACA32r2Y3TsdrsOHz6siIgIpiMHAKCJMMaouLhYCQkJslpr7rdp9kHn8OHDVRajAwAATcOhQ4fUvn37Gvc3+6BTuYDioUOHFBkZ6ePWAAAAVxQVFSkxMdFpAeXqNPugU3m7KjIykqADAEATU9ewEwYjAwAAv0XQAQAAfougAwAA/BZBBwAA+C2CDgAA8FsEHQAA4LcIOgAAwG8RdAAAgN8i6AAAAL/V7GdGBgAA7ldhN/oyK09HiksVExGqfinRCrB6f/Fsgg4AAHCrFduzNWv5TmUXljq2xdtCNXNUmoanx3u1Ldy6AgAAbrNie7YmvrrJKeRIUk5hqSa+ukkrtmd7tT0EHQAA4BYVdqNZy3fKVLOvctus5TtVYa/uCM8g6AAAALf4MiuvSk/O2Yyk7MJSfZmV57U2EXQAAIBbHCmuOeTU5zh3IOgAAAC3iIkIdetx7kDVFQAAOG/VlY/vOFxY6zkWSXG2M8d6C0EHAACcl+rKx8NDAlRSVuF4bpGcBiVXzqAzc1SaV+fT4dYVAABwWU3l45UhZ3SvBM3/RW/F2ZxvT8XZQjX/5t5en0eHHh0AAOCS2srHK32Zlacnr++lq3rEMTMyAABoOuoqH5d+Kh/P7NRamZ1ae6llNePWFQAAcMn3+SdcOs6b5eN1oUcHAADUKq/klBat26+XPsty6Xhvlo/XhaADAEAzVdcK44fyTujFT/fpja8OqbTcLkkKsEgVNQzS8UX5eF0IOgAANEO1rTDevlULPb92n/657bAql6VKbxepuwZ3kkXS5CWbJTWO8vG6EHQAAGhmKkvEz+2YyS4s1V2vbnLadkmXNpo4uJMyO7WWxXImwARYLVVCUtyPIcnb5eN1IegAANCMuFIiLkmjM+J1x+BO6pFgq7JveHq8hqY1jvLxuhB0AABoRlwpEZekG/slVxtyKgVYLY2ifLwuBB0AAPzc0eNlWr8vT1/sO6aVO3NcOqcxlYg3BEEHAAA/c3aw+WLfMe05cvy8r9GYSsQbgqADAEAjUFepd21cCTapcREa0LG1+nWI1qzlO3SkuKzacTqNsUS8IQg6AAD4WG2l3tVVMZ1PsBnQsbX6p0SrVXiwY5/VKk18dVOjWWHckyzGmLoGXvu1oqIi2Ww2FRYWKjIy0tfNAQA0MzWVelfGjPk391bfDtENCjY1ve75hKvGxtXfb4IOQQcA4CMVdqNBj66utQoq0GrRaXvVn+rzDTY1vX5TKBGvjqu/39y6AgDAR1wp9a4MOe4INudqKiXiDUHQAQDAR1wt4X742nT9vH+yh1vjn6y+bgAAAM2VqyXcKW1aergl/ougAwCAj/RLiVa8LVQ1jYqx6MwAYX8p9fYFgg4AAD4SYLVo5qg0Sao27BhJI9LPrClVUc2AZNSNqiuqrgAAPlZdqfe5mlLptzdQXu4igg4AoDGoLPX+984cvfSf/VX2nz2vDmHH9d9vbl0BANAIBFgt6pcSrQ+2V7/oZmWvxKzlO7mNdR4IOgAA+Fh5hV3bvivQg+/tqPX2lZGUXViqL7PyvNe4Jo55dAAA8LLi0nJtOligjfvz9NWBfG0+WKCT5RUun+/q/Dsg6AAA4HHfF5zUV/vz9NX+fH11IF+7c4p07t0nW1iQOrYJ1+ZDBXVez9X5d0DQAQCgRvVZC6rCbvR1TpEj1Gzcn6fD1dyOSopuob4dWqlvcrT6dmilzm1bykga9Ohq5RSWVlnkUzozIDmOeXXOC0EHAIBquLq6d0nZaW05VPBjsMnT5oMFOl522ulaAVaL0hMi1efHUNM3uZViIqvvlZk5Kk0TX90ki+QUdixn7W8qC282BpSXU14OADjHiu3Zmvjqpiq9KpXhY8IlKSqvMNp4IF87s4uqVEFFhATqwuRWuii5lfp0aKVeiVFqEex634KrIas5Yx4dFxF0AABnq7AbDXp0dZ2rip+tXVSYo6emT3K0usVFNLjXpT63zZoTV3+/uXUFAGh2KuxGR4+X6fuCkzrseJTqcMFJfXOk2KWQMywtVj/LSFDfDq0UbwtzexsDrBZldmrt9us2NwQdAIDfKS4tdwSXyjCTXVjq+HdOYalON3DSvat7xmtURoKbWgxPIegAAJqU8gq7cgrPhJjDhT/1xJzdK1N8zmDg6gRYLYqLDFVCVKgSosLOPGyhKiot1+MfflPn+ZR4Nw0EHQCAS7wxZsQYo/wT5TX2xBwuOKkjxWVyZXRpVIsgJdjOBJh2UaGKj/rp3wlRYWrbMkSBAVUXCKiwG736xUFKvP0EQQcAUCd3VQGVllc49byc6ZFxfl5abq/zOsEB1io9MY5/R4UpISr0vKqczhZgtVDi7UeouqLqCgBqVVuptfTTatp2u9EPZw3wzS44qyem8MzzYyWnXHrNthEhVQJMZU9MvC1MrcODZfVw0KDEu3GjvNxFBB0AqJkrpdbBARbFRIYot6hM5RV1/6S0CA5Qu7N6XipvL1U+j7OFKiQwwJ1vo94o8W68KC8HADTYl1l5dZZan6ow+i7/zDFnD/CNt1XtiWkXFabIsEBZLE0jLFDi3fQRdAAANXJ1lexpV3bR9RclKiai+gG+gK8QdAAANdp/tMSl4/p3bK2EKPdPmgc0FEEHAJq56sahHC87rQff26Glm7+v9VxKrdHYNZn+xUceeUQWi0XTpk1zbCstLdWkSZPUunVrtWzZUmPGjFFubq7vGgkATcyK7dka9Ohq3bTgC/369S26acEXuuihf2vwYx9r6ebvZbVII9LjZNFPVVaVKLVGU9Akgs6GDRv0/PPPq2fPnk7bf/Ob32j58uV66623tGbNGh0+fFjXXXedj1oJAE1LZdn4uYON80pOqeBkuWIiQvSPiRdr/s19NP/m3oqzOc8EHGcLdZSWA41Vo791dfz4cf3iF7/QggULNHv2bMf2wsJCvfTSS1qyZImuuOIKSdLLL7+s7t2764svvtCAAQN81WQAaPQq7Eazlu+sdubfSlaLRRntoyRJw9PjNTQtjlJrNDmNvkdn0qRJGjlypIYMGeK0fePGjSovL3fanpqaqqSkJK1bt67G65WVlamoqMjpAQDNjStl4zlFpfoyK8/xvLLUenSvdsrs1JqQgyahUffovP7669q0aZM2bNhQZV9OTo6Cg4MVFRXltD02NlY5OTk1XnPOnDmaNWuWu5sKAE2Kq2Xjrh4HNFaNtkfn0KFD+vWvf63FixcrNNR9K8Tef//9KiwsdDwOHTrktmsDQFPh6srbrNCNpq7RBp2NGzfqyJEj6t27twIDAxUYGKg1a9bo6aefVmBgoGJjY3Xq1CkVFBQ4nZebm6u4uLgarxsSEqLIyEinBwA0N32SWyk6PLjG/RadWdeJsnE0dY321tWVV16p//73v07bfvnLXyo1NVX33XefEhMTFRQUpFWrVmnMmDGSpN27d+vgwYPKzMz0RZMBoEmoXKwyr4YFNikbhz9ptEEnIiJC6enpTtvCw8PVunVrx/bbb79d06dPV3R0tCIjIzVlyhRlZmZScQUANahpJfKzxbFCN/xIow06rnjqqadktVo1ZswYlZWVadiwYXr22Wd93SwAaJRcKSmPDg/Smt9druDARjuyATgvFmNMbf+d93uuLvMOAE2RMUbHSk7pwLESrdp1RM9+8m2d57w2YQArdqPRc/X3u0n36AAAzvTUZBee1IFjJ8488kp04OgJHcg7oYPHSlRyquK8rkdJOfwJQQcAmoCy0xU6lHdSB46V6MCxEzqYd0L7j5Xo4LETOpR/QuUVNXfOWyxSgi1MtrAg7cyue5JUSsrhTwg6AOCC6lb4dndFUnFpuVOvzMFjP4WZ7KJS1TbQIDjAqvbRYerQOlxJ0S2U3LryEa72rcIUEhigCrvRoEdXK6ewtNpxOqxEDn9E0AGAOlSWY5+9ZEJ8PSqTjDE6evyUDuaVaP9Zt5b2/9hDU1O5d6WWIYFKim6hDm1aKCk6/EyQiW6h5DbhiosMrTN4BVgtmjkqTRNf3SSL5BR2KCmHv2IwMoORAdSipnLsyihw7urdFXajwwUnnW4tHfixZ+ZQ3ok6x8u0aRn8Y49MuKNXJik6XB1at1B0eLAsloaHEHcFN8CXXP39JugQdADUoPJWT22LX0aGBmp0rwQdyj8zGPg7F8fLnH1rKTm6hZJ+/HfLEO90tHvjVhzgSVRdAUADubLCd1Hpab3yxUGnbcEBViVGhyn5x/EyHX4MMUmtWzjGy/ha5UrkgL8j6ADAj8or7NqdU6zNB/O16WCBPt3zg0vnXdk9RkO7xzp6ZVwZLwPAOwg6AJqtI8Wl2nSgQJsP5WvzgQJt+75ApeX2877O+EEd6R0BGimCDoBGzx3jScpOV2jn4SJtPligTQfztflggb4vOFnluMjQQF2Y1EoXJkUpo32Ufv/ONh0pKqMcG2iiCDoAGrX6VAgZY3S4sFSbfww0mw7ma8f3RTpV4dxbY7VIXWMjHMGmd1IrdWwTLutZIWrW//SgHBtowqi6ouoKaLRcLe0uLa/Qf78v1KYDZ4LN5kP5yi0qq3K96PBg9U6KOhNsEqPUMzHKpSonyrGBxofychcRdIDGyZXS7hbBAerYJlxf5xTrtN35f8oCrBalxUc6emouTIpSUnSLes9DQzk20LhQXg6gSXOltPvEqQptP3xm7aa2ESHq7Qg1rXRBO5vCgt1Xxk05NtA0EXQANErfF5xw6bhxmcm6Y3AnJdhC3TJrMAD/QtAB0GjY7UYb9udp2Zbv9e7m7106Z3h6vNpFhXm4ZQCaKoIOAJ/bk1uspZu/17tbDjuVfFstkr2GUYSUdgNwBUEHgNu5MnD3SFGp3tt6WMu2fK/t3xc5tkeEBGrEBXG65sJ2Kigp16QlmyRR2g2gfgg6ANyqtlLsS7q01Uc7c/TOpu/1n71HHb01gVaLLusWo2svbKcru8coNOinQcTzrb2rXC+O0m4ALqK8nPJywG1qmvemUnCA1WnSvt5JUbr2wnYa2TNB0eHBNV6X0m4A56K8HIBXna6w64F3d9QYciTpVIVdHVq30LUXttc1FyYouXW4S9emtBtAfRF0ANSptLxCOYWlyi0qVU7Rmf/MLSo78+/CUuUWlyq7oLTKpH3VmXPdBcrs1MYLrQYAgg7QrFXYjY4dPxNYcgpLlVtcptzCs8PMme1Fpafd9ppHiqsuzQAAnkLQAfyQMUbFZafP9LZU9rycFVwqA80Px8tU4UIvjCSFBQUozhaqmIgQxdlCFRt55hEXGarYyBAdLjipqa9vqfM6MRGhDXx3AOA6gg7gBt4cLHvqtF1HiitDS9lPAeasW0q5RaU6carCpetZLWeWT4iLDFXMj8Hl7EBTuT0yNLDWmYcr7EZz/vW1cgpLqx2nw7w3AHyBoAM0kLtWtjbGKK/klHKKSnWkul6YHwPMsZJTLl8zMjTwTK+Lowcm5McemFDH9tbhwQoMsJ7Xe65OgNWimaPSNPHVTbKIeW8ANA6Ul1NejgaoqZy68qd8/s29NTw9XidPVTjGwRwpPvOfZweanMJS/VBc5lR6XZvgAKtiqoSWEMe/K0NNi2Dv/38ZdwU/AKiNq7/fBB2CDuqpwm406NHVta6wHWi1KDTIquNlrt1GkqQ2LYMVE1HZCxNy1jiYn3phWrUIatQLWDLvDQBPYx4dwMNW7cqtNeRI0mm7cYScFsEBP453+bEnxhaq2Ajn20oxEaEKDmz4bSRfY94bAI0FQQc4D/t+OK5/78rVyp25+mp/vkvn/OHqVN3YL0kRIbUP5gUAuB9BB6hFhd1oy6F8fbQzV//ematvfyg572tc0C5KkaFBHmgdAKAuBB00C+czZuTkqQp9uucH/XtXrlZ/fURHj/9U5RQUYNGAjq01NC1Wl3WL0Q3Pr6OcGgAaMYIO/J4rVUA/FJdp9ddnbkl9uueoyk7/VP0UERqoK1JjNKR7rAZ3a+vUO0M5NQA0blRdUXXl12or/zaSrumVoIN5J7T5UIHO/ia0iwrT0LRYXZUWq4tSohVUyzwzlFMDgPdRXu4igo7/cqX8+2w929s0pHushqbFKjUu4rwGDlNODQDeRXk5mr0vs/JcCjm/GthBd1zaSXG2+q/BRDk1ADROTX/CDqAGWw65Vv6dkRjVoJADAGi86NGBXzldYddHO3P198/3a31WnkvnsJo2APgvgg6ahLrGwBw9XqbXvzyoxesPOm5XWS1ScKBVpeXVrx9F+TcA+D+CDhq92qqa4mxh+vvn+/XPbdmOBTFbhwfrpn5J+nn/JG37rkATX90kifJvAGiOqLqi6qpRq6k8vDoZiVG67eJkXX1BvEICA5yuQfk3APgXqq7Q5FXYjWYt31lnyLn2wgSNuzhFvRKjqt0/PD1eQ9PiKP8GgGaIoINGy9Xy8Ov7JtUYcipR/g0AzRPl5Wi0jhS7NtGfq8cBAJofgg4aLVuYayt+Ux4OAKgJt67gc9WVjh8rKdMTH+2u9TzKwwEAdSHowKeqq4hq0zJYdruUd+KUWoYE6njZaVYHBwDUC0EHPlNT6fjR46ckSW1bBuutuy7W1zlFVcJQHOXhAAAXEHTgE66UjlutFiVGt1CHNuGUhwMA6oWgA59wpXQ8t6hMX2blKbNTa8rDAQD1QtUVfILScQCANxB04BOuloRTOg4AaAhuXcFrzi4jbxMeoqiwIBWcLK/2WErHAQDuQNCBV1RXRl4TSscBAO5C0IHH1bUCeVSLIBWc+Klnh9JxAIC7EHTgUXWVkVskhQZatXh8fx09XkbpOADArQg68Ki6ysiNpJyiMlktFo3u1c57DQMANAtUXcGjKCMHAPgSQQceRRk5AMCXCDrwqH4p0Yq3haqmETcWSfGUkQMAPKTRBp358+erZ8+eioyMVGRkpDIzM/Wvf/3Lsb+0tFSTJk1S69at1bJlS40ZM0a5ubk+bDGqE2C16H8y4mtd04oycgCApzTaoNO+fXs98sgj2rhxo7766itdccUVGj16tHbs2CFJ+s1vfqPly5frrbfe0po1a3T48GFdd911Pm41zrVie7ZeWJtV4/47Lk2hjBwA4DEWY0xt/2e7UYmOjtbjjz+usWPHqm3btlqyZInGjh0rSfr666/VvXt3rVu3TgMGDHD5mkVFRbLZbCosLFRkZKSnmt4sVdiNBj26utaqq3hbqD677wp6dAAA58XV3+9G26NztoqKCr3++usqKSlRZmamNm7cqPLycg0ZMsRxTGpqqpKSkrRu3bpar1VWVqaioiKnBzzDlRXKswtL9WVWnpdaBABobhp10Pnvf/+rli1bKiQkRHfddZeWLl2qtLQ05eTkKDg4WFFRUU7Hx8bGKicnp9ZrzpkzRzabzfFITEz04Dto3igtBwD4WqMOOt26ddOWLVu0fv16TZw4UePGjdPOnTsbdM37779fhYWFjsehQ4fc1Fqci9JyAICvNeqZkYODg9W5c2dJUp8+fbRhwwb97W9/0w033KBTp06poKDAqVcnNzdXcXFxtV4zJCREISEhnmw2ftQvJVoRoYEqLj1d7X5WKAcAeFqjDjrnstvtKisrU58+fRQUFKRVq1ZpzJgxkqTdu3fr4MGDyszM9HErm68Ku9GXWXk6UlyqmIhQfXOkuNaQI1FaDgDwrEYbdO6//36NGDFCSUlJKi4u1pIlS/TJJ5/oww8/lM1m0+23367p06crOjpakZGRmjJlijIzM8+r4grus2J7tmYt31nt4ONhPWK19btC5Zy1jxXKAQDe0GiDzpEjR3TrrbcqOztbNptNPXv21IcffqihQ4dKkp566ilZrVaNGTNGZWVlGjZsmJ599lkft7p5WrE9WxNf3VTjpIDX9GqnZ3/Rx6m3hxXKAQDe0KTm0fEE5tFpmLrmyqkch8NcOQAAd/KreXTQeNU1V44Rc+UAAHyHoIMGYa4cAEBjRtBBgzBXDgCgMSPooEH6pUQr3haqmkbfWHRmPSvmygEA+AJBBw0SYLXofzLia6y4kpgrBwDgOwQdNMiK7dl6YW1WjfvvuDSFuXIAAD5D0EG9VdiNZi3fWWtvzntbs1Vhb9YzGAAAfIigg3qrq7RcorQcAOBbBB3U23f5J1w6jtJyAICvNNolINB4VdiN3t74nR7+YJdLx1NaDgDwFYIOqjh3FfKz16X6bM9Rzf7nTn2dUyxJCrBYVFHDKiKVyz9QWg4A8JXzDjonT55UXl6e2rVr57R9x44d6tGjh9saBt+obhXyeFuoJlzSUZ/u+UEf7/5BkhQZGqipV3ZRbGSIpr62RZKcBiVXFpNTWg4A8KXzCjr/+Mc/NG3aNLVp00Z2u10LFixQ//79JUm33HKLNm3a5JFGwjtqWoU8u7BUf3p/pyQp0GrRLZnJmnpFF7UKD5YkBQVYq4SjOFuoZo5Ko7QcAOBT5xV0Zs+erY0bNyo2NlYbN27UuHHj9Ic//EE///nP1cwXQW/yXCkVDw206v2pl6hzTEun7cPT4zU0La7G210AAPjKeQWd8vJyxcbGSpL69OmjtWvX6tprr9XevXtlsfCj1pS5UipeetquH4rLqgQd6cwMyZmdWnuqeQAA1Mt5lZfHxMRo27ZtjufR0dFauXKldu3a5bQdTQ+rkAMA/NF5BZ1XXnlFMTExTtuCg4P12muvac2aNW5tGLyLVcgBAP7ovG5dtW/fvsZ9AwcObHBj4D3nlpB3aN1CgVaLTtewXAOl4gCApsgt8+iUl5crJydHJ06cUNu2bRUdzY9hY1ZdCXldIUeiVBwA0PTUewmI4uJizZ8/X4MHD1ZkZKQ6dOig7t27q23btkpOTtaECRO0YcMGd7YVblBZQn7uwOPKkHN93/aKtznfnoqzhWr+zb0pFQcANDn16tF58skn9dBDD6lTp04aNWqU/vCHPyghIUFhYWHKy8vT9u3b9emnn+qqq65S//79NXfuXHXp0sXdbcd5cqWE/NM9R7Xmd5dr44F8SsUBAE1evYLOhg0btHbt2hpnQu7Xr59+9atf6bnnntPLL7+sTz/9lKDTCLi62vjGA/mUigMA/EK9gs5rr73m0nEhISG666676vMS8ABKyAEAzU29x+g888wz2r59uzvbAg+LiQhx8ThKyAEA/qHeQScnJ0c33nijLr/8cr399tuy2+3ubBcaoMJutO7bY3p3y/da9+0xVdiNSssr9MaGQ7WeZ9GZBTwpIQcA+AuLaeAiVdnZ2Vq5cqX279+vBx54wF3t8pqioiLZbDYVFhYqMjLS181psOpKx2MiQhQaFKCDeSdktUh2cybUVLfaONVVAICmwNXf7wbPo3P69GndeuutDb0M3KCm1cePFJdJksKDA7RgXF8VnSxntXEAQLPQ4KCTmpqqe+65R7///e/VokULd7QJ9eBK6Xh4SKD6p7RWgNXCauMAgGah3mN0Kq1cuVIffvihunTpooULF7qhSagPV0rHjxSX6cusPEk/rTY+ulc7ZXZqTcgBAPilBgediy++WOvXr9ecOXM0Y8YM9enTR59++qk72obzQOk4AABVNTjoVLr11lu1e/dujRw5UiNGjNDYsWOVlZXlrsujDqw+DgBAVW4LOpWuuuoqjR8/XkuXLlVaWpruvfdeHT9+3N0v02xVVzouSblFtffUUDoOAGiOGjwY+bnnntOGDRu0YcMG7dq1S1arVenp6brrrruUkZGh119/XWlpaXrnnXfUt29fd7S52aqudDwuMlQZiTZ9uCPXsa2m0nFWHwcANDcNnkcnMTFR/fv314ABAzRgwAD16dNHYWFhTsc8/PDDWrJkSaOcSbmpzKNTU+n42e4a3Ek929n05386h6F4SscBAH7G1d/vBgcdV+Tm5iohIUEVFRWefqnz1hSCToXdaNCjq2utqopqEaSN/ztUAVaLKuyG0nEAgF/z2oSBroiJidHq1au98VJ+yZXS8YIT5foyK89RKs7q4wAAeGAwcnUsFosGDx7sjZfyS5SOAwBQP14JOmgYSscBAKgftwadb775RqdPn3bnJSGpX0q04m2hqmmUDaXjAABUz61Bp3v37tq3b587LwmdWa5h5qi0GvcbSf+TEc+AYwAAzuHWoOOFAq5ma3h6vO64NKXG/S+szdKK7dlebBEAAI0fY3SaiAq70Xtbaw8ys5bvdMyUDAAACDpNRl0l5kZSdmGpY3VyAABA0GkyKDEHAOD8EXSaiJiIEBePo8QcAIBKXpkZGQ1zvOy0Xv3iQK3HWCTFUWIOAIATgk4jUt0aVft+OK67Xt2ob38okdUi2Q2rkwMA4Cq3Bp377rtPrVuzxlJ9rNierVnLnVcdjwoL0onyCp06bVdcZKie+cWF+qG4rMpxcaxODgBAtbyyenlj1hhWL1+xPVsTX92kmj6I1LiWenX8ALVpeWacDquTAwCau0a1ejlqVmE3mrV8Z40hR5IKT55WqxbBjuesTg4AgGuouvKxuubHkZgfBwCA+iLo+Bjz4wAA4DkeuXVVXl6uxYsX64cfflBaWppGjBghq5VMVR1X571hfhwAAM6fR9LHjTfeqK+++kphYWF6//331bt3b+3evdsTL9Xk9UuJVlxkzSHGIime+XEAAKgXj/To7Nu3T2+//bbj+ZYtWzRhwgStXbvWEy/XpK3cmaPS0xXV7mN+HAAAGsYjPToRERHau3ev43mvXr2Un5/viZdq0irLygtOlFe7P6pFkObf3Jv5cQAAqCeP9OjMmzdPo0eP1tVXX620tDTt2rVLycnJnnipJsuVsvKQQKuGpsV5rU0AAPibBvfoHDp0qMq2nj17atOmTerbt68OHDigTp066c0332zoS/kVV8rKc4rKKCsHAKABGtyjk5qaqnvuuUe///3v1aJFC8f2kJAQ3XDDDQ29vN+irBwAAM9rcI/OypUr9eGHH6pLly5auHChG5rUPFBWDgCA5zU46Fx88cVav3695syZoxkzZqhPnz769NNP3dE2v9YvJVrxtlDVVEtFWTkAAA3ntqqrW2+9Vbt379bIkSM1YsQIjR07VllZWfW+3pw5c3TRRRcpIiJCMTExuuaaa6rMxVNaWqpJkyapdevWatmypcaMGaPc3NyGvhWvCLBa9D8Z8bUORqasHACAhnF7eflVV12l8ePHa+nSpUpLS9O9996r48ePn/d11qxZo0mTJumLL77QypUrVV5erquuukolJSWOY37zm99o+fLleuutt7RmzRodPnxY1113nTvfjses2J6tF9bWHATvuDSFsnIAABrIYoyprVOhTs8995w2bNigDRs2aNeuXbJarUpPT9eAAQOUkZGh119/XXv37tU777yjvn371vt1fvjhB8XExGjNmjW69NJLVVhYqLZt22rJkiUaO3asJOnrr79W9+7dtW7dOg0YMMCl67q6zLs7VdiNBj26utaqq3hbqD677wp6dAAAqIarv98Nrrp66KGH1L9/f916660aMGCA+vTpo7CwMMf+O+64Qw8//LBuu+02bd++vd6vU1hYKEmKjj4zZmXjxo0qLy/XkCFDHMekpqYqKSmp1qBTVlamsrIyx/OioqJ6t6m+zmfF8sxOrb3UKgAA/E+Dg0518+ica/z48ZoxY0a9X8Nut2vatGkaOHCg0tPTJUk5OTkKDg5WVFSU07GxsbHKycmp8Vpz5szRrFmz6t0Wd6C0HAAA76jXGJ2DBw+e1/FlZWVavXp1fV5KkjRp0iRt375dr7/+er2vUen+++9XYWGh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JigoyCQnJ5sJEyaYnJwcXze7Waruc5JkXn75ZccxJ0+eNHfffbdp1aqVadGihbn22mtNdna27xrdABZjjPF+vAIAAPA8xugAAAC/RdABAAB+i6ADAAD8FkEHAAD4LYIOAADwWwQdAADgtwg6AADAbxF0AHjNJ598IovFUmUNHV86ceKExowZo8jISEfbOnTooL/+9a+OYywWi5YtW+azNp7t3LYBqB1BB2hmFi9erMTERLVq1UrTp0932rd//3517dpVRUVFtV6jMQaW+vr73/+uTz/9VJ9//rmys7Nls9mqHJOdne202j2ApoO1roBm5OjRoxo/frwWLlyojh07auTIkbriiiv0s5/9TJJ0991365FHHlFkZKSPW+o93377rbp376709PQaj2mKKzYDOIMeHaAZ2bdvn2w2m2644QZddNFFuvzyy7Vr1y5J0muvvaagoCBdd911tV5j//79uvzyyyVJrVq1ksVi0W233SZJKisr09SpUxUTE6PQ0FANGjRIGzZsqPFaJ06c0IgRIzRw4EBH79CLL76o7t27KzQ0VKmpqXr22WedXttiseidd97R5ZdfrhYtWigjI0Pr1q1zHHPgwAGNGjVKrVq1Unh4uHr06KEPPvig2te/7LLL9MQTT2jt2rWyWCy67LLLqj3u7FtXlW14/fXXdfHFFys0NFTp6elas2aN4/jKHq9//vOf6tmzp0JDQzVgwABt377d6bqfffaZLrnkEoWFhSkxMVFTp05VSUmJY/+RI0c0atQohYWFKSUlRYsXL67xbwmgBr5ebAuA9+Tl5ZmIiAizadMmc+zYMZOSkmJWrFhh8vLyTKdOnczBgwfrvMbp06fN22+/bSSZ3bt3m+zsbFNQUGCMMWbq1KkmISHBfPDBB2bHjh1m3LhxplWrVubYsWPGmJ8WfszPzzf5+fnm4osvNldddZUpKSkxxhjz6quvmvj4ePP222+bffv2mbfffttER0ebhQsXGmOMycrKMpJMamqqef/9983u3bvN2LFjTXJysikvLzfGGDNy5EgzdOhQs23bNvPtt9+a5cuXmzVr1lT7Xo4dO2YmTJhgMjMzTXZ2tqOdycnJ5qmnnnIcJ8ksXbrUqQ3t27c3//jHP8zOnTvN+PHjTUREhDl69KjT++zevbv56KOPzLZt28zPfvYz06FDB3Pq1CljjDF79+414eHh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\n"
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    }
+   ],
+   "source": [
+    "plot_token_flipping_experiment(\n",
+    "    result[\"Token Flipping\"],\n",
+    "    style=matplotx.styles.dufte\n",
+    ")\n",
+    "plt.show()"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "ExecuteTime": {
+     "start_time": "2023-04-05T20:32:08.313547Z",
+     "end_time": "2023-04-05T20:32:08.468697Z"
+    }
+   },
+   "source": [
+    "Model Parameter Randomisation shows us how layers' weights correlate with explanations.\n",
+    "0 - means randomizing layers weights changes explanation completely\n",
+    "1 - means randomizing layers weighs did not change explanation at all."
+   ],
+   "outputs": [
+    {
+     "data": {
+      "text/plain": "<Figure size 640x480 with 1 Axes>",
+      "image/png": "\n"
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    }
+   ],
+   "execution_count": 39
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 16,
+   "metadata": {
+    "ExecuteTime": {
+     "start_time": "2023-04-07T03:00:44.715998Z",
+     "end_time": "2023-04-07T03:00:44.911514Z"
+    }
+   },
+   "outputs": [
+    {
+     "data": {
+      "text/plain": "<Figure size 800x600 with 1 Axes>",
+      "image/png": "\n"
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    }
+   ],
+   "source": [
+    "mpr = result[\"Model Parameter Randomisation\"]\n",
+    "with plt.style.context(matplotx.styles.dufte):\n",
+    "    plot_model_parameter_randomisation_experiment(mpr)\n",
+    "    plt.show()"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "ExecuteTime": {
+     "start_time": "2023-04-05T20:40:19.936013Z",
+     "end_time": "2023-04-05T20:40:20.005082Z"
+    }
+   },
+   "source": [
+    "Robustness metrics show us how sensitive are explanations to slight perturbations.\n",
+    "For this category it is impossible to give general advice. Typically,\n",
+    "- Higher values could mean explanations take more inputs into account, than model\n",
+    "- Lower values could mean explanations are highly biased against certain features from input space (tokens)."
+   ],
+   "outputs": [
+    {
+     "data": {
+      "text/plain": "dict"
+     },
+     "execution_count": 66,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "execution_count": 66
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 17,
+   "metadata": {
+    "ExecuteTime": {
+     "start_time": "2023-04-07T03:00:46.187158Z",
+     "end_time": "2023-04-07T03:00:46.333471Z"
+    }
+   },
+   "outputs": [
+    {
+     "data": {
+      "text/plain": "<Figure size 640x480 with 1 Axes>",
+      "image/png": "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TqcpKSmhvLyctra2rPbV19fT09PD5OQkIyMjZDIZPB7Pc4UigBMnTuB2uxkfHzfbYHyWamtrgRfzuYAnAaKiooKRkRHm5+dJpVLmHa233nbBZrPx9ttvMzw8TCAQYGxsDJvNZt4lupCw/KxOnjyZdUfrkpISurq6cuZONTQ08N3vfpehoSGmp6ex2WzU1NRw7ty5HSfRF6Kuro54PM7S0hKzs7Nsbm5SWlqK1+uls7Mz63NSUlLCO++8w9DQELOzsywtLZk35sx3R2s5mPSYDxHZk5GRER4/fkxvb+++9hTJq8l47MW7776r58XJa0tzikRkV6lUirGxMfMWCCIiB5GGz0RkW0tLSywuLrKwsMDa2hrHjx9/6Zd0i4jsF53dRGRbCwsLDA4OUlxcTEdHB52dnfvdJBGRl0ZzikRERETQnCIRERERQKFIREREBFAoEhEREQEUikREREQAhSIRERERQKFIREREBFAoEhEREQEUikREREQAhSIRERERQKFIREREBFAoEhEREQEUikREREQAhSIRERERQKFIREREBFAoEhEREQEUikREREQAhSIRERERQKFIREREBFAoEhEREQEUikREREQAhSIRERERQKFIREREBFAoEhEREQEUikREREQAhSIRERERQKFIREREBFAoEhEREQEUikREREQAhSIRERERQKFIREREBFAoEhEREQEUikREREQAhSIRERERQKFIREREBFAoEhEREQEUikREREQAhSIRERERQKFIREREBFAoEhEREQEUikREREQAhSIRERERQKFIREREBFAoEhEREQEUikREREQAhSIRERERQKFIREREBFAoEhEREQEUikREREQAhSIRERERQKFIREREBFAoEskrFAoRCoX2uxki8gL8/d//PRaLhWg0CuQe35FIBIvFwt///d/vVxPlFaFQJCIiB1pjYyMAjx49yrveWG6Uk8PLkslkMvvdCJFXjfEr0u1273NLROR5pVIpOjs7OXXqFL/4xS8Ih8PAk+M7nU5z5coVHj16xPDwMDabbZ9bK/tJPUUiInKg2Ww2PvzwQ65evcqVK1e4ffs2kUiEW7duceXKFa5evcoHH3ygQCTqKRLJRz1FIgfPRx99xI9//GMmJibMZe3t7XzwwQe8//77+9cweWUoFInkoVAkcjClUil+9atfMT8/T2dnJxcuXFAPkZgUikTyUCgSObh0fMt2NKdIREREBIUiEREREUChSERERARQKBIREREBFIpEREREAIUiEREREUChSERERARQKBIREREBFIpEREREAIUiEREREUChSERERARQKBIREREBFIpEREREAIUiEREREUChSERERARQKBIREREBFIpEREREAIUiEREREUChSERERARQKBIREREBFIpEREREAIUiEREREUChSERERARQKBIREREBFIpEREREAIUiEREREQCKnmWjUCjEwMAAy8vLZDIZKioq6OjowOv17rmOVCrFyMgIfr+ftbU17HY7DQ0NHD9+nJKSkrzb+P1+xsbGiEQiWK1Wqqur6e7upqqqatv9zMzMMDExwcrKCqlUitLSUtxuNydOnKCsrKzQly4iIiIHVMGhaGFhgVu3bmGz2fB6vRQVFTEzM8PXX3/N2toanZ2du9aRyWS4ffs2wWAQt9tNY2MjsViMyclJFhYWeOedd3KC0eDgIAMDA5SVldHW1sbm5iaBQIAbN27w1ltv4fF4cvbx4MEDJicncTqdZlsTiQRLS0vE43GFIhERETEVFIrS6TQPHjzAYrFw/vx5KisrAejq6uKzzz6jv7+fpqYmHA7HjvVMTU0RDAbxer2cPXsWi8UCwPj4OA8fPqS/v5/e3l6zfDQaZXBwEKfTycWLF7Hb7QC0t7dz/fp17t+/z+XLl816AMbGxpicnKStrY033ngja53xWkREREQMBc0pWlxcJBaL0dzcbAYiALvdzrFjx0in0/j9/l3rmZycBKCnpycrrLS1teFwOJieniaVSpnLp6amyGQyHDt2zAxEAJWVlXi9XqLRKEtLS+byVCrF4OAgDoeDU6dO5QQiAKtV06lERETkDwoORQC1tbU56+rq6rLKbCeVShEKhXC5XDk9ShaLhbq6OlKpFCsrKzn7NfaRb79bQ1EwGCSZTNLY2Egmk2FmZoahoSHGx8eJRqN7eKUiIiJy2BQ0fBaLxQBwuVw560pLS7HZbGaZ3epwOp151xvLo9GoOU8oFoths9koLS3NKW+0ZWvYMQKVxWLh2rVrOW3q6Ojg5MmTO7YzFArtuF4Otkgkst9NEJGXRMf34eN2u/dUrqBQlEwmn2xUlH8zu91ultnO5uamWTZvg35ft1HO2O92V6TlK7+xsQHA6OgolZWVvPPOO5SXlxMOh7l//z6j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Ooi11PXM9ayurgJQka547jaNr0axlgZYTyWAyueuT/aXQpGIiLwWZmKTONv/P356e79bks3ZDjOxXs5Sv99NkeekUCQiIq+FJmcrsfG/4e/+opeOuhfQU1Tx/D1Fo8Eo//p/3qfpUutz1yX7T6FIREReCyW2UtIJL+0VXfR4nn2oKmQNAeB2u5+7TelEmHRigRJb6XPXJftPE61FREREUCgSERERARSKRERERACFIhERERFAoUhEREQEUCgSERERARSKRERERACFIhERERFAoUhEREQEUCgSERERARSKRERERACFIhERERFAoUhEREQEUCgSERERARSKRERERAAo2u8GiIiI7MVaMgXAo0D4uepZWF5lJpygqzlDqd32XHWNBKPPtb28WhSKRETktTD6+wDy7z765gXVOPKC6gFnib5ODwL9FUVE5LXw3okGADrqXJQ9Rw/Pg/E5/v3VEf7LX/TSWed67nY5S4por3E+dz2y/xSKRETktVDtLOYvz/meu57V1VUAOutcnPRWPnd9cnA8UygKhUIMDAywvLxMJpOhoqKCjo4OvF7vnutIpVKMjIzg9/tZW1vDbrfT0NDA8ePHKSkpybuN3+9nbGyMSCSC1Wqlurqa7u5uqqqqcuru7+9nZWWFaDRKMpnEbrfjdDrx+Xy0tLRgtWqOuYiIiPxBwclgYWGBGzdusLy8jNfrpa2tjUQiwddff83IyN7GZzOZDLdv32ZgYIDi4mKOHDlCdXU1k5OTXL9+nfX19ZxtBgcHuXv3Luvr67S1tdHU1MTS0hI3btxgaWkpq+zm5ibj4+MANDQ00NHRQWNjI2tra9y/f58vv/ySTCZT6EsXERGRA6ygnqJ0Os2DBw+wWCycP3+eyson3Y5dXV189tln9Pf309TUhMPh2LGeqakpgsEgXq+Xs2fPYrFYABgfH+fhw4f09/fT29trlo9GowwODuJ0Orl48SJ2ux2A9vZ2rl+/zv3797l8+bJZT3FxMf/8n//znN6gdDrNrVu3WFhYYH5+noaGhkJevoiIiBxgBfUULS4uEovFaG5uNgMRgN1u59ixY6TTafx+/671TE5OAtDT02MGGYC2tjYcDgfT09OkUilz+dTUFJlMhmPHjpmBCKCyshKv10s0Gs3qLbJYLHmHx6xWqxmEYrFYAa9cREREDrqCQxFAbW1tzrq6urqsMttJ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FpZDzITX6WqupdS+eyDq7u7WY2VEXhMKRbIdXccuh87AwABnz559oXXeuXNHPY8iIq85hSI5dLq7u7lz586OZR6Mz/HTXw7zd3/ZS2dd+Z7qFBGR15tCkRw6Dodj116dRJmfkq8y9Jzq5aS38ltqmYiI7Cc95kNEREQEhSIRERERQKFIREREBFAoEhEREQEUikREREQAhSIRERERQKFIREREBFAoEhEREQEUikREREQAhSIRERERQKFIREREBFAoEhEREQEUikREREQAhSIRERERQKFIREREBFAoEhEREQEUikREREQAhSIRERERAIr2uwEiL9r4YozY+ubz1bEUB2AkGH0RTcJZUkR7jfOF1CUiIi+HJZPJZPa7ESIvyvhijEsffLrfzcjr2r/9voKRyCsgFAoB4Ha797kl8qpRT5EcKEYP0X/5i14661zPXM/C8goz4QRdzbWU2m3P1aaRYJR/8z/vP3fvlYiIvFwKRXIgdda5OOmtfObtQ440vc0V+iUpInKIaKK1iIiICApFIiIiIoBCkYiIiAigUCQiIiICKBSJiIiIAApFIiIiIoBCkYiIiAigUCQiIiICKBSJiIiIAApFIiIiIoAe8yEHzHoqgbU0wPjqINbSZ3/22erqKgAV6YrnbtP4ahRraYD1VAJ49kePiIjIy6VQJAfKTGwSZ/v/x09v73dLsjnbYSbWy1nq97spIiKyDYUiOVCanK3Exv+Gv/uLXjrqXkBPUcXz9xSNBqP86/95n6ZLrc9dl4iIvDwKRXKgpNN20gkvsUgD6YpnH6paizqZCSfostRSarc9V5tSiSjpxAIlttLnqkdERF4uhSI5UEaDUQD+3UffvKAaR15QPeAs0eEmIvIq01laDpT3TjQA0FHnouw5engejM/x76+O8F/+opfO5xiGMzhLimivcT53PSIi8vIoFMmBUu0s5i/P+Z67HmNOUWedi5NeXTEmInIY6D5FIiIiIigUiYiIiAAaPpNDKB6PMzAwsGOZwfE51udG6PvGxcZ8+a51dnd343A4XlQTRURkH1gymUxmvxsh8ioKBoPU1dXtdzNE5CXQ8S35aPhMZBvBYHC/myAiL4mOb8lHoUhEREQEhSIRERERQKFIREREBFAoEtmWJmGKHFw6viUfXX0mIiIignqKRERERACFIhERERFAoUhEREQEUCgSERERARSK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\n"
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    }
+   ],
+   "source": [
+    "with plt.style.context(matplotx.styles.dufte):\n",
+    "    pd.DataFrame.from_dict(\n",
+    "    {\n",
+    "        k: v\n",
+    "        for k, v in result.items()\n",
+    "        if k\n",
+    "        in (\n",
+    "            \"Average Sensitivity\",\n",
+    "            \"Max Sensitivity\",\n",
+    "        )\n",
+    "    }\n",
+    "    ).boxplot()\n",
+    "    # plt.yscale(\"log\")\n",
+    "    plt.title(\"Sensitivity metrics comparison\")\n",
+    "    plt.show()"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 18,
+   "metadata": {
+    "ExecuteTime": {
+     "start_time": "2023-04-07T03:00:47.092563Z",
+     "end_time": "2023-04-07T03:00:47.573825Z"
+    }
+   },
+   "outputs": [
+    {
+     "data": {
+      "text/plain": "<Figure size 640x480 with 1 Axes>",
+      "image/png": "\n"
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    }
+   ],
+   "source": [
+    "rs = {\n",
+    "    \"RIS_0\": result[\"Relative Input Stability\"][0],\n",
+    "    \"RIS_{unk}\": result[\"Relative Input Stability\"][1],\n",
+    "    \"ROS\": result[\"Relative Output Stability\"],\n",
+    "    \"RRS\": result[\"Relative Representation Stability\"]\n",
+    "}\n",
+    "\n",
+    "with plt.style.context(matplotx.styles.dufte):\n",
+    "    pd.DataFrame.from_dict(rs).boxplot()\n",
+    "    plt.yscale(\"log\")\n",
+    "    plt.title(\"Relative Stability metrics comparison\")\n",
+    "    plt.show()"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "outputs": [],
+   "source": [],
+   "metadata": {
+    "collapsed": false
+   }
+  }
+ ],
+ "metadata": {
+  "accelerator": "GPU",
+  "colab": {
+   "collapsed_sections": [],
+   "provenance": []
+  },
+  "gpuClass": "standard",
+  "kernelspec": {
+   "display_name": "Python 3 (ipykernel)",
+   "language": "python",
+   "name": "python3"
+  },
+  "language_info": {
+   "codemirror_mode": {
+    "name": "ipython",
+    "version": 3
+   },
+   "file_extension": ".py",
+   "mimetype": "text/x-python",
+   "name": "python",
+   "nbconvert_exporter": "python",
+   "pygments_lexer": "ipython3",
+   "version": "3.9.16"
+  },
+  "vscode": {
+   "interpreter": {
+    "hash": "3e1faee55f3ced5625a3cb76335de31f85cad4aa5905c1a154bea41f61f60e02"
+   }
+  },
+  "widgets": {
+   "application/vnd.jupyter.widget-state+json": {
+    "003944c19322432f8fbffe4a95bb5a3d": {
+     "model_module": "@jupyter-widgets/base",
+     "model_module_version": "1.2.0",
+     "model_name": "LayoutModel",
+     "state": {
+      "_model_module": "@jupyter-widgets/base",
+      "_model_module_version": "1.2.0",
+      "_model_name": "LayoutModel",
+      "_view_count": null,
+      "_view_module": "@jupyter-widgets/base",
+      "_view_module_version": "1.2.0",
+      "_view_name": "LayoutView",
+      "align_content": null,
+      "align_items": null,
+      "align_self": null,
+      "border": null,
+      "bottom": null,
+      "display": null,
+      "flex": null,
+      "flex_flow": null,
+      "grid_area": null,
+      "grid_auto_columns": null,
+      "grid_auto_flow": null,
+      "grid_auto_rows": null,
+      "grid_column": null,
+      "grid_gap": null,
+      "grid_row": null,
+      "grid_template_areas": null,
+      "grid_template_columns": null,
+      "grid_template_rows": null,
+      "height": null,
+      "justify_content": null,
+      "justify_items": null,
+      "left": null,
+      "margin": null,
+      "max_height": null,
+      "max_width": null,
+      "min_height": null,
+      "min_width": null,
+      "object_fit": null,
+      "object_position": null,
+      "order": null,
+      "overflow": null,
+      "overflow_x": null,
+      "overflow_y": null,
+      "padding": null,
+      "right": null,
+      "top": null,
+      "visibility": null,
+      "width": null
+     }
+    },
+    "01af026a8db8434e9ae9eeaa06599420": {
+     "model_module": "@jupyter-widgets/base",
+     "model_module_version": "1.2.0",
+     "model_name": "LayoutModel",
+     "state": {
+      "_model_module": "@jupyter-widgets/base",
+      "_model_module_version": "1.2.0",
+      "_model_name": "LayoutModel",
+      "_view_count": null,
+      "_view_module": "@jupyter-widgets/base",
+      "_view_module_version": "1.2.0",
+      "_view_name": "LayoutView",
+      "align_content": null,
+      "align_items": null,
+      "align_self": null,
+      "border": null,
+      "bottom": null,
+      "display": null,
+      "flex": null,
+      "flex_flow": null,
+      "grid_area": null,
+      "grid_auto_columns": null,
+      "grid_auto_flow": null,
+      "grid_auto_rows": null,
+      "grid_column": null,
+      "grid_gap": null,
+      "grid_row": null,
+      "grid_template_areas": null,
+      "grid_template_columns": null,
+      "grid_template_rows": null,
+      "height": null,
+      "justify_content": null,
+      "justify_items": null,
+      "left": null,
+      "margin": null,
+      "max_height": null,
+      "max_width": null,
+      "min_height": null,
+      "min_width": null,
+      "object_fit": null,
+      "object_position": null,
+      "order": null,
+      "overflow": null,
+      "overflow_x": null,
+      "overflow_y": null,
+      "padding": null,
+      "right": null,
+      "top": null,
+      "visibility": null,
+      "width": null
+     }
+    },
+    "085a46ae240449fe81b49198a82b3d24": {
+     "model_module": "@jupyter-widgets/controls",
+     "model_module_version": "1.5.0",
+     "model_name": "HBoxModel",
+     "state": {
+      "_dom_classes": [],
+      "_model_module": "@jupyter-widgets/controls",
+      "_model_module_version": "1.5.0",
+      "_model_name": "HBoxModel",
+      "_view_count": null,
+      "_view_module": "@jupyter-widgets/controls",
+      "_view_module_version": "1.5.0",
+      "_view_name": "HBoxView",
+      "box_style": "",
+      "children": [
+       "IPY_MODEL_1b4416f783ae4e7e89199b17e7f4ce7c",
+       "IPY_MODEL_e54bc025c8e44b2abeffd71ffa89db0e",
+       "IPY_MODEL_41940b33cd8b4e86b821e1fdba069ff9"
+      ],
+      "layout": "IPY_MODEL_1850b3d7d7a7401480db9384615309af"
+     }
+    },
+    "0a615f111c064d96a2cd880a4872fad6": {
+     "model_module": "@jupyter-widgets/controls",
+     "model_module_version": "1.5.0",
+     "model_name": "ProgressStyleModel",
+     "state": {
+      "_model_module": "@jupyter-widgets/controls",
+      "_model_module_version": "1.5.0",
+      "_model_name": "ProgressStyleModel",
+      "_view_count": null,
+      "_view_module": "@jupyter-widgets/base",
+      "_view_module_version": "1.2.0",
+      "_view_name": "StyleView",
+      "bar_color": null,
+      "description_width": ""
+     }
+    },
+    "0b8c5c5ef635404e9a4f62215357a6b0": {
+     "model_module": "@jupyter-widgets/controls",
+     "model_module_version": "1.5.0",
+     "model_name": "FloatProgressModel",
+     "state": {
+      "_dom_classes": [],
+      "_model_module": "@jupyter-widgets/controls",
+      "_model_module_version": "1.5.0",
+      "_model_name": "FloatProgressModel",
+      "_view_count": null,
+      "_view_module": "@jupyter-widgets/controls",
+      "_view_module_version": "1.5.0",
+      "_view_name": "ProgressView",
+      "bar_style": "success",
+      "description": "",
+      "description_tooltip": null,
+      "layout": "IPY_MODEL_2517cb5f22644bc1b101c0b5f4d77da8",
+      "max": 10,
+      "min": 0,
+      "orientation": "horizontal",
+      "style": "IPY_MODEL_0a615f111c064d96a2cd880a4872fad6",
+      "value": 10
+     }
+    },
+    "0c419d27bcdf430f924fc77136369a06": {
+     "model_module": "@jupyter-widgets/controls",
+     "model_module_version": "1.5.0",
+     "model_name": "DescriptionStyleModel",
+     "state": {
+      "_model_module": "@jupyter-widgets/controls",
+      "_model_module_version": "1.5.0",
+      "_model_name": "DescriptionStyleModel",
+      "_view_count": null,
+      "_view_module": "@jupyter-widgets/base",
+      "_view_module_version": "1.2.0",
+      "_view_name": "StyleView",
+      "description_width": ""
+     }
+    },
+    "0f69d704bc68421fa9f2fa7e408c3a55": {
+     "model_module": "@jupyter-widgets/base",
+     "model_module_version": "1.2.0",
+     "model_name": "LayoutModel",
+     "state": {
+      "_model_module": "@jupyter-widgets/base",
+      "_model_module_version": "1.2.0",
+      "_model_name": "LayoutModel",
+      "_view_count": null,
+      "_view_module": "@jupyter-widgets/base",
+      "_view_module_version": "1.2.0",
+      "_view_name": "LayoutView",
+      "align_content": null,
+      "align_items": null,
+      "align_self": null,
+      "border": null,
+      "bottom": null,
+      "display": null,
+      "flex": null,
+      "flex_flow": null,
+      "grid_area": null,
+      "grid_auto_columns": null,
+      "grid_auto_flow": null,
+      "grid_auto_rows": null,
+      "grid_column": null,
+      "grid_gap": null,
+      "grid_row": null,
+      "grid_template_areas": null,
+      "grid_template_columns": null,
+      "grid_template_rows": null,
+      "height": null,
+      "justify_content": null,
+      "justify_items": null,
+      "left": null,
+      "margin": null,
+      "max_height": null,
+      "max_width": null,
+      "min_height": null,
+      "min_width": null,
+      "object_fit": null,
+      "object_position": null,
+      "order": null,
+      "overflow": null,
+      "overflow_x": null,
+      "overflow_y": null,
+      "padding": null,
+      "right": null,
+      "top": null,
+      "visibility": null,
+      "width": null
+     }
+    },
+    "10258155181245e581447f690cc4011f": {
+     "model_module": "@jupyter-widgets/base",
+     "model_module_version": "1.2.0",
+     "model_name": "LayoutModel",
+     "state": {
+      "_model_module": "@jupyter-widgets/base",
+      "_model_module_version": "1.2.0",
+      "_model_name": "LayoutModel",
+      "_view_count": null,
+      "_view_module": "@jupyter-widgets/base",
+      "_view_module_version": "1.2.0",
+      "_view_name": "LayoutView",
+      "align_content": null,
+      "align_items": null,
+      "align_self": null,
+      "border": null,
+      "bottom": null,
+      "display": null,
+      "flex": null,
+      "flex_flow": null,
+      "grid_area": null,
+      "grid_auto_columns": null,
+      "grid_auto_flow": null,
+      "grid_auto_rows": null,
+      "grid_column": null,
+      "grid_gap": null,
+      "grid_row": null,
+      "grid_template_areas": null,
+      "grid_template_columns": null,
+      "grid_template_rows": null,
+      "height": null,
+      "justify_content": null,
+      "justify_items": null,
+      "left": null,
+      "margin": null,
+      "max_height": null,
+      "max_width": null,
+      "min_height": null,
+      "min_width": null,
+      "object_fit": null,
+      "object_position": null,
+      "order": null,
+      "overflow": null,
+      "overflow_x": null,
+      "overflow_y": null,
+      "padding": null,
+      "right": null,
+      "top": null,
+      "visibility": null,
+      "width": null
+     }
+    },
+    "103fbd2c1b0243558f7dcec60993cee4": {
+     "model_module": "@jupyter-widgets/controls",
+     "model_module_version": "1.5.0",
+     "model_name": "HBoxModel",
+     "state": {
+      "_dom_classes": [],
+      "_model_module": "@jupyter-widgets/controls",
+      "_model_module_version": "1.5.0",
+      "_model_name": "HBoxModel",
+      "_view_count": null,
+      "_view_module": "@jupyter-widgets/controls",
+      "_view_module_version": "1.5.0",
+      "_view_name": "HBoxView",
+      "box_style": "",
+      "children": [
+       "IPY_MODEL_9e300b052b084d979ddc125cc6dd1467",
+       "IPY_MODEL_e62c917b449e4917968db34c41bb052f",
+       "IPY_MODEL_3608352acb4a4e35b7f1f86d7fe68440"
+      ],
+      "layout": "IPY_MODEL_1729d9fd508344d0bb3b94b2477e33ec"
+     }
+    },
+    "10e538cd196347cd8ca19d063a1c9f54": {
+     "model_module": "@jupyter-widgets/controls",
+     "model_module_version": "1.5.0",
+     "model_name": "DescriptionStyleModel",
+     "state": {
+      "_model_module": "@jupyter-widgets/controls",
+      "_model_module_version": "1.5.0",
+      "_model_name": "DescriptionStyleModel",
+      "_view_count": null,
+      "_view_module": "@jupyter-widgets/base",
+      "_view_module_version": "1.2.0",
+      "_view_name": "StyleView",
+      "description_width": ""
+     }
+    },
+    "15183e2ad7b54490ab07239ff4997d2d": {
+     "model_module": "@jupyter-widgets/controls",
+     "model_module_version": "1.5.0",
+     "model_name": "DescriptionStyleModel",
+     "state": {
+      "_model_module": "@jupyter-widgets/controls",
+      "_model_module_version": "1.5.0",
+      "_model_name": "DescriptionStyleModel",
+      "_view_count": null,
+      "_view_module": "@jupyter-widgets/base",
+      "_view_module_version": "1.2.0",
+      "_view_name": "StyleView",
+      "description_width": ""
+     }
+    },
+    "162e58f3801340fc99b297a365895321": {
+     "model_module": "@jupyter-widgets/controls",
+     "model_module_version": "1.5.0",
+     "model_name": "DescriptionStyleModel",
+     "state": {
+      "_model_module": "@jupyter-widgets/controls",
+      "_model_module_version": "1.5.0",
+      "_model_name": "DescriptionStyleModel",
+      "_view_count": null,
+      "_view_module": "@jupyter-widgets/base",
+      "_view_module_version": "1.2.0",
+      "_view_name": "StyleView",
+      "description_width": ""
+     }
+    },
+    "1729d9fd508344d0bb3b94b2477e33ec": {
+     "model_module": "@jupyter-widgets/base",
+     "model_module_version": "1.2.0",
+     "model_name": "LayoutModel",
+     "state": {
+      "_model_module": "@jupyter-widgets/base",
+      "_model_module_version": "1.2.0",
+      "_model_name": "LayoutModel",
+      "_view_count": null,
+      "_view_module": "@jupyter-widgets/base",
+      "_view_module_version": "1.2.0",
+      "_view_name": "LayoutView",
+      "align_content": null,
+      "align_items": null,
+      "align_self": null,
+      "border": null,
+      "bottom": null,
+      "display": null,
+      "flex": null,
+      "flex_flow": null,
+      "grid_area": null,
+      "grid_auto_columns": null,
+      "grid_auto_flow": null,
+      "grid_auto_rows": null,
+      "grid_column": null,
+      "grid_gap": null,
+      "grid_row": null,
+      "grid_template_areas": null,
+      "grid_template_columns": null,
+      "grid_template_rows": null,
+      "height": null,
+      "justify_content": null,
+      "justify_items": null,
+      "left": null,
+      "margin": null,
+      "max_height": null,
+      "max_width": null,
+      "min_height": null,
+      "min_width": null,
+      "object_fit": null,
+      "object_position": null,
+      "order": null,
+      "overflow": null,
+      "overflow_x": null,
+      "overflow_y": null,
+      "padding": null,
+      "right": null,
+      "top": null,
+      "visibility": null,
+      "width": null
+     }
+    },
+    "1850b3d7d7a7401480db9384615309af": {
+     "model_module": "@jupyter-widgets/base",
+     "model_module_version": "1.2.0",
+     "model_name": "LayoutModel",
+     "state": {
+      "_model_module": "@jupyter-widgets/base",
+      "_model_module_version": "1.2.0",
+      "_model_name": "LayoutModel",
+      "_view_count": null,
+      "_view_module": "@jupyter-widgets/base",
+      "_view_module_version": "1.2.0",
+      "_view_name": "LayoutView",
+      "align_content": null,
+      "align_items": null,
+      "align_self": null,
+      "border": null,
+      "bottom": null,
+      "display": null,
+      "flex": null,
+      "flex_flow": null,
+      "grid_area": null,
+      "grid_auto_columns": null,
+      "grid_auto_flow": null,
+      "grid_auto_rows": null,
+      "grid_column": null,
+      "grid_gap": null,
+      "grid_row": null,
+      "grid_template_areas": null,
+      "grid_template_columns": null,
+      "grid_template_rows": null,
+      "height": null,
+      "justify_content": null,
+      "justify_items": null,
+      "left": null,
+      "margin": null,
+      "max_height": null,
+      "max_width": null,
+      "min_height": null,
+      "min_width": null,
+      "object_fit": null,
+      "object_position": null,
+      "order": null,
+      "overflow": null,
+      "overflow_x": null,
+      "overflow_y": null,
+      "padding": null,
+      "right": null,
+      "top": null,
+      "visibility": null,
+      "width": null
+     }
+    },
+    "1926e91fc75243f79ae5876479ad28f9": {
+     "model_module": "@jupyter-widgets/controls",
+     "model_module_version": "1.5.0",
+     "model_name": "HBoxModel",
+     "state": {
+      "_dom_classes": [],
+      "_model_module": "@jupyter-widgets/controls",
+      "_model_module_version": "1.5.0",
+      "_model_name": "HBoxModel",
+      "_view_count": null,
+      "_view_module": "@jupyter-widgets/controls",
+      "_view_module_version": "1.5.0",
+      "_view_name": "HBoxView",
+      "box_style": "",
+      "children": [
+       "IPY_MODEL_8cdb7c0249424c25aec755bcb3f5f817",
+       "IPY_MODEL_d8d15329978c432b9542b00518fb6091",
+       "IPY_MODEL_c4dc3aafedcf421a8104cfbc346ff63c"
+      ],
+      "layout": "IPY_MODEL_b2ddc8ca76584d0dbcdb8695cde9bda4"
+     }
+    },
+    "19a92baa764348ecbccc63589feb2a3a": {
+     "model_module": "@jupyter-widgets/controls",
+     "model_module_version": "1.5.0",
+     "model_name": "DescriptionStyleModel",
+     "state": {
+      "_model_module": "@jupyter-widgets/controls",
+      "_model_module_version": "1.5.0",
+      "_model_name": "DescriptionStyleModel",
+      "_view_count": null,
+      "_view_module": "@jupyter-widgets/base",
+      "_view_module_version": "1.2.0",
+      "_view_name": "StyleView",
+      "description_width": ""
+     }
+    },
+    "1b4416f783ae4e7e89199b17e7f4ce7c": {
+     "model_module": "@jupyter-widgets/controls",
+     "model_module_version": "1.5.0",
+     "model_name": "HTMLModel",
+     "state": {
+      "_dom_classes": [],
+      "_model_module": "@jupyter-widgets/controls",
+      "_model_module_version": "1.5.0",
+      "_model_name": "HTMLModel",
+      "_view_count": null,
+      "_view_module": "@jupyter-widgets/controls",
+      "_view_module_version": "1.5.0",
+      "_view_name": "HTMLView",
+      "description": "",
+      "description_tooltip": null,
+      "layout": "IPY_MODEL_9d1ed4939590418e91328cd88e91c672",
+      "placeholder": "​",
+      "style": "IPY_MODEL_5cfec1477c2f46cab2ebc6bc1ef27eeb",
+      "value": "Collecting explanations: 100%"
+     }
+    },
+    "1cf1aebb3abc4e7e87f79a7a9034d5b3": {
+     "model_module": "@jupyter-widgets/base",
+     "model_module_version": "1.2.0",
+     "model_name": "LayoutModel",
+     "state": {
+      "_model_module": "@jupyter-widgets/base",
+      "_model_module_version": "1.2.0",
+      "_model_name": "LayoutModel",
+      "_view_count": null,
+      "_view_module": "@jupyter-widgets/base",
+      "_view_module_version": "1.2.0",
+      "_view_name": "LayoutView",
+      "align_content": null,
+      "align_items": null,
+      "align_self": null,
+      "border": null,
+      "bottom": null,
+      "display": null,
+      "flex": null,
+      "flex_flow": null,
+      "grid_area": null,
+      "grid_auto_columns": null,
+      "grid_auto_flow": null,
+      "grid_auto_rows": null,
+      "grid_column": null,
+      "grid_gap": null,
+      "grid_row": null,
+      "grid_template_areas": null,
+      "grid_template_columns": null,
+      "grid_template_rows": null,
+      "height": null,
+      "justify_content": null,
+      "justify_items": null,
+      "left": null,
+      "margin": null,
+      "max_height": null,
+      "max_width": null,
+      "min_height": null,
+      "min_width": null,
+      "object_fit": null,
+      "object_position": null,
+      "order": null,
+      "overflow": null,
+      "overflow_x": null,
+      "overflow_y": null,
+      "padding": null,
+      "right": null,
+      "top": null,
+      "visibility": null,
+      "width": null
+     }
+    },
+    "1e9e1569314341338a6067afd7ac91ed": {
+     "model_module": "@jupyter-widgets/controls",
+     "model_module_version": "1.5.0",
+     "model_name": "HBoxModel",
+     "state": {
+      "_dom_classes": [],
+      "_model_module": "@jupyter-widgets/controls",
+      "_model_module_version": "1.5.0",
+      "_model_name": "HBoxModel",
+      "_view_count": null,
+      "_view_module": "@jupyter-widgets/controls",
+      "_view_module_version": "1.5.0",
+      "_view_name": "HBoxView",
+      "box_style": "",
+      "children": [
+       "IPY_MODEL_9036582bde6b458e8b480d01b79e5698",
+       "IPY_MODEL_0b8c5c5ef635404e9a4f62215357a6b0",
+       "IPY_MODEL_ec519180813449e7829b106f5924b06f"
+      ],
+      "layout": "IPY_MODEL_bda5020fb43347e381bfca3dc6efcfd4"
+     }
+    },
+    "227ce5ea7ff7467fab0e9dadc6b12cd3": {
+     "model_module": "@jupyter-widgets/base",
+     "model_module_version": "1.2.0",
+     "model_name": "LayoutModel",
+     "state": {
+      "_model_module": "@jupyter-widgets/base",
+      "_model_module_version": "1.2.0",
+      "_model_name": "LayoutModel",
+      "_view_count": null,
+      "_view_module": "@jupyter-widgets/base",
+      "_view_module_version": "1.2.0",
+      "_view_name": "LayoutView",
+      "align_content": null,
+      "align_items": null,
+      "align_self": null,
+      "border": null,
+      "bottom": null,
+      "display": null,
+      "flex": null,
+      "flex_flow": null,
+      "grid_area": null,
+      "grid_auto_columns": null,
+      "grid_auto_flow": null,
+      "grid_auto_rows": null,
+      "grid_column": null,
+      "grid_gap": null,
+      "grid_row": null,
+      "grid_template_areas": null,
+      "grid_template_columns": null,
+      "grid_template_rows": null,
+      "height": null,
+      "justify_content": null,
+      "justify_items": null,
+      "left": null,
+      "margin": null,
+      "max_height": null,
+      "max_width": null,
+      "min_height": null,
+      "min_width": null,
+      "object_fit": null,
+      "object_position": null,
+      "order": null,
+      "overflow": null,
+      "overflow_x": null,
+      "overflow_y": null,
+      "padding": null,
+      "right": null,
+      "top": null,
+      "visibility": null,
+      "width": null
+     }
+    },
+    "248388c2722648fcb487b528b6dae8d7": {
+     "model_module": "@jupyter-widgets/base",
+     "model_module_version": "1.2.0",
+     "model_name": "LayoutModel",
+     "state": {
+      "_model_module": "@jupyter-widgets/base",
+      "_model_module_version": "1.2.0",
+      "_model_name": "LayoutModel",
+      "_view_count": null,
+      "_view_module": "@jupyter-widgets/base",
+      "_view_module_version": "1.2.0",
+      "_view_name": "LayoutView",
+      "align_content": null,
+      "align_items": null,
+      "align_self": null,
+      "border": null,
+      "bottom": null,
+      "display": null,
+      "flex": null,
+      "flex_flow": null,
+      "grid_area": null,
+      "grid_auto_columns": null,
+      "grid_auto_flow": null,
+      "grid_auto_rows": null,
+      "grid_column": null,
+      "grid_gap": null,
+      "grid_row": null,
+      "grid_template_areas": null,
+      "grid_template_columns": null,
+      "grid_template_rows": null,
+      "height": null,
+      "justify_content": null,
+      "justify_items": null,
+      "left": null,
+      "margin": null,
+      "max_height": null,
+      "max_width": null,
+      "min_height": null,
+      "min_width": null,
+      "object_fit": null,
+      "object_position": null,
+      "order": null,
+      "overflow": null,
+      "overflow_x": null,
+      "overflow_y": null,
+      "padding": null,
+      "right": null,
+      "top": null,
+      "visibility": null,
+      "width": null
+     }
+    },
+    "2517cb5f22644bc1b101c0b5f4d77da8": {
+     "model_module": "@jupyter-widgets/base",
+     "model_module_version": "1.2.0",
+     "model_name": "LayoutModel",
+     "state": {
+      "_model_module": "@jupyter-widgets/base",
+      "_model_module_version": "1.2.0",
+      "_model_name": "LayoutModel",
+      "_view_count": null,
+      "_view_module": "@jupyter-widgets/base",
+      "_view_module_version": "1.2.0",
+      "_view_name": "LayoutView",
+      "align_content": null,
+      "align_items": null,
+      "align_self": null,
+      "border": null,
+      "bottom": null,
+      "display": null,
+      "flex": null,
+      "flex_flow": null,
+      "grid_area": null,
+      "grid_auto_columns": null,
+      "grid_auto_flow": null,
+      "grid_auto_rows": null,
+      "grid_column": null,
+      "grid_gap": null,
+      "grid_row": null,
+      "grid_template_areas": null,
+      "grid_template_columns": null,
+      "grid_template_rows": null,
+      "height": null,
+      "justify_content": null,
+      "justify_items": null,
+      "left": null,
+      "margin": null,
+      "max_height": null,
+      "max_width": null,
+      "min_height": null,
+      "min_width": null,
+      "object_fit": null,
+      "object_position": null,
+      "order": null,
+      "overflow": null,
+      "overflow_x": null,
+      "overflow_y": null,
+      "padding": null,
+      "right": null,
+      "top": null,
+      "visibility": null,
+      "width": null
+     }
+    },
+    "27328026e1ec4e49a6c86b272ba55750": {
+     "model_module": "@jupyter-widgets/controls",
+     "model_module_version": "1.5.0",
+     "model_name": "HTMLModel",
+     "state": {
+      "_dom_classes": [],
+      "_model_module": "@jupyter-widgets/controls",
+      "_model_module_version": "1.5.0",
+      "_model_name": "HTMLModel",
+      "_view_count": null,
+      "_view_module": "@jupyter-widgets/controls",
+      "_view_module_version": "1.5.0",
+      "_view_name": "HTMLView",
+      "description": "",
+      "description_tooltip": null,
+      "layout": "IPY_MODEL_dbc7623dda6f4270973256ca86801288",
+      "placeholder": "​",
+      "style": "IPY_MODEL_5d2fbbed3de34662aeab561982508f92",
+      "value": " 10/10 [00:00&lt;00:00, 11.41it/s]"
+     }
+    },
+    "2827b86158c54ac3a8c58cb64ffb294a": {
+     "model_module": "@jupyter-widgets/base",
+     "model_module_version": "1.2.0",
+     "model_name": "LayoutModel",
+     "state": {
+      "_model_module": "@jupyter-widgets/base",
+      "_model_module_version": "1.2.0",
+      "_model_name": "LayoutModel",
+      "_view_count": null,
+      "_view_module": "@jupyter-widgets/base",
+      "_view_module_version": "1.2.0",
+      "_view_name": "LayoutView",
+      "align_content": null,
+      "align_items": null,
+      "align_self": null,
+      "border": null,
+      "bottom": null,
+      "display": null,
+      "flex": null,
+      "flex_flow": null,
+      "grid_area": null,
+      "grid_auto_columns": null,
+      "grid_auto_flow": null,
+      "grid_auto_rows": null,
+      "grid_column": null,
+      "grid_gap": null,
+      "grid_row": null,
+      "grid_template_areas": null,
+      "grid_template_columns": null,
+      "grid_template_rows": null,
+      "height": null,
+      "justify_content": null,
+      "justify_items": null,
+      "left": null,
+      "margin": null,
+      "max_height": null,
+      "max_width": null,
+      "min_height": null,
+      "min_width": null,
+      "object_fit": null,
+      "object_position": null,
+      "order": null,
+      "overflow": null,
+      "overflow_x": null,
+      "overflow_y": null,
+      "padding": null,
+      "right": null,
+      "top": null,
+      "visibility": null,
+      "width": null
+     }
+    },
+    "2add5d190198404aa6428c3975b87547": {
+     "model_module": "@jupyter-widgets/controls",
+     "model_module_version": "1.5.0",
+     "model_name": "DescriptionStyleModel",
+     "state": {
+      "_model_module": "@jupyter-widgets/controls",
+      "_model_module_version": "1.5.0",
+      "_model_name": "DescriptionStyleModel",
+      "_view_count": null,
+      "_view_module": "@jupyter-widgets/base",
+      "_view_module_version": "1.2.0",
+      "_view_name": "StyleView",
+      "description_width": ""
+     }
+    },
+    "300ae80e21384502b96438404812e42d": {
+     "model_module": "@jupyter-widgets/base",
+     "model_module_version": "1.2.0",
+     "model_name": "LayoutModel",
+     "state": {
+      "_model_module": "@jupyter-widgets/base",
+      "_model_module_version": "1.2.0",
+      "_model_name": "LayoutModel",
+      "_view_count": null,
+      "_view_module": "@jupyter-widgets/base",
+      "_view_module_version": "1.2.0",
+      "_view_name": "LayoutView",
+      "align_content": null,
+      "align_items": null,
+      "align_self": null,
+      "border": null,
+      "bottom": null,
+      "display": null,
+      "flex": null,
+      "flex_flow": null,
+      "grid_area": null,
+      "grid_auto_columns": null,
+      "grid_auto_flow": null,
+      "grid_auto_rows": null,
+      "grid_column": null,
+      "grid_gap": null,
+      "grid_row": null,
+      "grid_template_areas": null,
+      "grid_template_columns": null,
+      "grid_template_rows": null,
+      "height": null,
+      "justify_content": null,
+      "justify_items": null,
+      "left": null,
+      "margin": null,
+      "max_height": null,
+      "max_width": null,
+      "min_height": null,
+      "min_width": null,
+      "object_fit": null,
+      "object_position": null,
+      "order": null,
+      "overflow": null,
+      "overflow_x": null,
+      "overflow_y": null,
+      "padding": null,
+      "right": null,
+      "top": null,
+      "visibility": null,
+      "width": null
+     }
+    },
+    "35b575db01ad4806b2de96f7d799d287": {
+     "model_module": "@jupyter-widgets/controls",
+     "model_module_version": "1.5.0",
+     "model_name": "HTMLModel",
+     "state": {
+      "_dom_classes": [],
+      "_model_module": "@jupyter-widgets/controls",
+      "_model_module_version": "1.5.0",
+      "_model_name": "HTMLModel",
+      "_view_count": null,
+      "_view_module": "@jupyter-widgets/controls",
+      "_view_module_version": "1.5.0",
+      "_view_name": "HTMLView",
+      "description": "",
+      "description_tooltip": null,
+      "layout": "IPY_MODEL_248388c2722648fcb487b528b6dae8d7",
+      "placeholder": "​",
+      "style": "IPY_MODEL_9233dfe5b46b411d95d4bc58e5649e9e",
+      "value": " 9/9 [00:13&lt;00:00,  1.49s/it]"
+     }
+    },
+    "3608352acb4a4e35b7f1f86d7fe68440": {
+     "model_module": "@jupyter-widgets/controls",
+     "model_module_version": "1.5.0",
+     "model_name": "HTMLModel",
+     "state": {
+      "_dom_classes": [],
+      "_model_module": "@jupyter-widgets/controls",
+      "_model_module_version": "1.5.0",
+      "_model_name": "HTMLModel",
+      "_view_count": null,
+      "_view_module": "@jupyter-widgets/controls",
+      "_view_module_version": "1.5.0",
+      "_view_name": "HTMLView",
+      "description": "",
+      "description_tooltip": null,
+      "layout": "IPY_MODEL_01af026a8db8434e9ae9eeaa06599420",
+      "placeholder": "​",
+      "style": "IPY_MODEL_19a92baa764348ecbccc63589feb2a3a",
+      "value": " 10/10 [00:00&lt;00:00, 11.76it/s]"
+     }
+    },
+    "3c6ca2fb0d1b43bb8bf26c0f3c476242": {
+     "model_module": "@jupyter-widgets/base",
+     "model_module_version": "1.2.0",
+     "model_name": "LayoutModel",
+     "state": {
+      "_model_module": "@jupyter-widgets/base",
+      "_model_module_version": "1.2.0",
+      "_model_name": "LayoutModel",
+      "_view_count": null,
+      "_view_module": "@jupyter-widgets/base",
+      "_view_module_version": "1.2.0",
+      "_view_name": "LayoutView",
+      "align_content": null,
+      "align_items": null,
+      "align_self": null,
+      "border": null,
+      "bottom": null,
+      "display": null,
+      "flex": null,
+      "flex_flow": null,
+      "grid_area": null,
+      "grid_auto_columns": null,
+      "grid_auto_flow": null,
+      "grid_auto_rows": null,
+      "grid_column": null,
+      "grid_gap": null,
+      "grid_row": null,
+      "grid_template_areas": null,
+      "grid_template_columns": null,
+      "grid_template_rows": null,
+      "height": null,
+      "justify_content": null,
+      "justify_items": null,
+      "left": null,
+      "margin": null,
+      "max_height": null,
+      "max_width": null,
+      "min_height": null,
+      "min_width": null,
+      "object_fit": null,
+      "object_position": null,
+      "order": null,
+      "overflow": null,
+      "overflow_x": null,
+      "overflow_y": null,
+      "padding": null,
+      "right": null,
+      "top": null,
+      "visibility": null,
+      "width": null
+     }
+    },
+    "3c9f57b3a3a64428b6bdc1e4e590ecde": {
+     "model_module": "@jupyter-widgets/controls",
+     "model_module_version": "1.5.0",
+     "model_name": "HBoxModel",
+     "state": {
+      "_dom_classes": [],
+      "_model_module": "@jupyter-widgets/controls",
+      "_model_module_version": "1.5.0",
+      "_model_name": "HBoxModel",
+      "_view_count": null,
+      "_view_module": "@jupyter-widgets/controls",
+      "_view_module_version": "1.5.0",
+      "_view_name": "HBoxView",
+      "box_style": "",
+      "children": [
+       "IPY_MODEL_48842ecc9e3a4396b683a23c49f8c7eb",
+       "IPY_MODEL_ce6da216a9e84cb389f64fa027e1f49c",
+       "IPY_MODEL_a70c715350e44a2e8f1e2b49aca89527"
+      ],
+      "layout": "IPY_MODEL_402bb9d95e1447f8810f729f48cb134a"
+     }
+    },
+    "402bb9d95e1447f8810f729f48cb134a": {
+     "model_module": "@jupyter-widgets/base",
+     "model_module_version": "1.2.0",
+     "model_name": "LayoutModel",
+     "state": {
+      "_model_module": "@jupyter-widgets/base",
+      "_model_module_version": "1.2.0",
+      "_model_name": "LayoutModel",
+      "_view_count": null,
+      "_view_module": "@jupyter-widgets/base",
+      "_view_module_version": "1.2.0",
+      "_view_name": "LayoutView",
+      "align_content": null,
+      "align_items": null,
+      "align_self": null,
+      "border": null,
+      "bottom": null,
+      "display": null,
+      "flex": null,
+      "flex_flow": null,
+      "grid_area": null,
+      "grid_auto_columns": null,
+      "grid_auto_flow": null,
+      "grid_auto_rows": null,
+      "grid_column": null,
+      "grid_gap": null,
+      "grid_row": null,
+      "grid_template_areas": null,
+      "grid_template_columns": null,
+      "grid_template_rows": null,
+      "height": null,
+      "justify_content": null,
+      "justify_items": null,
+      "left": null,
+      "margin": null,
+      "max_height": null,
+      "max_width": null,
+      "min_height": null,
+      "min_width": null,
+      "object_fit": null,
+      "object_position": null,
+      "order": null,
+      "overflow": null,
+      "overflow_x": null,
+      "overflow_y": null,
+      "padding": null,
+      "right": null,
+      "top": null,
+      "visibility": null,
+      "width": null
+     }
+    },
+    "40c89ee3fd1a44bc862269e796735caa": {
+     "model_module": "@jupyter-widgets/base",
+     "model_module_version": "1.2.0",
+     "model_name": "LayoutModel",
+     "state": {
+      "_model_module": "@jupyter-widgets/base",
+      "_model_module_version": "1.2.0",
+      "_model_name": "LayoutModel",
+      "_view_count": null,
+      "_view_module": "@jupyter-widgets/base",
+      "_view_module_version": "1.2.0",
+      "_view_name": "LayoutView",
+      "align_content": null,
+      "align_items": null,
+      "align_self": null,
+      "border": null,
+      "bottom": null,
+      "display": null,
+      "flex": null,
+      "flex_flow": null,
+      "grid_area": null,
+      "grid_auto_columns": null,
+      "grid_auto_flow": null,
+      "grid_auto_rows": null,
+      "grid_column": null,
+      "grid_gap": null,
+      "grid_row": null,
+      "grid_template_areas": null,
+      "grid_template_columns": null,
+      "grid_template_rows": null,
+      "height": null,
+      "justify_content": null,
+      "justify_items": null,
+      "left": null,
+      "margin": null,
+      "max_height": null,
+      "max_width": null,
+      "min_height": null,
+      "min_width": null,
+      "object_fit": null,
+      "object_position": null,
+      "order": null,
+      "overflow": null,
+      "overflow_x": null,
+      "overflow_y": null,
+      "padding": null,
+      "right": null,
+      "top": null,
+      "visibility": null,
+      "width": null
+     }
+    },
+    "41940b33cd8b4e86b821e1fdba069ff9": {
+     "model_module": "@jupyter-widgets/controls",
+     "model_module_version": "1.5.0",
+     "model_name": "HTMLModel",
+     "state": {
+      "_dom_classes": [],
+      "_model_module": "@jupyter-widgets/controls",
+      "_model_module_version": "1.5.0",
+      "_model_name": "HTMLModel",
+      "_view_count": null,
+      "_view_module": "@jupyter-widgets/controls",
+      "_view_module_version": "1.5.0",
+      "_view_name": "HTMLView",
+      "description": "",
+      "description_tooltip": null,
+      "layout": "IPY_MODEL_ebd768308645435b921396ff11d64005",
+      "placeholder": "​",
+      "style": "IPY_MODEL_9e770e0c0702446380c0647dcf2458a5",
+      "value": " 9/9 [00:13&lt;00:00,  1.50s/it]"
+     }
+    },
+    "45aa94cf21174a00b62b64bea6aead78": {
+     "model_module": "@jupyter-widgets/controls",
+     "model_module_version": "1.5.0",
+     "model_name": "FloatProgressModel",
+     "state": {
+      "_dom_classes": [],
+      "_model_module": "@jupyter-widgets/controls",
+      "_model_module_version": "1.5.0",
+      "_model_name": "FloatProgressModel",
+      "_view_count": null,
+      "_view_module": "@jupyter-widgets/controls",
+      "_view_module_version": "1.5.0",
+      "_view_name": "ProgressView",
+      "bar_style": "success",
+      "description": "",
+      "description_tooltip": null,
+      "layout": "IPY_MODEL_ca0f19c3717448f39ededbaa80cda438",
+      "max": 10,
+      "min": 0,
+      "orientation": "horizontal",
+      "style": "IPY_MODEL_aa2ba3006de2405bb436266aab9a9078",
+      "value": 10
+     }
+    },
+    "48842ecc9e3a4396b683a23c49f8c7eb": {
+     "model_module": "@jupyter-widgets/controls",
+     "model_module_version": "1.5.0",
+     "model_name": "HTMLModel",
+     "state": {
+      "_dom_classes": [],
+      "_model_module": "@jupyter-widgets/controls",
+      "_model_module_version": "1.5.0",
+      "_model_name": "HTMLModel",
+      "_view_count": null,
+      "_view_module": "@jupyter-widgets/controls",
+      "_view_module_version": "1.5.0",
+      "_view_name": "HTMLView",
+      "description": "",
+      "description_tooltip": null,
+      "layout": "IPY_MODEL_e944ae244de142268b5cbc6b06c847bc",
+      "placeholder": "​",
+      "style": "IPY_MODEL_162e58f3801340fc99b297a365895321",
+      "value": "Collecting explanations: 100%"
+     }
+    },
+    "4c611b3b81574076954a0c511b8235fc": {
+     "model_module": "@jupyter-widgets/controls",
+     "model_module_version": "1.5.0",
+     "model_name": "HBoxModel",
+     "state": {
+      "_dom_classes": [],
+      "_model_module": "@jupyter-widgets/controls",
+      "_model_module_version": "1.5.0",
+      "_model_name": "HBoxModel",
+      "_view_count": null,
+      "_view_module": "@jupyter-widgets/controls",
+      "_view_module_version": "1.5.0",
+      "_view_name": "HBoxView",
+      "box_style": "",
+      "children": [
+       "IPY_MODEL_853325f35c57491192f09f879efbd544",
+       "IPY_MODEL_45aa94cf21174a00b62b64bea6aead78",
+       "IPY_MODEL_fcdf278a18854f91a43038974ed1e889"
+      ],
+      "layout": "IPY_MODEL_9030788e3fca4a1593814b2513a8a72b"
+     }
+    },
+    "54e79e8c93114ab5bd86552175596997": {
+     "model_module": "@jupyter-widgets/base",
+     "model_module_version": "1.2.0",
+     "model_name": "LayoutModel",
+     "state": {
+      "_model_module": "@jupyter-widgets/base",
+      "_model_module_version": "1.2.0",
+      "_model_name": "LayoutModel",
+      "_view_count": null,
+      "_view_module": "@jupyter-widgets/base",
+      "_view_module_version": "1.2.0",
+      "_view_name": "LayoutView",
+      "align_content": null,
+      "align_items": null,
+      "align_self": null,
+      "border": null,
+      "bottom": null,
+      "display": null,
+      "flex": null,
+      "flex_flow": null,
+      "grid_area": null,
+      "grid_auto_columns": null,
+      "grid_auto_flow": null,
+      "grid_auto_rows": null,
+      "grid_column": null,
+      "grid_gap": null,
+      "grid_row": null,
+      "grid_template_areas": null,
+      "grid_template_columns": null,
+      "grid_template_rows": null,
+      "height": null,
+      "justify_content": null,
+      "justify_items": null,
+      "left": null,
+      "margin": null,
+      "max_height": null,
+      "max_width": null,
+      "min_height": null,
+      "min_width": null,
+      "object_fit": null,
+      "object_position": null,
+      "order": null,
+      "overflow": null,
+      "overflow_x": null,
+      "overflow_y": null,
+      "padding": null,
+      "right": null,
+      "top": null,
+      "visibility": null,
+      "width": null
+     }
+    },
+    "5c250c426c334b86987b6846a7dfcc2a": {
+     "model_module": "@jupyter-widgets/controls",
+     "model_module_version": "1.5.0",
+     "model_name": "FloatProgressModel",
+     "state": {
+      "_dom_classes": [],
+      "_model_module": "@jupyter-widgets/controls",
+      "_model_module_version": "1.5.0",
+      "_model_name": "FloatProgressModel",
+      "_view_count": null,
+      "_view_module": "@jupyter-widgets/controls",
+      "_view_module_version": "1.5.0",
+      "_view_name": "ProgressView",
+      "bar_style": "success",
+      "description": "",
+      "description_tooltip": null,
+      "layout": "IPY_MODEL_a9cba86f3b4341b982d426e9b7bef680",
+      "max": 3,
+      "min": 0,
+      "orientation": "horizontal",
+      "style": "IPY_MODEL_a71b701a522348069be3fe8ae31db7d0",
+      "value": 3
+     }
+    },
+    "5cba9c8b08ce48629283d17b558b34b3": {
+     "model_module": "@jupyter-widgets/base",
+     "model_module_version": "1.2.0",
+     "model_name": "LayoutModel",
+     "state": {
+      "_model_module": "@jupyter-widgets/base",
+      "_model_module_version": "1.2.0",
+      "_model_name": "LayoutModel",
+      "_view_count": null,
+      "_view_module": "@jupyter-widgets/base",
+      "_view_module_version": "1.2.0",
+      "_view_name": "LayoutView",
+      "align_content": null,
+      "align_items": null,
+      "align_self": null,
+      "border": null,
+      "bottom": null,
+      "display": null,
+      "flex": null,
+      "flex_flow": null,
+      "grid_area": null,
+      "grid_auto_columns": null,
+      "grid_auto_flow": null,
+      "grid_auto_rows": null,
+      "grid_column": null,
+      "grid_gap": null,
+      "grid_row": null,
+      "grid_template_areas": null,
+      "grid_template_columns": null,
+      "grid_template_rows": null,
+      "height": null,
+      "justify_content": null,
+      "justify_items": null,
+      "left": null,
+      "margin": null,
+      "max_height": null,
+      "max_width": null,
+      "min_height": null,
+      "min_width": null,
+      "object_fit": null,
+      "object_position": null,
+      "order": null,
+      "overflow": null,
+      "overflow_x": null,
+      "overflow_y": null,
+      "padding": null,
+      "right": null,
+      "top": null,
+      "visibility": null,
+      "width": null
+     }
+    },
+    "5cfec1477c2f46cab2ebc6bc1ef27eeb": {
+     "model_module": "@jupyter-widgets/controls",
+     "model_module_version": "1.5.0",
+     "model_name": "DescriptionStyleModel",
+     "state": {
+      "_model_module": "@jupyter-widgets/controls",
+      "_model_module_version": "1.5.0",
+      "_model_name": "DescriptionStyleModel",
+      "_view_count": null,
+      "_view_module": "@jupyter-widgets/base",
+      "_view_module_version": "1.2.0",
+      "_view_name": "StyleView",
+      "description_width": ""
+     }
+    },
+    "5d2fbbed3de34662aeab561982508f92": {
+     "model_module": "@jupyter-widgets/controls",
+     "model_module_version": "1.5.0",
+     "model_name": "DescriptionStyleModel",
+     "state": {
+      "_model_module": "@jupyter-widgets/controls",
+      "_model_module_version": "1.5.0",
+      "_model_name": "DescriptionStyleModel",
+      "_view_count": null,
+      "_view_module": "@jupyter-widgets/base",
+      "_view_module_version": "1.2.0",
+      "_view_name": "StyleView",
+      "description_width": ""
+     }
+    },
+    "5db7ddbc5f1d4ca5b1c13ed16c8f95bc": {
+     "model_module": "@jupyter-widgets/controls",
+     "model_module_version": "1.5.0",
+     "model_name": "HBoxModel",
+     "state": {
+      "_dom_classes": [],
+      "_model_module": "@jupyter-widgets/controls",
+      "_model_module_version": "1.5.0",
+      "_model_name": "HBoxModel",
+      "_view_count": null,
+      "_view_module": "@jupyter-widgets/controls",
+      "_view_module_version": "1.5.0",
+      "_view_name": "HBoxView",
+      "box_style": "",
+      "children": [
+       "IPY_MODEL_be2e7c506bf04a6aa9103643641528f5",
+       "IPY_MODEL_d917ddc2b06e4db9a2e30e9eb5fcc000",
+       "IPY_MODEL_35b575db01ad4806b2de96f7d799d287"
+      ],
+      "layout": "IPY_MODEL_6721e9c247f4419c9b13dc9cc4f66a33"
+     }
+    },
+    "5dfd67eee5584fd7ba54da2cc67d4d2d": {
+     "model_module": "@jupyter-widgets/controls",
+     "model_module_version": "1.5.0",
+     "model_name": "HTMLModel",
+     "state": {
+      "_dom_classes": [],
+      "_model_module": "@jupyter-widgets/controls",
+      "_model_module_version": "1.5.0",
+      "_model_name": "HTMLModel",
+      "_view_count": null,
+      "_view_module": "@jupyter-widgets/controls",
+      "_view_module_version": "1.5.0",
+      "_view_name": "HTMLView",
+      "description": "",
+      "description_tooltip": null,
+      "layout": "IPY_MODEL_5cba9c8b08ce48629283d17b558b34b3",
+      "placeholder": "​",
+      "style": "IPY_MODEL_bcc11d55ed534626bcb7159103d240a1",
+      "value": "100%"
+     }
+    },
+    "5fa49e5530c842b7953e00ade3045c92": {
+     "model_module": "@jupyter-widgets/controls",
+     "model_module_version": "1.5.0",
+     "model_name": "DescriptionStyleModel",
+     "state": {
+      "_model_module": "@jupyter-widgets/controls",
+      "_model_module_version": "1.5.0",
+      "_model_name": "DescriptionStyleModel",
+      "_view_count": null,
+      "_view_module": "@jupyter-widgets/base",
+      "_view_module_version": "1.2.0",
+      "_view_name": "StyleView",
+      "description_width": ""
+     }
+    },
+    "5fdf523b124c436f84a7f2fe35084bd1": {
+     "model_module": "@jupyter-widgets/base",
+     "model_module_version": "1.2.0",
+     "model_name": "LayoutModel",
+     "state": {
+      "_model_module": "@jupyter-widgets/base",
+      "_model_module_version": "1.2.0",
+      "_model_name": "LayoutModel",
+      "_view_count": null,
+      "_view_module": "@jupyter-widgets/base",
+      "_view_module_version": "1.2.0",
+      "_view_name": "LayoutView",
+      "align_content": null,
+      "align_items": null,
+      "align_self": null,
+      "border": null,
+      "bottom": null,
+      "display": null,
+      "flex": null,
+      "flex_flow": null,
+      "grid_area": null,
+      "grid_auto_columns": null,
+      "grid_auto_flow": null,
+      "grid_auto_rows": null,
+      "grid_column": null,
+      "grid_gap": null,
+      "grid_row": null,
+      "grid_template_areas": null,
+      "grid_template_columns": null,
+      "grid_template_rows": null,
+      "height": null,
+      "justify_content": null,
+      "justify_items": null,
+      "left": null,
+      "margin": null,
+      "max_height": null,
+      "max_width": null,
+      "min_height": null,
+      "min_width": null,
+      "object_fit": null,
+      "object_position": null,
+      "order": null,
+      "overflow": null,
+      "overflow_x": null,
+      "overflow_y": null,
+      "padding": null,
+      "right": null,
+      "top": null,
+      "visibility": null,
+      "width": null
+     }
+    },
+    "6721e9c247f4419c9b13dc9cc4f66a33": {
+     "model_module": "@jupyter-widgets/base",
+     "model_module_version": "1.2.0",
+     "model_name": "LayoutModel",
+     "state": {
+      "_model_module": "@jupyter-widgets/base",
+      "_model_module_version": "1.2.0",
+      "_model_name": "LayoutModel",
+      "_view_count": null,
+      "_view_module": "@jupyter-widgets/base",
+      "_view_module_version": "1.2.0",
+      "_view_name": "LayoutView",
+      "align_content": null,
+      "align_items": null,
+      "align_self": null,
+      "border": null,
+      "bottom": null,
+      "display": null,
+      "flex": null,
+      "flex_flow": null,
+      "grid_area": null,
+      "grid_auto_columns": null,
+      "grid_auto_flow": null,
+      "grid_auto_rows": null,
+      "grid_column": null,
+      "grid_gap": null,
+      "grid_row": null,
+      "grid_template_areas": null,
+      "grid_template_columns": null,
+      "grid_template_rows": null,
+      "height": null,
+      "justify_content": null,
+      "justify_items": null,
+      "left": null,
+      "margin": null,
+      "max_height": null,
+      "max_width": null,
+      "min_height": null,
+      "min_width": null,
+      "object_fit": null,
+      "object_position": null,
+      "order": null,
+      "overflow": null,
+      "overflow_x": null,
+      "overflow_y": null,
+      "padding": null,
+      "right": null,
+      "top": null,
+      "visibility": null,
+      "width": null
+     }
+    },
+    "729e719cfca54c0f8f3a2b948882e965": {
+     "model_module": "@jupyter-widgets/base",
+     "model_module_version": "1.2.0",
+     "model_name": "LayoutModel",
+     "state": {
+      "_model_module": "@jupyter-widgets/base",
+      "_model_module_version": "1.2.0",
+      "_model_name": "LayoutModel",
+      "_view_count": null,
+      "_view_module": "@jupyter-widgets/base",
+      "_view_module_version": "1.2.0",
+      "_view_name": "LayoutView",
+      "align_content": null,
+      "align_items": null,
+      "align_self": null,
+      "border": null,
+      "bottom": null,
+      "display": null,
+      "flex": null,
+      "flex_flow": null,
+      "grid_area": null,
+      "grid_auto_columns": null,
+      "grid_auto_flow": null,
+      "grid_auto_rows": null,
+      "grid_column": null,
+      "grid_gap": null,
+      "grid_row": null,
+      "grid_template_areas": null,
+      "grid_template_columns": null,
+      "grid_template_rows": null,
+      "height": null,
+      "justify_content": null,
+      "justify_items": null,
+      "left": null,
+      "margin": null,
+      "max_height": null,
+      "max_width": null,
+      "min_height": null,
+      "min_width": null,
+      "object_fit": null,
+      "object_position": null,
+      "order": null,
+      "overflow": null,
+      "overflow_x": null,
+      "overflow_y": null,
+      "padding": null,
+      "right": null,
+      "top": null,
+      "visibility": null,
+      "width": null
+     }
+    },
+    "853325f35c57491192f09f879efbd544": {
+     "model_module": "@jupyter-widgets/controls",
+     "model_module_version": "1.5.0",
+     "model_name": "HTMLModel",
+     "state": {
+      "_dom_classes": [],
+      "_model_module": "@jupyter-widgets/controls",
+      "_model_module_version": "1.5.0",
+      "_model_name": "HTMLModel",
+      "_view_count": null,
+      "_view_module": "@jupyter-widgets/controls",
+      "_view_module_version": "1.5.0",
+      "_view_name": "HTMLView",
+      "description": "",
+      "description_tooltip": null,
+      "layout": "IPY_MODEL_40c89ee3fd1a44bc862269e796735caa",
+      "placeholder": "​",
+      "style": "IPY_MODEL_10e538cd196347cd8ca19d063a1c9f54",
+      "value": "Collecting perturbations: 100%"
+     }
+    },
+    "882d8598f9514fc3ad4198c3056e5894": {
+     "model_module": "@jupyter-widgets/controls",
+     "model_module_version": "1.5.0",
+     "model_name": "DescriptionStyleModel",
+     "state": {
+      "_model_module": "@jupyter-widgets/controls",
+      "_model_module_version": "1.5.0",
+      "_model_name": "DescriptionStyleModel",
+      "_view_count": null,
+      "_view_module": "@jupyter-widgets/base",
+      "_view_module_version": "1.2.0",
+      "_view_name": "StyleView",
+      "description_width": ""
+     }
+    },
+    "8cdb7c0249424c25aec755bcb3f5f817": {
+     "model_module": "@jupyter-widgets/controls",
+     "model_module_version": "1.5.0",
+     "model_name": "HTMLModel",
+     "state": {
+      "_dom_classes": [],
+      "_model_module": "@jupyter-widgets/controls",
+      "_model_module_version": "1.5.0",
+      "_model_name": "HTMLModel",
+      "_view_count": null,
+      "_view_module": "@jupyter-widgets/controls",
+      "_view_module_version": "1.5.0",
+      "_view_name": "HTMLView",
+      "description": "",
+      "description_tooltip": null,
+      "layout": "IPY_MODEL_300ae80e21384502b96438404812e42d",
+      "placeholder": "​",
+      "style": "IPY_MODEL_882d8598f9514fc3ad4198c3056e5894",
+      "value": "Collecting explanations: 100%"
+     }
+    },
+    "8e3622d839a74245aaf4ef67856c35a5": {
+     "model_module": "@jupyter-widgets/controls",
+     "model_module_version": "1.5.0",
+     "model_name": "DescriptionStyleModel",
+     "state": {
+      "_model_module": "@jupyter-widgets/controls",
+      "_model_module_version": "1.5.0",
+      "_model_name": "DescriptionStyleModel",
+      "_view_count": null,
+      "_view_module": "@jupyter-widgets/base",
+      "_view_module_version": "1.2.0",
+      "_view_name": "StyleView",
+      "description_width": ""
+     }
+    },
+    "9030788e3fca4a1593814b2513a8a72b": {
+     "model_module": "@jupyter-widgets/base",
+     "model_module_version": "1.2.0",
+     "model_name": "LayoutModel",
+     "state": {
+      "_model_module": "@jupyter-widgets/base",
+      "_model_module_version": "1.2.0",
+      "_model_name": "LayoutModel",
+      "_view_count": null,
+      "_view_module": "@jupyter-widgets/base",
+      "_view_module_version": "1.2.0",
+      "_view_name": "LayoutView",
+      "align_content": null,
+      "align_items": null,
+      "align_self": null,
+      "border": null,
+      "bottom": null,
+      "display": null,
+      "flex": null,
+      "flex_flow": null,
+      "grid_area": null,
+      "grid_auto_columns": null,
+      "grid_auto_flow": null,
+      "grid_auto_rows": null,
+      "grid_column": null,
+      "grid_gap": null,
+      "grid_row": null,
+      "grid_template_areas": null,
+      "grid_template_columns": null,
+      "grid_template_rows": null,
+      "height": null,
+      "justify_content": null,
+      "justify_items": null,
+      "left": null,
+      "margin": null,
+      "max_height": null,
+      "max_width": null,
+      "min_height": null,
+      "min_width": null,
+      "object_fit": null,
+      "object_position": null,
+      "order": null,
+      "overflow": null,
+      "overflow_x": null,
+      "overflow_y": null,
+      "padding": null,
+      "right": null,
+      "top": null,
+      "visibility": null,
+      "width": null
+     }
+    },
+    "9036582bde6b458e8b480d01b79e5698": {
+     "model_module": "@jupyter-widgets/controls",
+     "model_module_version": "1.5.0",
+     "model_name": "HTMLModel",
+     "state": {
+      "_dom_classes": [],
+      "_model_module": "@jupyter-widgets/controls",
+      "_model_module_version": "1.5.0",
+      "_model_name": "HTMLModel",
+      "_view_count": null,
+      "_view_module": "@jupyter-widgets/controls",
+      "_view_module_version": "1.5.0",
+      "_view_name": "HTMLView",
+      "description": "",
+      "description_tooltip": null,
+      "layout": "IPY_MODEL_0f69d704bc68421fa9f2fa7e408c3a55",
+      "placeholder": "​",
+      "style": "IPY_MODEL_0c419d27bcdf430f924fc77136369a06",
+      "value": "Collecting perturbations: 100%"
+     }
+    },
+    "9233dfe5b46b411d95d4bc58e5649e9e": {
+     "model_module": "@jupyter-widgets/controls",
+     "model_module_version": "1.5.0",
+     "model_name": "DescriptionStyleModel",
+     "state": {
+      "_model_module": "@jupyter-widgets/controls",
+      "_model_module_version": "1.5.0",
+      "_model_name": "DescriptionStyleModel",
+      "_view_count": null,
+      "_view_module": "@jupyter-widgets/base",
+      "_view_module_version": "1.2.0",
+      "_view_name": "StyleView",
+      "description_width": ""
+     }
+    },
+    "92eae6b08b174832b9aa2f7a603eaf81": {
+     "model_module": "@jupyter-widgets/base",
+     "model_module_version": "1.2.0",
+     "model_name": "LayoutModel",
+     "state": {
+      "_model_module": "@jupyter-widgets/base",
+      "_model_module_version": "1.2.0",
+      "_model_name": "LayoutModel",
+      "_view_count": null,
+      "_view_module": "@jupyter-widgets/base",
+      "_view_module_version": "1.2.0",
+      "_view_name": "LayoutView",
+      "align_content": null,
+      "align_items": null,
+      "align_self": null,
+      "border": null,
+      "bottom": null,
+      "display": null,
+      "flex": null,
+      "flex_flow": null,
+      "grid_area": null,
+      "grid_auto_columns": null,
+      "grid_auto_flow": null,
+      "grid_auto_rows": null,
+      "grid_column": null,
+      "grid_gap": null,
+      "grid_row": null,
+      "grid_template_areas": null,
+      "grid_template_columns": null,
+      "grid_template_rows": null,
+      "height": null,
+      "justify_content": null,
+      "justify_items": null,
+      "left": null,
+      "margin": null,
+      "max_height": null,
+      "max_width": null,
+      "min_height": null,
+      "min_width": null,
+      "object_fit": null,
+      "object_position": null,
+      "order": null,
+      "overflow": null,
+      "overflow_x": null,
+      "overflow_y": null,
+      "padding": null,
+      "right": null,
+      "top": null,
+      "visibility": null,
+      "width": null
+     }
+    },
+    "95e17670f76240a891da5b1218b2ae09": {
+     "model_module": "@jupyter-widgets/controls",
+     "model_module_version": "1.5.0",
+     "model_name": "HTMLModel",
+     "state": {
+      "_dom_classes": [],
+      "_model_module": "@jupyter-widgets/controls",
+      "_model_module_version": "1.5.0",
+      "_model_name": "HTMLModel",
+      "_view_count": null,
+      "_view_module": "@jupyter-widgets/controls",
+      "_view_module_version": "1.5.0",
+      "_view_name": "HTMLView",
+      "description": "",
+      "description_tooltip": null,
+      "layout": "IPY_MODEL_3c6ca2fb0d1b43bb8bf26c0f3c476242",
+      "placeholder": "​",
+      "style": "IPY_MODEL_b5190d5a072b419a9efc8e4d8a9090d8",
+      "value": "Collecting perturbations: 100%"
+     }
+    },
+    "9d1ed4939590418e91328cd88e91c672": {
+     "model_module": "@jupyter-widgets/base",
+     "model_module_version": "1.2.0",
+     "model_name": "LayoutModel",
+     "state": {
+      "_model_module": "@jupyter-widgets/base",
+      "_model_module_version": "1.2.0",
+      "_model_name": "LayoutModel",
+      "_view_count": null,
+      "_view_module": "@jupyter-widgets/base",
+      "_view_module_version": "1.2.0",
+      "_view_name": "LayoutView",
+      "align_content": null,
+      "align_items": null,
+      "align_self": null,
+      "border": null,
+      "bottom": null,
+      "display": null,
+      "flex": null,
+      "flex_flow": null,
+      "grid_area": null,
+      "grid_auto_columns": null,
+      "grid_auto_flow": null,
+      "grid_auto_rows": null,
+      "grid_column": null,
+      "grid_gap": null,
+      "grid_row": null,
+      "grid_template_areas": null,
+      "grid_template_columns": null,
+      "grid_template_rows": null,
+      "height": null,
+      "justify_content": null,
+      "justify_items": null,
+      "left": null,
+      "margin": null,
+      "max_height": null,
+      "max_width": null,
+      "min_height": null,
+      "min_width": null,
+      "object_fit": null,
+      "object_position": null,
+      "order": null,
+      "overflow": null,
+      "overflow_x": null,
+      "overflow_y": null,
+      "padding": null,
+      "right": null,
+      "top": null,
+      "visibility": null,
+      "width": null
+     }
+    },
+    "9da0ef1957344bd4ba22c6e5c0755dad": {
+     "model_module": "@jupyter-widgets/base",
+     "model_module_version": "1.2.0",
+     "model_name": "LayoutModel",
+     "state": {
+      "_model_module": "@jupyter-widgets/base",
+      "_model_module_version": "1.2.0",
+      "_model_name": "LayoutModel",
+      "_view_count": null,
+      "_view_module": "@jupyter-widgets/base",
+      "_view_module_version": "1.2.0",
+      "_view_name": "LayoutView",
+      "align_content": null,
+      "align_items": null,
+      "align_self": null,
+      "border": null,
+      "bottom": null,
+      "display": null,
+      "flex": null,
+      "flex_flow": null,
+      "grid_area": null,
+      "grid_auto_columns": null,
+      "grid_auto_flow": null,
+      "grid_auto_rows": null,
+      "grid_column": null,
+      "grid_gap": null,
+      "grid_row": null,
+      "grid_template_areas": null,
+      "grid_template_columns": null,
+      "grid_template_rows": null,
+      "height": null,
+      "justify_content": null,
+      "justify_items": null,
+      "left": null,
+      "margin": null,
+      "max_height": null,
+      "max_width": null,
+      "min_height": null,
+      "min_width": null,
+      "object_fit": null,
+      "object_position": null,
+      "order": null,
+      "overflow": null,
+      "overflow_x": null,
+      "overflow_y": null,
+      "padding": null,
+      "right": null,
+      "top": null,
+      "visibility": null,
+      "width": null
+     }
+    },
+    "9e300b052b084d979ddc125cc6dd1467": {
+     "model_module": "@jupyter-widgets/controls",
+     "model_module_version": "1.5.0",
+     "model_name": "HTMLModel",
+     "state": {
+      "_dom_classes": [],
+      "_model_module": "@jupyter-widgets/controls",
+      "_model_module_version": "1.5.0",
+      "_model_name": "HTMLModel",
+      "_view_count": null,
+      "_view_module": "@jupyter-widgets/controls",
+      "_view_module_version": "1.5.0",
+      "_view_name": "HTMLView",
+      "description": "",
+      "description_tooltip": null,
+      "layout": "IPY_MODEL_f513bda9bc6d4b4bbe63a094aff7aa58",
+      "placeholder": "​",
+      "style": "IPY_MODEL_5fa49e5530c842b7953e00ade3045c92",
+      "value": "Collecting perturbations: 100%"
+     }
+    },
+    "9e770e0c0702446380c0647dcf2458a5": {
+     "model_module": "@jupyter-widgets/controls",
+     "model_module_version": "1.5.0",
+     "model_name": "DescriptionStyleModel",
+     "state": {
+      "_model_module": "@jupyter-widgets/controls",
+      "_model_module_version": "1.5.0",
+      "_model_name": "DescriptionStyleModel",
+      "_view_count": null,
+      "_view_module": "@jupyter-widgets/base",
+      "_view_module_version": "1.2.0",
+      "_view_name": "StyleView",
+      "description_width": ""
+     }
+    },
+    "a70c715350e44a2e8f1e2b49aca89527": {
+     "model_module": "@jupyter-widgets/controls",
+     "model_module_version": "1.5.0",
+     "model_name": "HTMLModel",
+     "state": {
+      "_dom_classes": [],
+      "_model_module": "@jupyter-widgets/controls",
+      "_model_module_version": "1.5.0",
+      "_model_name": "HTMLModel",
+      "_view_count": null,
+      "_view_module": "@jupyter-widgets/controls",
+      "_view_module_version": "1.5.0",
+      "_view_name": "HTMLView",
+      "description": "",
+      "description_tooltip": null,
+      "layout": "IPY_MODEL_9da0ef1957344bd4ba22c6e5c0755dad",
+      "placeholder": "​",
+      "style": "IPY_MODEL_b150db7ffa024c0e8525b804c86f4599",
+      "value": " 9/9 [00:13&lt;00:00,  1.32s/it]"
+     }
+    },
+    "a71b701a522348069be3fe8ae31db7d0": {
+     "model_module": "@jupyter-widgets/controls",
+     "model_module_version": "1.5.0",
+     "model_name": "ProgressStyleModel",
+     "state": {
+      "_model_module": "@jupyter-widgets/controls",
+      "_model_module_version": "1.5.0",
+      "_model_name": "ProgressStyleModel",
+      "_view_count": null,
+      "_view_module": "@jupyter-widgets/base",
+      "_view_module_version": "1.2.0",
+      "_view_name": "StyleView",
+      "bar_color": null,
+      "description_width": ""
+     }
+    },
+    "a970f5a7cccc44b9b693b90f5e47a255": {
+     "model_module": "@jupyter-widgets/controls",
+     "model_module_version": "1.5.0",
+     "model_name": "ProgressStyleModel",
+     "state": {
+      "_model_module": "@jupyter-widgets/controls",
+      "_model_module_version": "1.5.0",
+      "_model_name": "ProgressStyleModel",
+      "_view_count": null,
+      "_view_module": "@jupyter-widgets/base",
+      "_view_module_version": "1.2.0",
+      "_view_name": "StyleView",
+      "bar_color": null,
+      "description_width": ""
+     }
+    },
+    "a9cba86f3b4341b982d426e9b7bef680": {
+     "model_module": "@jupyter-widgets/base",
+     "model_module_version": "1.2.0",
+     "model_name": "LayoutModel",
+     "state": {
+      "_model_module": "@jupyter-widgets/base",
+      "_model_module_version": "1.2.0",
+      "_model_name": "LayoutModel",
+      "_view_count": null,
+      "_view_module": "@jupyter-widgets/base",
+      "_view_module_version": "1.2.0",
+      "_view_name": "LayoutView",
+      "align_content": null,
+      "align_items": null,
+      "align_self": null,
+      "border": null,
+      "bottom": null,
+      "display": null,
+      "flex": null,
+      "flex_flow": null,
+      "grid_area": null,
+      "grid_auto_columns": null,
+      "grid_auto_flow": null,
+      "grid_auto_rows": null,
+      "grid_column": null,
+      "grid_gap": null,
+      "grid_row": null,
+      "grid_template_areas": null,
+      "grid_template_columns": null,
+      "grid_template_rows": null,
+      "height": null,
+      "justify_content": null,
+      "justify_items": null,
+      "left": null,
+      "margin": null,
+      "max_height": null,
+      "max_width": null,
+      "min_height": null,
+      "min_width": null,
+      "object_fit": null,
+      "object_position": null,
+      "order": null,
+      "overflow": null,
+      "overflow_x": null,
+      "overflow_y": null,
+      "padding": null,
+      "right": null,
+      "top": null,
+      "visibility": null,
+      "width": null
+     }
+    },
+    "aa2ba3006de2405bb436266aab9a9078": {
+     "model_module": "@jupyter-widgets/controls",
+     "model_module_version": "1.5.0",
+     "model_name": "ProgressStyleModel",
+     "state": {
+      "_model_module": "@jupyter-widgets/controls",
+      "_model_module_version": "1.5.0",
+      "_model_name": "ProgressStyleModel",
+      "_view_count": null,
+      "_view_module": "@jupyter-widgets/base",
+      "_view_module_version": "1.2.0",
+      "_view_name": "StyleView",
+      "bar_color": null,
+      "description_width": ""
+     }
+    },
+    "aec26073910f448f972a23ed85a1c715": {
+     "model_module": "@jupyter-widgets/controls",
+     "model_module_version": "1.5.0",
+     "model_name": "ProgressStyleModel",
+     "state": {
+      "_model_module": "@jupyter-widgets/controls",
+      "_model_module_version": "1.5.0",
+      "_model_name": "ProgressStyleModel",
+      "_view_count": null,
+      "_view_module": "@jupyter-widgets/base",
+      "_view_module_version": "1.2.0",
+      "_view_name": "StyleView",
+      "bar_color": null,
+      "description_width": ""
+     }
+    },
+    "b150db7ffa024c0e8525b804c86f4599": {
+     "model_module": "@jupyter-widgets/controls",
+     "model_module_version": "1.5.0",
+     "model_name": "DescriptionStyleModel",
+     "state": {
+      "_model_module": "@jupyter-widgets/controls",
+      "_model_module_version": "1.5.0",
+      "_model_name": "DescriptionStyleModel",
+      "_view_count": null,
+      "_view_module": "@jupyter-widgets/base",
+      "_view_module_version": "1.2.0",
+      "_view_name": "StyleView",
+      "description_width": ""
+     }
+    },
+    "b2516bc3259a41d2926a47223f213fe5": {
+     "model_module": "@jupyter-widgets/base",
+     "model_module_version": "1.2.0",
+     "model_name": "LayoutModel",
+     "state": {
+      "_model_module": "@jupyter-widgets/base",
+      "_model_module_version": "1.2.0",
+      "_model_name": "LayoutModel",
+      "_view_count": null,
+      "_view_module": "@jupyter-widgets/base",
+      "_view_module_version": "1.2.0",
+      "_view_name": "LayoutView",
+      "align_content": null,
+      "align_items": null,
+      "align_self": null,
+      "border": null,
+      "bottom": null,
+      "display": null,
+      "flex": null,
+      "flex_flow": null,
+      "grid_area": null,
+      "grid_auto_columns": null,
+      "grid_auto_flow": null,
+      "grid_auto_rows": null,
+      "grid_column": null,
+      "grid_gap": null,
+      "grid_row": null,
+      "grid_template_areas": null,
+      "grid_template_columns": null,
+      "grid_template_rows": null,
+      "height": null,
+      "justify_content": null,
+      "justify_items": null,
+      "left": null,
+      "margin": null,
+      "max_height": null,
+      "max_width": null,
+      "min_height": null,
+      "min_width": null,
+      "object_fit": null,
+      "object_position": null,
+      "order": null,
+      "overflow": null,
+      "overflow_x": null,
+      "overflow_y": null,
+      "padding": null,
+      "right": null,
+      "top": null,
+      "visibility": null,
+      "width": null
+     }
+    },
+    "b2ddc8ca76584d0dbcdb8695cde9bda4": {
+     "model_module": "@jupyter-widgets/base",
+     "model_module_version": "1.2.0",
+     "model_name": "LayoutModel",
+     "state": {
+      "_model_module": "@jupyter-widgets/base",
+      "_model_module_version": "1.2.0",
+      "_model_name": "LayoutModel",
+      "_view_count": null,
+      "_view_module": "@jupyter-widgets/base",
+      "_view_module_version": "1.2.0",
+      "_view_name": "LayoutView",
+      "align_content": null,
+      "align_items": null,
+      "align_self": null,
+      "border": null,
+      "bottom": null,
+      "display": null,
+      "flex": null,
+      "flex_flow": null,
+      "grid_area": null,
+      "grid_auto_columns": null,
+      "grid_auto_flow": null,
+      "grid_auto_rows": null,
+      "grid_column": null,
+      "grid_gap": null,
+      "grid_row": null,
+      "grid_template_areas": null,
+      "grid_template_columns": null,
+      "grid_template_rows": null,
+      "height": null,
+      "justify_content": null,
+      "justify_items": null,
+      "left": null,
+      "margin": null,
+      "max_height": null,
+      "max_width": null,
+      "min_height": null,
+      "min_width": null,
+      "object_fit": null,
+      "object_position": null,
+      "order": null,
+      "overflow": null,
+      "overflow_x": null,
+      "overflow_y": null,
+      "padding": null,
+      "right": null,
+      "top": null,
+      "visibility": null,
+      "width": null
+     }
+    },
+    "b5190d5a072b419a9efc8e4d8a9090d8": {
+     "model_module": "@jupyter-widgets/controls",
+     "model_module_version": "1.5.0",
+     "model_name": "DescriptionStyleModel",
+     "state": {
+      "_model_module": "@jupyter-widgets/controls",
+      "_model_module_version": "1.5.0",
+      "_model_name": "DescriptionStyleModel",
+      "_view_count": null,
+      "_view_module": "@jupyter-widgets/base",
+      "_view_module_version": "1.2.0",
+      "_view_name": "StyleView",
+      "description_width": ""
+     }
+    },
+    "bbc5507bf0984c07ba33ce163d50dd79": {
+     "model_module": "@jupyter-widgets/controls",
+     "model_module_version": "1.5.0",
+     "model_name": "ProgressStyleModel",
+     "state": {
+      "_model_module": "@jupyter-widgets/controls",
+      "_model_module_version": "1.5.0",
+      "_model_name": "ProgressStyleModel",
+      "_view_count": null,
+      "_view_module": "@jupyter-widgets/base",
+      "_view_module_version": "1.2.0",
+      "_view_name": "StyleView",
+      "bar_color": null,
+      "description_width": ""
+     }
+    },
+    "bcc11d55ed534626bcb7159103d240a1": {
+     "model_module": "@jupyter-widgets/controls",
+     "model_module_version": "1.5.0",
+     "model_name": "DescriptionStyleModel",
+     "state": {
+      "_model_module": "@jupyter-widgets/controls",
+      "_model_module_version": "1.5.0",
+      "_model_name": "DescriptionStyleModel",
+      "_view_count": null,
+      "_view_module": "@jupyter-widgets/base",
+      "_view_module_version": "1.2.0",
+      "_view_name": "StyleView",
+      "description_width": ""
+     }
+    },
+    "bda5020fb43347e381bfca3dc6efcfd4": {
+     "model_module": "@jupyter-widgets/base",
+     "model_module_version": "1.2.0",
+     "model_name": "LayoutModel",
+     "state": {
+      "_model_module": "@jupyter-widgets/base",
+      "_model_module_version": "1.2.0",
+      "_model_name": "LayoutModel",
+      "_view_count": null,
+      "_view_module": "@jupyter-widgets/base",
+      "_view_module_version": "1.2.0",
+      "_view_name": "LayoutView",
+      "align_content": null,
+      "align_items": null,
+      "align_self": null,
+      "border": null,
+      "bottom": null,
+      "display": null,
+      "flex": null,
+      "flex_flow": null,
+      "grid_area": null,
+      "grid_auto_columns": null,
+      "grid_auto_flow": null,
+      "grid_auto_rows": null,
+      "grid_column": null,
+      "grid_gap": null,
+      "grid_row": null,
+      "grid_template_areas": null,
+      "grid_template_columns": null,
+      "grid_template_rows": null,
+      "height": null,
+      "justify_content": null,
+      "justify_items": null,
+      "left": null,
+      "margin": null,
+      "max_height": null,
+      "max_width": null,
+      "min_height": null,
+      "min_width": null,
+      "object_fit": null,
+      "object_position": null,
+      "order": null,
+      "overflow": null,
+      "overflow_x": null,
+      "overflow_y": null,
+      "padding": null,
+      "right": null,
+      "top": null,
+      "visibility": null,
+      "width": null
+     }
+    },
+    "be2e7c506bf04a6aa9103643641528f5": {
+     "model_module": "@jupyter-widgets/controls",
+     "model_module_version": "1.5.0",
+     "model_name": "HTMLModel",
+     "state": {
+      "_dom_classes": [],
+      "_model_module": "@jupyter-widgets/controls",
+      "_model_module_version": "1.5.0",
+      "_model_name": "HTMLModel",
+      "_view_count": null,
+      "_view_module": "@jupyter-widgets/controls",
+      "_view_module_version": "1.5.0",
+      "_view_name": "HTMLView",
+      "description": "",
+      "description_tooltip": null,
+      "layout": "IPY_MODEL_729e719cfca54c0f8f3a2b948882e965",
+      "placeholder": "​",
+      "style": "IPY_MODEL_15183e2ad7b54490ab07239ff4997d2d",
+      "value": "Collecting explanations: 100%"
+     }
+    },
+    "c10116d3eb5848229d9dddba6610bad3": {
+     "model_module": "@jupyter-widgets/controls",
+     "model_module_version": "1.5.0",
+     "model_name": "ProgressStyleModel",
+     "state": {
+      "_model_module": "@jupyter-widgets/controls",
+      "_model_module_version": "1.5.0",
+      "_model_name": "ProgressStyleModel",
+      "_view_count": null,
+      "_view_module": "@jupyter-widgets/base",
+      "_view_module_version": "1.2.0",
+      "_view_name": "StyleView",
+      "bar_color": null,
+      "description_width": ""
+     }
+    },
+    "c4dc3aafedcf421a8104cfbc346ff63c": {
+     "model_module": "@jupyter-widgets/controls",
+     "model_module_version": "1.5.0",
+     "model_name": "HTMLModel",
+     "state": {
+      "_dom_classes": [],
+      "_model_module": "@jupyter-widgets/controls",
+      "_model_module_version": "1.5.0",
+      "_model_name": "HTMLModel",
+      "_view_count": null,
+      "_view_module": "@jupyter-widgets/controls",
+      "_view_module_version": "1.5.0",
+      "_view_name": "HTMLView",
+      "description": "",
+      "description_tooltip": null,
+      "layout": "IPY_MODEL_2827b86158c54ac3a8c58cb64ffb294a",
+      "placeholder": "​",
+      "style": "IPY_MODEL_8e3622d839a74245aaf4ef67856c35a5",
+      "value": " 9/9 [00:11&lt;00:00,  1.25s/it]"
+     }
+    },
+    "ca0f19c3717448f39ededbaa80cda438": {
+     "model_module": "@jupyter-widgets/base",
+     "model_module_version": "1.2.0",
+     "model_name": "LayoutModel",
+     "state": {
+      "_model_module": "@jupyter-widgets/base",
+      "_model_module_version": "1.2.0",
+      "_model_name": "LayoutModel",
+      "_view_count": null,
+      "_view_module": "@jupyter-widgets/base",
+      "_view_module_version": "1.2.0",
+      "_view_name": "LayoutView",
+      "align_content": null,
+      "align_items": null,
+      "align_self": null,
+      "border": null,
+      "bottom": null,
+      "display": null,
+      "flex": null,
+      "flex_flow": null,
+      "grid_area": null,
+      "grid_auto_columns": null,
+      "grid_auto_flow": null,
+      "grid_auto_rows": null,
+      "grid_column": null,
+      "grid_gap": null,
+      "grid_row": null,
+      "grid_template_areas": null,
+      "grid_template_columns": null,
+      "grid_template_rows": null,
+      "height": null,
+      "justify_content": null,
+      "justify_items": null,
+      "left": null,
+      "margin": null,
+      "max_height": null,
+      "max_width": null,
+      "min_height": null,
+      "min_width": null,
+      "object_fit": null,
+      "object_position": null,
+      "order": null,
+      "overflow": null,
+      "overflow_x": null,
+      "overflow_y": null,
+      "padding": null,
+      "right": null,
+      "top": null,
+      "visibility": null,
+      "width": null
+     }
+    },
+    "ce6da216a9e84cb389f64fa027e1f49c": {
+     "model_module": "@jupyter-widgets/controls",
+     "model_module_version": "1.5.0",
+     "model_name": "FloatProgressModel",
+     "state": {
+      "_dom_classes": [],
+      "_model_module": "@jupyter-widgets/controls",
+      "_model_module_version": "1.5.0",
+      "_model_name": "FloatProgressModel",
+      "_view_count": null,
+      "_view_module": "@jupyter-widgets/controls",
+      "_view_module_version": "1.5.0",
+      "_view_name": "ProgressView",
+      "bar_style": "success",
+      "description": "",
+      "description_tooltip": null,
+      "layout": "IPY_MODEL_92eae6b08b174832b9aa2f7a603eaf81",
+      "max": 9,
+      "min": 0,
+      "orientation": "horizontal",
+      "style": "IPY_MODEL_a970f5a7cccc44b9b693b90f5e47a255",
+      "value": 9
+     }
+    },
+    "cf73c69dbf3f41aa8d9f38f99c28a476": {
+     "model_module": "@jupyter-widgets/controls",
+     "model_module_version": "1.5.0",
+     "model_name": "DescriptionStyleModel",
+     "state": {
+      "_model_module": "@jupyter-widgets/controls",
+      "_model_module_version": "1.5.0",
+      "_model_name": "DescriptionStyleModel",
+      "_view_count": null,
+      "_view_module": "@jupyter-widgets/base",
+      "_view_module_version": "1.2.0",
+      "_view_name": "StyleView",
+      "description_width": ""
+     }
+    },
+    "d259c5044a534fe997234f847e2dfaf6": {
+     "model_module": "@jupyter-widgets/controls",
+     "model_module_version": "1.5.0",
+     "model_name": "FloatProgressModel",
+     "state": {
+      "_dom_classes": [],
+      "_model_module": "@jupyter-widgets/controls",
+      "_model_module_version": "1.5.0",
+      "_model_name": "FloatProgressModel",
+      "_view_count": null,
+      "_view_module": "@jupyter-widgets/controls",
+      "_view_module_version": "1.5.0",
+      "_view_name": "ProgressView",
+      "bar_style": "success",
+      "description": "",
+      "description_tooltip": null,
+      "layout": "IPY_MODEL_5fdf523b124c436f84a7f2fe35084bd1",
+      "max": 10,
+      "min": 0,
+      "orientation": "horizontal",
+      "style": "IPY_MODEL_c10116d3eb5848229d9dddba6610bad3",
+      "value": 10
+     }
+    },
+    "d4deb0be86d1471fb2c230b664bb26ec": {
+     "model_module": "@jupyter-widgets/controls",
+     "model_module_version": "1.5.0",
+     "model_name": "ProgressStyleModel",
+     "state": {
+      "_model_module": "@jupyter-widgets/controls",
+      "_model_module_version": "1.5.0",
+      "_model_name": "ProgressStyleModel",
+      "_view_count": null,
+      "_view_module": "@jupyter-widgets/base",
+      "_view_module_version": "1.2.0",
+      "_view_name": "StyleView",
+      "bar_color": null,
+      "description_width": ""
+     }
+    },
+    "d8d15329978c432b9542b00518fb6091": {
+     "model_module": "@jupyter-widgets/controls",
+     "model_module_version": "1.5.0",
+     "model_name": "FloatProgressModel",
+     "state": {
+      "_dom_classes": [],
+      "_model_module": "@jupyter-widgets/controls",
+      "_model_module_version": "1.5.0",
+      "_model_name": "FloatProgressModel",
+      "_view_count": null,
+      "_view_module": "@jupyter-widgets/controls",
+      "_view_module_version": "1.5.0",
+      "_view_name": "ProgressView",
+      "bar_style": "success",
+      "description": "",
+      "description_tooltip": null,
+      "layout": "IPY_MODEL_54e79e8c93114ab5bd86552175596997",
+      "max": 9,
+      "min": 0,
+      "orientation": "horizontal",
+      "style": "IPY_MODEL_aec26073910f448f972a23ed85a1c715",
+      "value": 9
+     }
+    },
+    "d917ddc2b06e4db9a2e30e9eb5fcc000": {
+     "model_module": "@jupyter-widgets/controls",
+     "model_module_version": "1.5.0",
+     "model_name": "FloatProgressModel",
+     "state": {
+      "_dom_classes": [],
+      "_model_module": "@jupyter-widgets/controls",
+      "_model_module_version": "1.5.0",
+      "_model_name": "FloatProgressModel",
+      "_view_count": null,
+      "_view_module": "@jupyter-widgets/controls",
+      "_view_module_version": "1.5.0",
+      "_view_name": "ProgressView",
+      "bar_style": "success",
+      "description": "",
+      "description_tooltip": null,
+      "layout": "IPY_MODEL_10258155181245e581447f690cc4011f",
+      "max": 9,
+      "min": 0,
+      "orientation": "horizontal",
+      "style": "IPY_MODEL_dad6ae5be0464735a35bc4a46f6519e2",
+      "value": 9
+     }
+    },
+    "dad6ae5be0464735a35bc4a46f6519e2": {
+     "model_module": "@jupyter-widgets/controls",
+     "model_module_version": "1.5.0",
+     "model_name": "ProgressStyleModel",
+     "state": {
+      "_model_module": "@jupyter-widgets/controls",
+      "_model_module_version": "1.5.0",
+      "_model_name": "ProgressStyleModel",
+      "_view_count": null,
+      "_view_module": "@jupyter-widgets/base",
+      "_view_module_version": "1.2.0",
+      "_view_name": "StyleView",
+      "bar_color": null,
+      "description_width": ""
+     }
+    },
+    "dbc7623dda6f4270973256ca86801288": {
+     "model_module": "@jupyter-widgets/base",
+     "model_module_version": "1.2.0",
+     "model_name": "LayoutModel",
+     "state": {
+      "_model_module": "@jupyter-widgets/base",
+      "_model_module_version": "1.2.0",
+      "_model_name": "LayoutModel",
+      "_view_count": null,
+      "_view_module": "@jupyter-widgets/base",
+      "_view_module_version": "1.2.0",
+      "_view_name": "LayoutView",
+      "align_content": null,
+      "align_items": null,
+      "align_self": null,
+      "border": null,
+      "bottom": null,
+      "display": null,
+      "flex": null,
+      "flex_flow": null,
+      "grid_area": null,
+      "grid_auto_columns": null,
+      "grid_auto_flow": null,
+      "grid_auto_rows": null,
+      "grid_column": null,
+      "grid_gap": null,
+      "grid_row": null,
+      "grid_template_areas": null,
+      "grid_template_columns": null,
+      "grid_template_rows": null,
+      "height": null,
+      "justify_content": null,
+      "justify_items": null,
+      "left": null,
+      "margin": null,
+      "max_height": null,
+      "max_width": null,
+      "min_height": null,
+      "min_width": null,
+      "object_fit": null,
+      "object_position": null,
+      "order": null,
+      "overflow": null,
+      "overflow_x": null,
+      "overflow_y": null,
+      "padding": null,
+      "right": null,
+      "top": null,
+      "visibility": null,
+      "width": null
+     }
+    },
+    "e54bc025c8e44b2abeffd71ffa89db0e": {
+     "model_module": "@jupyter-widgets/controls",
+     "model_module_version": "1.5.0",
+     "model_name": "FloatProgressModel",
+     "state": {
+      "_dom_classes": [],
+      "_model_module": "@jupyter-widgets/controls",
+      "_model_module_version": "1.5.0",
+      "_model_name": "FloatProgressModel",
+      "_view_count": null,
+      "_view_module": "@jupyter-widgets/controls",
+      "_view_module_version": "1.5.0",
+      "_view_name": "ProgressView",
+      "bar_style": "success",
+      "description": "",
+      "description_tooltip": null,
+      "layout": "IPY_MODEL_f36af1ab4cf44bf4b3bda2f4059da84b",
+      "max": 9,
+      "min": 0,
+      "orientation": "horizontal",
+      "style": "IPY_MODEL_bbc5507bf0984c07ba33ce163d50dd79",
+      "value": 9
+     }
+    },
+    "e62c917b449e4917968db34c41bb052f": {
+     "model_module": "@jupyter-widgets/controls",
+     "model_module_version": "1.5.0",
+     "model_name": "FloatProgressModel",
+     "state": {
+      "_dom_classes": [],
+      "_model_module": "@jupyter-widgets/controls",
+      "_model_module_version": "1.5.0",
+      "_model_name": "FloatProgressModel",
+      "_view_count": null,
+      "_view_module": "@jupyter-widgets/controls",
+      "_view_module_version": "1.5.0",
+      "_view_name": "ProgressView",
+      "bar_style": "success",
+      "description": "",
+      "description_tooltip": null,
+      "layout": "IPY_MODEL_b2516bc3259a41d2926a47223f213fe5",
+      "max": 10,
+      "min": 0,
+      "orientation": "horizontal",
+      "style": "IPY_MODEL_d4deb0be86d1471fb2c230b664bb26ec",
+      "value": 10
+     }
+    },
+    "e6dd9deda3954d80b142479e38bf3038": {
+     "model_module": "@jupyter-widgets/controls",
+     "model_module_version": "1.5.0",
+     "model_name": "DescriptionStyleModel",
+     "state": {
+      "_model_module": "@jupyter-widgets/controls",
+      "_model_module_version": "1.5.0",
+      "_model_name": "DescriptionStyleModel",
+      "_view_count": null,
+      "_view_module": "@jupyter-widgets/base",
+      "_view_module_version": "1.2.0",
+      "_view_name": "StyleView",
+      "description_width": ""
+     }
+    },
+    "e711f79c92a4454e8b5b64be6db28052": {
+     "model_module": "@jupyter-widgets/base",
+     "model_module_version": "1.2.0",
+     "model_name": "LayoutModel",
+     "state": {
+      "_model_module": "@jupyter-widgets/base",
+      "_model_module_version": "1.2.0",
+      "_model_name": "LayoutModel",
+      "_view_count": null,
+      "_view_module": "@jupyter-widgets/base",
+      "_view_module_version": "1.2.0",
+      "_view_name": "LayoutView",
+      "align_content": null,
+      "align_items": null,
+      "align_self": null,
+      "border": null,
+      "bottom": null,
+      "display": null,
+      "flex": null,
+      "flex_flow": null,
+      "grid_area": null,
+      "grid_auto_columns": null,
+      "grid_auto_flow": null,
+      "grid_auto_rows": null,
+      "grid_column": null,
+      "grid_gap": null,
+      "grid_row": null,
+      "grid_template_areas": null,
+      "grid_template_columns": null,
+      "grid_template_rows": null,
+      "height": null,
+      "justify_content": null,
+      "justify_items": null,
+      "left": null,
+      "margin": null,
+      "max_height": null,
+      "max_width": null,
+      "min_height": null,
+      "min_width": null,
+      "object_fit": null,
+      "object_position": null,
+      "order": null,
+      "overflow": null,
+      "overflow_x": null,
+      "overflow_y": null,
+      "padding": null,
+      "right": null,
+      "top": null,
+      "visibility": null,
+      "width": null
+     }
+    },
+    "e8ba301d2b0641509ddea11effc55df4": {
+     "model_module": "@jupyter-widgets/controls",
+     "model_module_version": "1.5.0",
+     "model_name": "HBoxModel",
+     "state": {
+      "_dom_classes": [],
+      "_model_module": "@jupyter-widgets/controls",
+      "_model_module_version": "1.5.0",
+      "_model_name": "HBoxModel",
+      "_view_count": null,
+      "_view_module": "@jupyter-widgets/controls",
+      "_view_module_version": "1.5.0",
+      "_view_name": "HBoxView",
+      "box_style": "",
+      "children": [
+       "IPY_MODEL_5dfd67eee5584fd7ba54da2cc67d4d2d",
+       "IPY_MODEL_5c250c426c334b86987b6846a7dfcc2a",
+       "IPY_MODEL_eed4caada42340a1a974572cc51e6890"
+      ],
+      "layout": "IPY_MODEL_227ce5ea7ff7467fab0e9dadc6b12cd3"
+     }
+    },
+    "e944ae244de142268b5cbc6b06c847bc": {
+     "model_module": "@jupyter-widgets/base",
+     "model_module_version": "1.2.0",
+     "model_name": "LayoutModel",
+     "state": {
+      "_model_module": "@jupyter-widgets/base",
+      "_model_module_version": "1.2.0",
+      "_model_name": "LayoutModel",
+      "_view_count": null,
+      "_view_module": "@jupyter-widgets/base",
+      "_view_module_version": "1.2.0",
+      "_view_name": "LayoutView",
+      "align_content": null,
+      "align_items": null,
+      "align_self": null,
+      "border": null,
+      "bottom": null,
+      "display": null,
+      "flex": null,
+      "flex_flow": null,
+      "grid_area": null,
+      "grid_auto_columns": null,
+      "grid_auto_flow": null,
+      "grid_auto_rows": null,
+      "grid_column": null,
+      "grid_gap": null,
+      "grid_row": null,
+      "grid_template_areas": null,
+      "grid_template_columns": null,
+      "grid_template_rows": null,
+      "height": null,
+      "justify_content": null,
+      "justify_items": null,
+      "left": null,
+      "margin": null,
+      "max_height": null,
+      "max_width": null,
+      "min_height": null,
+      "min_width": null,
+      "object_fit": null,
+      "object_position": null,
+      "order": null,
+      "overflow": null,
+      "overflow_x": null,
+      "overflow_y": null,
+      "padding": null,
+      "right": null,
+      "top": null,
+      "visibility": null,
+      "width": null
+     }
+    },
+    "ebd768308645435b921396ff11d64005": {
+     "model_module": "@jupyter-widgets/base",
+     "model_module_version": "1.2.0",
+     "model_name": "LayoutModel",
+     "state": {
+      "_model_module": "@jupyter-widgets/base",
+      "_model_module_version": "1.2.0",
+      "_model_name": "LayoutModel",
+      "_view_count": null,
+      "_view_module": "@jupyter-widgets/base",
+      "_view_module_version": "1.2.0",
+      "_view_name": "LayoutView",
+      "align_content": null,
+      "align_items": null,
+      "align_self": null,
+      "border": null,
+      "bottom": null,
+      "display": null,
+      "flex": null,
+      "flex_flow": null,
+      "grid_area": null,
+      "grid_auto_columns": null,
+      "grid_auto_flow": null,
+      "grid_auto_rows": null,
+      "grid_column": null,
+      "grid_gap": null,
+      "grid_row": null,
+      "grid_template_areas": null,
+      "grid_template_columns": null,
+      "grid_template_rows": null,
+      "height": null,
+      "justify_content": null,
+      "justify_items": null,
+      "left": null,
+      "margin": null,
+      "max_height": null,
+      "max_width": null,
+      "min_height": null,
+      "min_width": null,
+      "object_fit": null,
+      "object_position": null,
+      "order": null,
+      "overflow": null,
+      "overflow_x": null,
+      "overflow_y": null,
+      "padding": null,
+      "right": null,
+      "top": null,
+      "visibility": null,
+      "width": null
+     }
+    },
+    "ec519180813449e7829b106f5924b06f": {
+     "model_module": "@jupyter-widgets/controls",
+     "model_module_version": "1.5.0",
+     "model_name": "HTMLModel",
+     "state": {
+      "_dom_classes": [],
+      "_model_module": "@jupyter-widgets/controls",
+      "_model_module_version": "1.5.0",
+      "_model_name": "HTMLModel",
+      "_view_count": null,
+      "_view_module": "@jupyter-widgets/controls",
+      "_view_module_version": "1.5.0",
+      "_view_name": "HTMLView",
+      "description": "",
+      "description_tooltip": null,
+      "layout": "IPY_MODEL_fb7f07b1d4054ff197e3baf38d316c00",
+      "placeholder": "​",
+      "style": "IPY_MODEL_cf73c69dbf3f41aa8d9f38f99c28a476",
+      "value": " 10/10 [00:00&lt;00:00, 12.14it/s]"
+     }
+    },
+    "eed4caada42340a1a974572cc51e6890": {
+     "model_module": "@jupyter-widgets/controls",
+     "model_module_version": "1.5.0",
+     "model_name": "HTMLModel",
+     "state": {
+      "_dom_classes": [],
+      "_model_module": "@jupyter-widgets/controls",
+      "_model_module_version": "1.5.0",
+      "_model_name": "HTMLModel",
+      "_view_count": null,
+      "_view_module": "@jupyter-widgets/controls",
+      "_view_module_version": "1.5.0",
+      "_view_name": "HTMLView",
+      "description": "",
+      "description_tooltip": null,
+      "layout": "IPY_MODEL_1cf1aebb3abc4e7e87f79a7a9034d5b3",
+      "placeholder": "​",
+      "style": "IPY_MODEL_2add5d190198404aa6428c3975b87547",
+      "value": " 3/3 [00:00&lt;00:00, 61.05it/s]"
+     }
+    },
+    "f36af1ab4cf44bf4b3bda2f4059da84b": {
+     "model_module": "@jupyter-widgets/base",
+     "model_module_version": "1.2.0",
+     "model_name": "LayoutModel",
+     "state": {
+      "_model_module": "@jupyter-widgets/base",
+      "_model_module_version": "1.2.0",
+      "_model_name": "LayoutModel",
+      "_view_count": null,
+      "_view_module": "@jupyter-widgets/base",
+      "_view_module_version": "1.2.0",
+      "_view_name": "LayoutView",
+      "align_content": null,
+      "align_items": null,
+      "align_self": null,
+      "border": null,
+      "bottom": null,
+      "display": null,
+      "flex": null,
+      "flex_flow": null,
+      "grid_area": null,
+      "grid_auto_columns": null,
+      "grid_auto_flow": null,
+      "grid_auto_rows": null,
+      "grid_column": null,
+      "grid_gap": null,
+      "grid_row": null,
+      "grid_template_areas": null,
+      "grid_template_columns": null,
+      "grid_template_rows": null,
+      "height": null,
+      "justify_content": null,
+      "justify_items": null,
+      "left": null,
+      "margin": null,
+      "max_height": null,
+      "max_width": null,
+      "min_height": null,
+      "min_width": null,
+      "object_fit": null,
+      "object_position": null,
+      "order": null,
+      "overflow": null,
+      "overflow_x": null,
+      "overflow_y": null,
+      "padding": null,
+      "right": null,
+      "top": null,
+      "visibility": null,
+      "width": null
+     }
+    },
+    "f513bda9bc6d4b4bbe63a094aff7aa58": {
+     "model_module": "@jupyter-widgets/base",
+     "model_module_version": "1.2.0",
+     "model_name": "LayoutModel",
+     "state": {
+      "_model_module": "@jupyter-widgets/base",
+      "_model_module_version": "1.2.0",
+      "_model_name": "LayoutModel",
+      "_view_count": null,
+      "_view_module": "@jupyter-widgets/base",
+      "_view_module_version": "1.2.0",
+      "_view_name": "LayoutView",
+      "align_content": null,
+      "align_items": null,
+      "align_self": null,
+      "border": null,
+      "bottom": null,
+      "display": null,
+      "flex": null,
+      "flex_flow": null,
+      "grid_area": null,
+      "grid_auto_columns": null,
+      "grid_auto_flow": null,
+      "grid_auto_rows": null,
+      "grid_column": null,
+      "grid_gap": null,
+      "grid_row": null,
+      "grid_template_areas": null,
+      "grid_template_columns": null,
+      "grid_template_rows": null,
+      "height": null,
+      "justify_content": null,
+      "justify_items": null,
+      "left": null,
+      "margin": null,
+      "max_height": null,
+      "max_width": null,
+      "min_height": null,
+      "min_width": null,
+      "object_fit": null,
+      "object_position": null,
+      "order": null,
+      "overflow": null,
+      "overflow_x": null,
+      "overflow_y": null,
+      "padding": null,
+      "right": null,
+      "top": null,
+      "visibility": null,
+      "width": null
+     }
+    },
+    "f539d91e10aa4216bc852be8897904fc": {
+     "model_module": "@jupyter-widgets/controls",
+     "model_module_version": "1.5.0",
+     "model_name": "HBoxModel",
+     "state": {
+      "_dom_classes": [],
+      "_model_module": "@jupyter-widgets/controls",
+      "_model_module_version": "1.5.0",
+      "_model_name": "HBoxModel",
+      "_view_count": null,
+      "_view_module": "@jupyter-widgets/controls",
+      "_view_module_version": "1.5.0",
+      "_view_name": "HBoxView",
+      "box_style": "",
+      "children": [
+       "IPY_MODEL_95e17670f76240a891da5b1218b2ae09",
+       "IPY_MODEL_d259c5044a534fe997234f847e2dfaf6",
+       "IPY_MODEL_27328026e1ec4e49a6c86b272ba55750"
+      ],
+      "layout": "IPY_MODEL_e711f79c92a4454e8b5b64be6db28052"
+     }
+    },
+    "fb7f07b1d4054ff197e3baf38d316c00": {
+     "model_module": "@jupyter-widgets/base",
+     "model_module_version": "1.2.0",
+     "model_name": "LayoutModel",
+     "state": {
+      "_model_module": "@jupyter-widgets/base",
+      "_model_module_version": "1.2.0",
+      "_model_name": "LayoutModel",
+      "_view_count": null,
+      "_view_module": "@jupyter-widgets/base",
+      "_view_module_version": "1.2.0",
+      "_view_name": "LayoutView",
+      "align_content": null,
+      "align_items": null,
+      "align_self": null,
+      "border": null,
+      "bottom": null,
+      "display": null,
+      "flex": null,
+      "flex_flow": null,
+      "grid_area": null,
+      "grid_auto_columns": null,
+      "grid_auto_flow": null,
+      "grid_auto_rows": null,
+      "grid_column": null,
+      "grid_gap": null,
+      "grid_row": null,
+      "grid_template_areas": null,
+      "grid_template_columns": null,
+      "grid_template_rows": null,
+      "height": null,
+      "justify_content": null,
+      "justify_items": null,
+      "left": null,
+      "margin": null,
+      "max_height": null,
+      "max_width": null,
+      "min_height": null,
+      "min_width": null,
+      "object_fit": null,
+      "object_position": null,
+      "order": null,
+      "overflow": null,
+      "overflow_x": null,
+      "overflow_y": null,
+      "padding": null,
+      "right": null,
+      "top": null,
+      "visibility": null,
+      "width": null
+     }
+    },
+    "fcdf278a18854f91a43038974ed1e889": {
+     "model_module": "@jupyter-widgets/controls",
+     "model_module_version": "1.5.0",
+     "model_name": "HTMLModel",
+     "state": {
+      "_dom_classes": [],
+      "_model_module": "@jupyter-widgets/controls",
+      "_model_module_version": "1.5.0",
+      "_model_name": "HTMLModel",
+      "_view_count": null,
+      "_view_module": "@jupyter-widgets/controls",
+      "_view_module_version": "1.5.0",
+      "_view_name": "HTMLView",
+      "description": "",
+      "description_tooltip": null,
+      "layout": "IPY_MODEL_003944c19322432f8fbffe4a95bb5a3d",
+      "placeholder": "​",
+      "style": "IPY_MODEL_e6dd9deda3954d80b142479e38bf3038",
+      "value": " 10/10 [00:00&lt;00:00, 11.89it/s]"
+     }
+    }
+   }
+  }
+ },
+ "nbformat": 4,
+ "nbformat_minor": 1
+}
Index: tutorials/Tutorial_Handle_Changes_In_Predictions.ipynb
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/tutorials/Tutorial_Handle_Changes_In_Predictions.ipynb b/tutorials/Tutorial_Handle_Changes_In_Predictions.ipynb
--- a/tutorials/Tutorial_Handle_Changes_In_Predictions.ipynb	(revision c2255b793bae21a32b1274275ae60b44cdd94d7b)
+++ b/tutorials/Tutorial_Handle_Changes_In_Predictions.ipynb	(date 1681078308182)
@@ -205,7 +205,7 @@
    "cell_type": "code",
    "execution_count": 17,
    "metadata": {},
-      "outputs": [
+   "outputs": [
     {
      "data": {
       "text/plain": "                                  0         1         2         3         4   \\\nNo Prediction Change Check  0.003274  0.003258  0.008044  0.005117  0.007698   \nNan On Prediction Change         NaN       NaN  0.008044  0.005117  0.007699   \n\n                                  5         6        7         8         9   \\\nNo Prediction Change Check  0.004486  0.003926  0.00226  0.004641  0.009831   \nNan On Prediction Change    0.004486       NaN      NaN       NaN  0.009832   \n\n                            ...        22      23        24        25  \\\nNo Prediction Change Check  ...  0.005673  0.0055  0.004242  0.007323   \nNan On Prediction Change    ...  0.005673  0.0055       NaN  0.007323   \n\n                                  26        27        28        29        30  \\\nNo Prediction Change Check  0.005993  0.007763  0.009405  0.012347  0.004398   \nNan On Prediction Change    0.005996  0.007763  0.009405  0.012347       NaN   \n\n                                  31  \nNo Prediction Change Check  0.011894  \nNan On Prediction Change         NaN  \n\n[2 rows x 32 columns]",
Index: tutorials/Tutorial_Metric_Parameterisation_Analysis.ipynb
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/tutorials/Tutorial_Metric_Parameterisation_Analysis.ipynb b/tutorials/Tutorial_Metric_Parameterisation_Analysis.ipynb
--- a/tutorials/Tutorial_Metric_Parameterisation_Analysis.ipynb	(revision c2255b793bae21a32b1274275ae60b44cdd94d7b)
+++ b/tutorials/Tutorial_Metric_Parameterisation_Analysis.ipynb	(date 1681078308182)
@@ -1345,4 +1345,4 @@
  },
  "nbformat": 4,
  "nbformat_minor": 1
-}
\ No newline at end of file
+}
Index: tutorials/Tutorial_NLP_Customization.ipynb
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/tutorials/Tutorial_NLP_Customization.ipynb b/tutorials/Tutorial_NLP_Customization.ipynb
new file mode 100644
--- /dev/null	(date 1681078345896)
+++ b/tutorials/Tutorial_NLP_Customization.ipynb	(date 1681078345896)
@@ -0,0 +1,535 @@
+{
+ "cells": [
+  {
+   "cell_type": "markdown",
+   "source": [
+    "Quantus supports text-classification models out of the box.\n",
+    "In this tutorial we show how you can use Quantus with your custom model."
+   ],
+   "metadata": {
+    "collapsed": false
+   }
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 13,
+   "outputs": [
+    {
+     "data": {
+      "text/plain": "[LogicalDevice(name='/device:CPU:0', device_type='CPU'),\n LogicalDevice(name='/device:GPU:0', device_type='GPU')]"
+     },
+     "execution_count": 13,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "from typing import NamedTuple, List\n",
+    "import logging\n",
+    "\n",
+    "import numpy as np\n",
+    "import tensorflow as tf\n",
+    "from tensorflow import keras\n",
+    "\n",
+    "from datasets import load_dataset\n",
+    "from tokenizers import Tokenizer\n",
+    "from tokenizers import normalizers\n",
+    "from tokenizers.normalizers import NFD, Lowercase, StripAccents\n",
+    "from tokenizers.models import WordPiece\n",
+    "from tokenizers.pre_tokenizers import Whitespace\n",
+    "from tokenizers.trainers import WordPieceTrainer\n",
+    "from tokenizers.processors import TemplateProcessing\n",
+    "from keras_nlp.layers import FNetEncoder, TokenAndPositionEmbedding\n",
+    "\n",
+    "from helpers.model.text_classifier import Tokenizable, TextClassifier, EmbeddingsCallable\n",
+    "from quantus.helpers.tf_utils import is_xla_compatible_platform\n",
+    "from quantus.helpers.types import Explanation\n",
+    "\n",
+    "logging.getLogger().setLevel(logging.ERROR)\n",
+    "tf.get_logger().setLevel(logging.ERROR)\n",
+    "tf.config.list_logical_devices()"
+   ],
+   "metadata": {
+    "collapsed": false,
+    "ExecuteTime": {
+     "start_time": "2023-04-05T19:45:39.327009Z",
+     "end_time": "2023-04-05T19:45:39.334416Z"
+    }
+   }
+  },
+  {
+   "cell_type": "markdown",
+   "source": [
+    "## 1) Preliminaries.\n",
+    "### 1.1 Load SST2 dataset."
+   ],
+   "metadata": {
+    "collapsed": false
+   }
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 14,
+   "metadata": {
+    "ExecuteTime": {
+     "start_time": "2023-04-05T19:45:41.759939Z",
+     "end_time": "2023-04-05T19:45:43.110498Z"
+    },
+    "collapsed": false
+   },
+   "outputs": [
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "WARNING:datasets.builder:Found cached dataset sst2 (/Users/artemsereda/.cache/huggingface/datasets/sst2/default/2.0.0/9896208a8d85db057ac50c72282bcb8fe755accc671a57dd8059d4e130961ed5)\n"
+     ]
+    },
+    {
+     "data": {
+      "text/plain": "  0%|          | 0/3 [00:00<?, ?it/s]",
+      "application/vnd.jupyter.widget-view+json": {
+       "version_major": 2,
+       "version_minor": 0,
+       "model_id": "1da741aedeee4ec59f03bfc371a77471"
+      }
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    }
+   ],
+   "source": [
+    "dataset = load_dataset(\"sst2\")\n",
+    "\n",
+    "X_train = dataset[\"train\"][\"sentence\"]\n",
+    "X_val = dataset[\"validation\"][\"sentence\"]\n",
+    "\n",
+    "Y_train = dataset[\"train\"][\"label\"]\n",
+    "Y_val = dataset[\"validation\"][\"label\"]"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "source": [
+    "### 1.2. Train Wordpiece tokenizer.\n",
+    "More about wordpiece algorithm [here](https://huggingface.co/course/chapter6/6?fw=pt).\n",
+    "More about tokenizers library [here](https://huggingface.co/docs/tokenizers/index)."
+   ],
+   "metadata": {
+    "collapsed": false
+   }
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 15,
+   "metadata": {
+    "ExecuteTime": {
+     "start_time": "2023-04-05T19:45:43.117899Z",
+     "end_time": "2023-04-05T19:45:43.761762Z"
+    },
+    "collapsed": false
+   },
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "\n",
+      "\n",
+      "\n"
+     ]
+    }
+   ],
+   "source": [
+    "tokenizer = Tokenizer(WordPiece(unk_token=\"[UNK]\"))\n",
+    "trainer = WordPieceTrainer(special_tokens=[\"[UNK]\", \"[CLS]\", \"[SEP]\", \"[PAD]\", \"[MASK]\"], vocab_size=10_000)\n",
+    "\n",
+    "# Input pre-processing.\n",
+    "tokenizer.pre_tokenizer = Whitespace()\n",
+    "tokenizer.normalizer = normalizers.Sequence([NFD(), Lowercase(), StripAccents()])\n",
+    "\n",
+    "# Append classification tokens.\n",
+    "tokenizer.post_processor = TemplateProcessing(\n",
+    "    single=\"[CLS] $A [SEP]\",\n",
+    "    pair=\"[CLS] $A [SEP] $B:1 [SEP]:1\",\n",
+    "    special_tokens=[\n",
+    "        (\"[CLS]\", 1),\n",
+    "        (\"[SEP]\", 2),\n",
+    "    ],\n",
+    ")\n",
+    "\n",
+    "# Train on all data.\n",
+    "tokenizer.train_from_iterator(X_train + X_val, trainer)"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "source": [
+    "### 1.3 Encode text."
+   ],
+   "metadata": {
+    "collapsed": false
+   }
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 16,
+   "metadata": {
+    "ExecuteTime": {
+     "start_time": "2023-04-05T19:45:43.767685Z",
+     "end_time": "2023-04-05T19:45:44.273785Z"
+    },
+    "collapsed": false
+   },
+   "outputs": [],
+   "source": [
+    "# Configure for usage.\n",
+    "tokenizer.enable_padding()\n",
+    "tokenizer.enable_truncation(max_length=30)\n",
+    "# Encode inputs.\n",
+    "X_train_encoded = [i.ids for i in tokenizer.encode_batch(X_train)]\n",
+    "X_val_encoded = [i.ids for i in tokenizer.encode_batch(X_val)]"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "source": [
+    "### 1.4. Convert to TF dataset."
+   ],
+   "metadata": {
+    "collapsed": false
+   }
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 17,
+   "metadata": {
+    "ExecuteTime": {
+     "start_time": "2023-04-05T19:45:44.497328Z",
+     "end_time": "2023-04-05T19:45:46.504690Z"
+    },
+    "collapsed": false
+   },
+   "outputs": [],
+   "source": [
+    "train_ds = tf.data.Dataset.from_tensor_slices(\n",
+    "    (X_train_encoded, Y_train)\n",
+    ").shuffle(100).batch(2048, drop_remainder=True).cache().prefetch(tf.data.AUTOTUNE)\n",
+    "val_ds = tf.data.Dataset.from_tensor_slices(\n",
+    "    (X_val_encoded, Y_val)\n",
+    ").shuffle(100).batch(2048, drop_remainder=True).cache().prefetch(tf.data.AUTOTUNE)"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "source": [
+    "### 1.5. Define model\n",
+    "We use simple and lightweight FNet architecture. More about it [here](https://arxiv.org/abs/2105.03824).\n",
+    "The implementation is based on [keras_nlp](https://github.com/keras-team/keras-nlp/blob/master/keras_nlp/layers/f_net_encoder.py)."
+   ],
+   "metadata": {
+    "collapsed": false
+   }
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 18,
+   "metadata": {
+    "ExecuteTime": {
+     "start_time": "2023-04-05T19:45:46.522737Z",
+     "end_time": "2023-04-05T19:45:46.659153Z"
+    },
+    "collapsed": false
+   },
+   "outputs": [],
+   "source": [
+    "class FNetConfig(NamedTuple):\n",
+    "    embedding_dim = 128\n",
+    "    intermediate_dim = 256\n",
+    "    num_encoder_blocks = 3\n",
+    "    max_sequence_length = 30\n",
+    "    vocab_size = 10_000\n",
+    "    num_labels = 20\n",
+    "\n",
+    "\n",
+    "\n",
+    "class FNetClassifier(keras.Model):\n",
+    "\n",
+    "    def __init__(self, config: FNetConfig):\n",
+    "        super().__init__()\n",
+    "\n",
+    "\n",
+    "    def call(self, inputs, training=None, mask=None):\n",
+    "        pass\n",
+    "\n",
+    "\n",
+    "def fnet_classifier(config: FNetConfig):\n",
+    "    input_ids = keras.Input(shape=(None,), dtype=tf.int64, name=\"input_ids\")\n",
+    "    x = TokenAndPositionEmbedding(\n",
+    "        vocabulary_size=config.vocab_size,\n",
+    "        sequence_length=config.max_sequence_length,\n",
+    "        embedding_dim=config.embedding_dim,\n",
+    "    )(input_ids)\n",
+    "\n",
+    "    for _ in range(config.num_encoder_blocks):\n",
+    "        x = FNetEncoder(intermediate_dim=config.intermediate_dim)(inputs=x)\n",
+    "\n",
+    "    x = keras.layers.GlobalAveragePooling1D()(x)\n",
+    "    x = keras.layers.Dropout(0.1)(x)\n",
+    "    outputs = keras.layers.Dense(config.num_labels, activation=\"softmax\")(x)\n",
+    "    fnet_model = keras.Model(input_ids, outputs, name=\"fnet_classifier\")\n",
+    "    return fnet_model\n",
+    "\n",
+    "\n",
+    "model = fnet_classifier(FNetConfig())"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "source": [
+    "### 1.6 Train model."
+   ],
+   "metadata": {
+    "collapsed": false
+   }
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 19,
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2023-03-30T19:34:33.489353Z",
+     "start_time": "2023-03-30T19:22:04.735483Z"
+    },
+    "collapsed": false
+   },
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "Epoch 1/5\n",
+      "32/32 [==============================] - 179s 6s/step - loss: 0.9690 - accuracy: 0.5170\n",
+      "Epoch 2/5\n",
+      "28/32 [=========================>....] - ETA: 28s - loss: nan - accuracy: 0.4579"
+     ]
+    },
+    {
+     "ename": "KeyboardInterrupt",
+     "evalue": "",
+     "output_type": "error",
+     "traceback": [
+      "\u001B[0;31m---------------------------------------------------------------------------\u001B[0m",
+      "\u001B[0;31mKeyboardInterrupt\u001B[0m                         Traceback (most recent call last)",
+      "\u001B[0;32m/var/folders/z_/0m6v5by50hz7hm8_bfck_0gm0000gp/T/ipykernel_61716/4017377499.py\u001B[0m in \u001B[0;36m<cell line: 11>\u001B[0;34m()\u001B[0m\n\u001B[1;32m      9\u001B[0m )\n\u001B[1;32m     10\u001B[0m \u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0;32m---> 11\u001B[0;31m model.fit(\n\u001B[0m\u001B[1;32m     12\u001B[0m     \u001B[0mtrain_ds\u001B[0m\u001B[0;34m,\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m     13\u001B[0m     \u001B[0mvalidation_data\u001B[0m\u001B[0;34m=\u001B[0m\u001B[0mval_ds\u001B[0m\u001B[0;34m,\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n",
+      "\u001B[0;32m~/miniconda3/envs/quantus/lib/python3.9/site-packages/keras/utils/traceback_utils.py\u001B[0m in \u001B[0;36merror_handler\u001B[0;34m(*args, **kwargs)\u001B[0m\n\u001B[1;32m     63\u001B[0m         \u001B[0mfiltered_tb\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0;32mNone\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m     64\u001B[0m         \u001B[0;32mtry\u001B[0m\u001B[0;34m:\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0;32m---> 65\u001B[0;31m             \u001B[0;32mreturn\u001B[0m \u001B[0mfn\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0;34m*\u001B[0m\u001B[0margs\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0;34m**\u001B[0m\u001B[0mkwargs\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0m\u001B[1;32m     66\u001B[0m         \u001B[0;32mexcept\u001B[0m \u001B[0mException\u001B[0m \u001B[0;32mas\u001B[0m \u001B[0me\u001B[0m\u001B[0;34m:\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m     67\u001B[0m             \u001B[0mfiltered_tb\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0m_process_traceback_frames\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0me\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0m__traceback__\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n",
+      "\u001B[0;32m~/miniconda3/envs/quantus/lib/python3.9/site-packages/keras/engine/training.py\u001B[0m in \u001B[0;36mfit\u001B[0;34m(self, x, y, batch_size, epochs, verbose, callbacks, validation_split, validation_data, shuffle, class_weight, sample_weight, initial_epoch, steps_per_epoch, validation_steps, validation_batch_size, validation_freq, max_queue_size, workers, use_multiprocessing)\u001B[0m\n\u001B[1;32m   1683\u001B[0m                         ):\n\u001B[1;32m   1684\u001B[0m                             \u001B[0mcallbacks\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mon_train_batch_begin\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mstep\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0;32m-> 1685\u001B[0;31m                             \u001B[0mtmp_logs\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0mself\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mtrain_function\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0miterator\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0m\u001B[1;32m   1686\u001B[0m                             \u001B[0;32mif\u001B[0m \u001B[0mdata_handler\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mshould_sync\u001B[0m\u001B[0;34m:\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m   1687\u001B[0m                                 \u001B[0mcontext\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0masync_wait\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n",
+      "\u001B[0;32m~/miniconda3/envs/quantus/lib/python3.9/site-packages/tensorflow/python/util/traceback_utils.py\u001B[0m in \u001B[0;36merror_handler\u001B[0;34m(*args, **kwargs)\u001B[0m\n\u001B[1;32m    148\u001B[0m     \u001B[0mfiltered_tb\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0;32mNone\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m    149\u001B[0m     \u001B[0;32mtry\u001B[0m\u001B[0;34m:\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0;32m--> 150\u001B[0;31m       \u001B[0;32mreturn\u001B[0m \u001B[0mfn\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0;34m*\u001B[0m\u001B[0margs\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0;34m**\u001B[0m\u001B[0mkwargs\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0m\u001B[1;32m    151\u001B[0m     \u001B[0;32mexcept\u001B[0m \u001B[0mException\u001B[0m \u001B[0;32mas\u001B[0m \u001B[0me\u001B[0m\u001B[0;34m:\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m    152\u001B[0m       \u001B[0mfiltered_tb\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0m_process_traceback_frames\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0me\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0m__traceback__\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n",
+      "\u001B[0;32m~/miniconda3/envs/quantus/lib/python3.9/site-packages/tensorflow/python/eager/polymorphic_function/polymorphic_function.py\u001B[0m in \u001B[0;36m__call__\u001B[0;34m(self, *args, **kwds)\u001B[0m\n\u001B[1;32m    892\u001B[0m \u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m    893\u001B[0m       \u001B[0;32mwith\u001B[0m \u001B[0mOptionalXlaContext\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mself\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0m_jit_compile\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m:\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0;32m--> 894\u001B[0;31m         \u001B[0mresult\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0mself\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0m_call\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0;34m*\u001B[0m\u001B[0margs\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0;34m**\u001B[0m\u001B[0mkwds\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0m\u001B[1;32m    895\u001B[0m \u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m    896\u001B[0m       \u001B[0mnew_tracing_count\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0mself\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mexperimental_get_tracing_count\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n",
+      "\u001B[0;32m~/miniconda3/envs/quantus/lib/python3.9/site-packages/tensorflow/python/eager/polymorphic_function/polymorphic_function.py\u001B[0m in \u001B[0;36m_call\u001B[0;34m(self, *args, **kwds)\u001B[0m\n\u001B[1;32m    924\u001B[0m       \u001B[0;31m# In this case we have created variables on the first call, so we run the\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m    925\u001B[0m       \u001B[0;31m# defunned version which is guaranteed to never create variables.\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0;32m--> 926\u001B[0;31m       \u001B[0;32mreturn\u001B[0m \u001B[0mself\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0m_no_variable_creation_fn\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0;34m*\u001B[0m\u001B[0margs\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0;34m**\u001B[0m\u001B[0mkwds\u001B[0m\u001B[0;34m)\u001B[0m  \u001B[0;31m# pylint: disable=not-callable\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0m\u001B[1;32m    927\u001B[0m     \u001B[0;32melif\u001B[0m \u001B[0mself\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0m_variable_creation_fn\u001B[0m \u001B[0;32mis\u001B[0m \u001B[0;32mnot\u001B[0m \u001B[0;32mNone\u001B[0m\u001B[0;34m:\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m    928\u001B[0m       \u001B[0;31m# Release the lock early so that multiple threads can perform the call\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n",
+      "\u001B[0;32m~/miniconda3/envs/quantus/lib/python3.9/site-packages/tensorflow/python/eager/polymorphic_function/tracing_compiler.py\u001B[0m in \u001B[0;36m__call__\u001B[0;34m(self, *args, **kwargs)\u001B[0m\n\u001B[1;32m    141\u001B[0m       (concrete_function,\n\u001B[1;32m    142\u001B[0m        filtered_flat_args) = self._maybe_define_function(args, kwargs)\n\u001B[0;32m--> 143\u001B[0;31m     return concrete_function._call_flat(\n\u001B[0m\u001B[1;32m    144\u001B[0m         filtered_flat_args, captured_inputs=concrete_function.captured_inputs)  # pylint: disable=protected-access\n\u001B[1;32m    145\u001B[0m \u001B[0;34m\u001B[0m\u001B[0m\n",
+      "\u001B[0;32m~/miniconda3/envs/quantus/lib/python3.9/site-packages/tensorflow/python/eager/polymorphic_function/monomorphic_function.py\u001B[0m in \u001B[0;36m_call_flat\u001B[0;34m(self, args, captured_inputs, cancellation_manager)\u001B[0m\n\u001B[1;32m   1755\u001B[0m         and executing_eagerly):\n\u001B[1;32m   1756\u001B[0m       \u001B[0;31m# No tape is watching; skip to running the function.\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0;32m-> 1757\u001B[0;31m       return self._build_call_outputs(self._inference_function.call(\n\u001B[0m\u001B[1;32m   1758\u001B[0m           ctx, args, cancellation_manager=cancellation_manager))\n\u001B[1;32m   1759\u001B[0m     forward_backward = self._select_forward_and_backward_functions(\n",
+      "\u001B[0;32m~/miniconda3/envs/quantus/lib/python3.9/site-packages/tensorflow/python/eager/polymorphic_function/monomorphic_function.py\u001B[0m in \u001B[0;36mcall\u001B[0;34m(self, ctx, args, cancellation_manager)\u001B[0m\n\u001B[1;32m    379\u001B[0m       \u001B[0;32mwith\u001B[0m \u001B[0m_InterpolateFunctionError\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mself\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m:\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m    380\u001B[0m         \u001B[0;32mif\u001B[0m \u001B[0mcancellation_manager\u001B[0m \u001B[0;32mis\u001B[0m \u001B[0;32mNone\u001B[0m\u001B[0;34m:\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0;32m--> 381\u001B[0;31m           outputs = execute.execute(\n\u001B[0m\u001B[1;32m    382\u001B[0m               \u001B[0mstr\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mself\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0msignature\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mname\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m,\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m    383\u001B[0m               \u001B[0mnum_outputs\u001B[0m\u001B[0;34m=\u001B[0m\u001B[0mself\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0m_num_outputs\u001B[0m\u001B[0;34m,\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n",
+      "\u001B[0;32m~/miniconda3/envs/quantus/lib/python3.9/site-packages/tensorflow/python/eager/execute.py\u001B[0m in \u001B[0;36mquick_execute\u001B[0;34m(op_name, num_outputs, inputs, attrs, ctx, name)\u001B[0m\n\u001B[1;32m     50\u001B[0m   \u001B[0;32mtry\u001B[0m\u001B[0;34m:\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m     51\u001B[0m     \u001B[0mctx\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mensure_initialized\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0;32m---> 52\u001B[0;31m     tensors = pywrap_tfe.TFE_Py_Execute(ctx._handle, device_name, op_name,\n\u001B[0m\u001B[1;32m     53\u001B[0m                                         inputs, attrs, num_outputs)\n\u001B[1;32m     54\u001B[0m   \u001B[0;32mexcept\u001B[0m \u001B[0mcore\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0m_NotOkStatusException\u001B[0m \u001B[0;32mas\u001B[0m \u001B[0me\u001B[0m\u001B[0;34m:\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n",
+      "\u001B[0;31mKeyboardInterrupt\u001B[0m: "
+     ]
+    }
+   ],
+   "source": [
+    "use_xla = is_xla_compatible_model(model)\n",
+    "\n",
+    "\n",
+    "model.compile(\n",
+    "    optimizer=tf.keras.optimizers.legacy.Adam(learning_rate=5e-4),\n",
+    "    loss=\"sparse_categorical_crossentropy\",\n",
+    "    metrics=[\"accuracy\"],\n",
+    "    jit_compile=use_xla,\n",
+    ")\n",
+    "\n",
+    "model.fit(\n",
+    "    train_ds,\n",
+    "    validation_data=val_ds,\n",
+    "    epochs=5,\n",
+    ")\n",
+    "model.summary()"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "source": [
+    "### 1.7 Create adapter for Quantus."
+   ],
+   "metadata": {
+    "collapsed": false
+   }
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "outputs": [],
+   "source": [
+    "from quantus.helpers.model.text_classifier import Tokenizable, R\n",
+    "from quantus.helpers.model.text_classifier import TextClassifier\n",
+    "from quantus.helpers.model.tf_model import TFModelWrapper\n",
+    "from quantus.helpers.model.tf_model_randomizer import TFNestedModelRandomizer\n",
+    "\n",
+    "class TokenizerAdapter(Tokenizable):\n",
+    "\n",
+    "    def __init__(self, tokenizer: Tokenizer):\n",
+    "        self.tokenizer = tokenizer\n",
+    "        self.tokenizer.enable_truncation(max_length=30)\n",
+    "        self.tokenizer.enable_padding()\n",
+    "\n",
+    "    def batch_encode(self, text: List[str], **kwargs) -> R:\n",
+    "        return {\"input_ids\": np.asarray([i.id for i in self.tokenizer.encode_batch(text)])}\n",
+    "\n",
+    "    def convert_ids_to_tokens(self, ids: np.ndarray) -> List[str]:\n",
+    "        return [self.tokenizer.id_to_token(i) for i in ids]\n",
+    "\n",
+    "    def token_id(self, token: str) -> int:\n",
+    "        return self.tokenizer.token_to_id(token)\n",
+    "\n",
+    "    def batch_decode(self, ids: np.ndarray, **kwargs) -> List[str]:\n",
+    "        return self.batch_decode(ids)\n",
+    "\n",
+    "\n",
+    "class FNetAdapter(\n",
+    "    TextClassifier,\n",
+    "    # Inherit from TFNestedModelRandomizer to support Model Parameter Randomisation.\n",
+    "    TFNestedModelRandomizer,\n",
+    "    TFModelWrapper\n",
+    "):\n",
+    "    # If you want to measure Relative Representation Stability, implement HiddenRepresentationsModel.\n",
+    "    # You can try to inherit TFHiddenRepresentationsModel, but from our experience it does not work with custom models and layers.\n",
+    "    # If you want to use gradient-based XAI methods, or latent-space perturbations for robustness metrics implement EmbeddingsCallable.\n",
+    "\n",
+    "\n",
+    "    def __init__(self, fnet: keras.Model, tokenizer: TokenizerAdapter):\n",
+    "        self._tokenizer = tokenizer\n",
+    "        self.model = fnet\n",
+    "\n",
+    "\n",
+    "    def predict(self, text: List[str], **kwargs) -> np.ndarray:\n",
+    "        ids, _ = self.tokenizer.get_input_ids(text)\n",
+    "        return self.model.predict(ids)\n",
+    "\n",
+    "\n",
+    "    def embedding_lookup(self, input_ids):\n",
+    "        return self.model.get_layer(name=\"token_embedding_0\").token_embedding(input_ids)\n",
+    "\n",
+    "    @property\n",
+    "    def tokenizer(self) -> Tokenizable:\n",
+    "        return self._tokenizer"
+   ],
+   "metadata": {
+    "collapsed": false
+   }
+  },
+  {
+   "cell_type": "markdown",
+   "source": [
+    "### 1.8 Define custom explanation function.\n",
+    "A basic signature looks follow way:\n",
+    "\n",
+    "```python\n",
+    "\n",
+    "from typing import List, Protocol\n",
+    "from numpy.typing import ArrayLike\n",
+    "from quantus.helpers.model.text_classifier import TextClassifier\n",
+    "\n",
+    "\n",
+    "class ExplainFn(Protocol):\n",
+    "\n",
+    "    def __call__(\n",
+    "    self,\n",
+    "    model: TextClassifier,\n",
+    "    x_batch: List[str],\n",
+    "    y_batch: ArrayLike,\n",
+    "    **kwargs\n",
+    ") -> List[Tuple[List[str], ArrayLike]]: ...\n",
+    "```\n",
+    "\n",
+    "We will implement counterfactual explanations, using ...."
+   ],
+   "metadata": {
+    "collapsed": false
+   }
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "outputs": [],
+   "source": [
+    "def explain_counterfactual(model: FNetAdapter, x_batch: List[str], y_batch: np.ndarray) -> List[Explanation]:\n",
+    "    pass"
+   ],
+   "metadata": {
+    "collapsed": false
+   }
+  },
+  {
+   "cell_type": "markdown",
+   "source": [
+    "## 4) Quantitative evaluation with Quantus."
+   ],
+   "metadata": {
+    "collapsed": false
+   }
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "outputs": [],
+   "source": [
+    "# TODO"
+   ],
+   "metadata": {
+    "collapsed": false
+   }
+  },
+  {
+   "cell_type": "markdown",
+   "source": [
+    "## 5) Results visualization."
+   ],
+   "metadata": {
+    "collapsed": false
+   }
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "outputs": [],
+   "source": [],
+   "metadata": {
+    "collapsed": false
+   }
+  }
+ ],
+ "metadata": {
+  "kernelspec": {
+   "display_name": "quantus",
+   "language": "python",
+   "name": "python3"
+  },
+  "language_info": {
+   "codemirror_mode": {
+    "name": "ipython",
+    "version": 3
+   },
+   "file_extension": ".py",
+   "mimetype": "text/x-python",
+   "name": "python",
+   "nbconvert_exporter": "python",
+   "pygments_lexer": "ipython3",
+   "version": "3.9.16"
+  },
+  "vscode": {
+   "interpreter": {
+    "hash": "3e1faee55f3ced5625a3cb76335de31f85cad4aa5905c1a154bea41f61f60e02"
+   }
+  }
+ },
+ "nbformat": 4,
+ "nbformat_minor": 0
+}
Index: tutorials/Tutorial_NLP_Demonstration.ipynb
===================================================================
diff --git a/tutorials/Tutorial_NLP_Demonstration.ipynb b/tutorials/Tutorial_NLP_Demonstration.ipynb
deleted file mode 100644
--- a/tutorials/Tutorial_NLP_Demonstration.ipynb	(revision c2255b793bae21a32b1274275ae60b44cdd94d7b)
+++ /dev/null	(revision c2255b793bae21a32b1274275ae60b44cdd94d7b)
@@ -1,4274 +0,0 @@
-{
- "cells": [
-  {
-   "cell_type": "markdown",
-   "source": [
-    "# Quantus + NLP\n",
-    "[![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/understandable-machine-intelligence-lab/Quantus/main?labpath=tutorials%2FTutorial_NLP_Demonstration.ipynb)\n",
-    "\n",
-    "\n",
-    "This tutorial demonstrates how to use the library for robustness evaluation\n",
-    "explanation of text classification models.\n",
-    "For this purpose, we use a pre-trained `Distilbert` model from [Huggingface](https://huggingface.co/models) and `GLUE/SST2` dataset [here](https://huggingface.co/datasets/sst2).\n",
-    "\n",
-    "This is not a working example yet, and is meant only for demonstration purposes \n",
-    "so far. For this demo, we use a (yet) unreleased version of Quantus.\n",
-    "\n",
-    "Author: Artem Sereda\n",
-    "\n",
-    "[![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/drive/1eWK9ebfMUVRG4mrOAQvXdJ452SMLfffv?usp=sharing)"
-   ],
-   "metadata": {
-    "collapsed": false,
-    "id": "1sXtIxKhnXp9"
-   }
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 7,
-   "outputs": [],
-   "source": [
-    "from __future__ import annotations"
-   ],
-   "metadata": {
-    "collapsed": false
-   }
-  },
-  {
-   "cell_type": "code",
-   "execution_count": null,
-   "outputs": [],
-   "source": [
-    "# Use an unreleased version of Quantus.\n",
-    "!pip install 'quantus @ git+https://github.com/aaarrti/Quantus.git@nlp-domain' --no-deps\n",
-    "!pip install transformers datasets nlpaug tf_explain tensorflow_probability"
-   ],
-   "metadata": {
-    "collapsed": false
-   }
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 2,
-   "outputs": [
-    {
-     "data": {
-      "text/plain": "[PhysicalDevice(name='/physical_device:CPU:0', device_type='CPU'),\n PhysicalDevice(name='/physical_device:GPU:0', device_type='GPU')]"
-     },
-     "execution_count": 2,
-     "metadata": {},
-     "output_type": "execute_result"
-    }
-   ],
-   "source": [
-    "import numpy as np\n",
-    "import pandas as pd\n",
-    "from datasets import load_dataset\n",
-    "import tensorflow as tf\n",
-    "from functools import partial\n",
-    "import logging\n",
-    "from typing import NamedTuple, List, Any\n",
-    "from transformers import (\n",
-    "    AutoTokenizer,\n",
-    "    TFDistilBertForSequenceClassification,\n",
-    "    TFPreTrainedModel,\n",
-    "    PreTrainedTokenizerFast,\n",
-    ")\n",
-    "import quantus.nlp as qn\n",
-    "import matplotlib.pyplot as plt\n",
-    "import tensorflow_probability as tfp\n",
-    "\n",
-    "# Suppress debug logs.\n",
-    "logging.getLogger(\"absl\").setLevel(logging.WARNING)\n",
-    "tf.config.list_physical_devices()"
-   ],
-   "metadata": {
-    "collapsed": false
-   }
-  },
-  {
-   "cell_type": "markdown",
-   "source": [
-    "## 1) Preliminaries"
-   ],
-   "metadata": {
-    "collapsed": false
-   }
-  },
-  {
-   "cell_type": "markdown",
-   "source": [
-    "### 1.1 Load pre-trained model and tokenizer from [huggingface](https://huggingface.co/models) hub"
-   ],
-   "metadata": {
-    "collapsed": false
-   }
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 3,
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "Metal device set to: AMD Radeon Pro 560\n"
-     ]
-    },
-    {
-     "name": "stderr",
-     "output_type": "stream",
-     "text": [
-      "All model checkpoint layers were used when initializing TFDistilBertForSequenceClassification.\n",
-      "\n",
-      "All the layers of TFDistilBertForSequenceClassification were initialized from the model checkpoint at distilbert-base-uncased-finetuned-sst-2-english.\n",
-      "If your task is similar to the task the model of the checkpoint was trained on, you can already use TFDistilBertForSequenceClassification for predictions without further training.\n"
-     ]
-    }
-   ],
-   "source": [
-    "MODEL_NAME = \"distilbert-base-uncased-finetuned-sst-2-english\"\n",
-    "tokenizer = AutoTokenizer.from_pretrained(MODEL_NAME)\n",
-    "model = TFDistilBertForSequenceClassification.from_pretrained(MODEL_NAME)"
-   ],
-   "metadata": {
-    "collapsed": false
-   }
-  },
-  {
-   "cell_type": "markdown",
-   "source": [
-    "### 1.2 Load test split of [GLUE/SST2](https://huggingface.co/datasets/sst2) dataset"
-   ],
-   "metadata": {
-    "collapsed": false
-   }
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 4,
-   "outputs": [
-    {
-     "name": "stderr",
-     "output_type": "stream",
-     "text": [
-      "WARNING:datasets.builder:Found cached dataset sst2 (/Users/artemsereda/.cache/huggingface/datasets/sst2/default/2.0.0/9896208a8d85db057ac50c72282bcb8fe755accc671a57dd8059d4e130961ed5)\n"
-     ]
-    },
-    {
-     "data": {
-      "text/plain": "  0%|          | 0/3 [00:00<?, ?it/s]",
-      "application/vnd.jupyter.widget-view+json": {
-       "version_major": 2,
-       "version_minor": 0,
-       "model_id": "20913dacfa344ee89a9b5a5c6db3264c"
-      },
-      "application/json": {
-       "n": 0,
-       "total": 3,
-       "elapsed": 0.047647953033447266,
-       "ncols": null,
-       "nrows": null,
-       "prefix": "",
-       "ascii": false,
-       "unit": "it",
-       "unit_scale": false,
-       "rate": null,
-       "bar_format": null,
-       "postfix": null,
-       "unit_divisor": 1000,
-       "initial": 0,
-       "colour": null
-      }
-     },
-     "metadata": {},
-     "output_type": "display_data"
-    }
-   ],
-   "source": [
-    "BATCH_SIZE = 8\n",
-    "dataset = load_dataset(\"sst2\")[\"test\"]\n",
-    "x_batch = dataset[\"sentence\"][:BATCH_SIZE]"
-   ],
-   "metadata": {
-    "collapsed": false
-   }
-  },
-  {
-   "cell_type": "markdown",
-   "source": [
-    "Run an example inference, and demonstrate models predictions."
-   ],
-   "metadata": {
-    "collapsed": false
-   }
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 5,
-   "outputs": [
-    {
-     "data": {
-      "text/plain": "                                                   0         1\n0             uneasy mishmash of styles and genres .  negative\n1  this film 's relationship to actual tension is...  negative\n2  by the end of no such thing the audience , lik...  positive\n3  director rob marshall went out gunning to make...  positive\n4  lathan and diggs have considerable personal ch...  positive\n5  a well-made and often lovely depiction of the ...  positive\n6  none of this violates the letter of behan 's b...  negative\n7  although it bangs a very cliched drum at times...  positive",
-      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>0</th>\n      <th>1</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>uneasy mishmash of styles and genres .</td>\n      <td>negative</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>this film 's relationship to actual tension is...</td>\n      <td>negative</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>by the end of no such thing the audience , lik...</td>\n      <td>positive</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>director rob marshall went out gunning to make...</td>\n      <td>positive</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>lathan and diggs have considerable personal ch...</td>\n      <td>positive</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>a well-made and often lovely depiction of the ...</td>\n      <td>positive</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>none of this violates the letter of behan 's b...</td>\n      <td>negative</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>although it bangs a very cliched drum at times...</td>\n      <td>positive</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
-     },
-     "execution_count": 5,
-     "metadata": {},
-     "output_type": "execute_result"
-    }
-   ],
-   "source": [
-    "CLASS_NAMES = [\"negative\", \"positive\"]\n",
-    "\n",
-    "\n",
-    "def decode_labels(y_batch: np.ndarray, class_names: List[str]) -> List[str]:\n",
-    "    \"\"\"A helper function to map integer labels to human-readable class names.\"\"\"\n",
-    "    return [class_names[i] for i in y_batch]\n",
-    "\n",
-    "\n",
-    "# Run tokenizer.\n",
-    "tokens = tokenizer(x_batch, padding=\"longest\", return_tensors=\"tf\")\n",
-    "logits = model(**tokens).logits\n",
-    "y_batch = tf.argmax(tf.nn.softmax(logits), axis=1).numpy()\n",
-    "\n",
-    "# Show the x, y data.\n",
-    "pd.DataFrame([x_batch, decode_labels(y_batch, CLASS_NAMES)]).T"
-   ],
-   "metadata": {
-    "collapsed": false
-   }
-  },
-  {
-   "cell_type": "markdown",
-   "source": [
-    "### 1.3 Helper functions: visualise explanations\n",
-    "\n",
-    "There are not many XAI libraries for NLP out there, so here we fully relly on our own implementations of explanation methods. This section write functions to visualise our explanations."
-   ],
-   "metadata": {
-    "collapsed": false
-   }
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 8,
-   "outputs": [],
-   "source": [
-    "def plot_textual_heatmap(explanations: List[qn.TokenSalience]):\n",
-    "    \"\"\"\n",
-    "    Plots attributions over a batch of text sequence explanations.\n",
-    "\n",
-    "    References:\n",
-    "        - https://stackoverflow.com/questions/74046734/plot-text-saliency-map-in-jupyter-notebook\n",
-    "\n",
-    "    Parameters\n",
-    "    ----------\n",
-    "    explanations: List of Named tuples (tokens, salience) containing batch of explanations.\n",
-    "\n",
-    "    Returns\n",
-    "    -------\n",
-    "    plot: matplotplib.pyplot object, which will be automatically rendered by jupyter.\n",
-    "    \"\"\"\n",
-    "\n",
-    "    h_len = len(explanations)\n",
-    "    v_len = len(explanations[0].tokens)\n",
-    "\n",
-    "    tokens = np.asarray([i.tokens for i in explanations]).reshape(-1)\n",
-    "    colors = np.asarray([i.salience for i in explanations]).reshape(-1)\n",
-    "\n",
-    "    fig, axes = plt.subplots(\n",
-    "        h_len,\n",
-    "        v_len,\n",
-    "        figsize=(v_len, h_len * 0.5),\n",
-    "        gridspec_kw=dict(left=0.0, right=1.0),\n",
-    "    )\n",
-    "    for i, ax in enumerate(axes.ravel()):\n",
-    "        rect = plt.Rectangle((0, 0), 1, 1, color=(1.0, 1 - colors[i], 1 - colors[i]))\n",
-    "        ax.add_patch(rect)\n",
-    "        ax.text(0.5, 0.5, tokens[i], ha=\"center\", va=\"center\")\n",
-    "        ax.set_xlim(0, 1)\n",
-    "        ax.set_ylim(0, 1)\n",
-    "        ax.axis(\"off\")\n",
-    "\n",
-    "        ax = fig.add_axes([0, 0.05, 1, 0.9], fc=[0, 0, 0, 0])\n",
-    "    for axis in [\"left\", \"right\"]:\n",
-    "        ax.spines[axis].set_visible(False)\n",
-    "    ax.set_xticks([])\n",
-    "    ax.set_yticks([])\n",
-    "    return plt"
-   ],
-   "metadata": {
-    "collapsed": false
-   }
-  },
-  {
-   "cell_type": "markdown",
-   "source": [
-    "### 1.4 Helper functions: generate explanations\n",
-    "\n",
-    "Write out functions to generate explanations using baseline methods: Gradient Norm and Integrated Gradients"
-   ],
-   "metadata": {
-    "collapsed": false
-   }
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 9,
-   "outputs": [],
-   "source": [
-    "@tf.function(jit_compile=True)\n",
-    "def normalize(x: tf.Tensor) -> tf.Tensor:\n",
-    "    \"\"\"\n",
-    "    Normalize attribution values to comply with RGB standards.\n",
-    "        - Take absolute values.\n",
-    "        - Scale attribution scores, so that maximum value is 1.\n",
-    "\n",
-    "    Parameters\n",
-    "    ----------\n",
-    "    x: 1D tensor containing attribution scores.\n",
-    "\n",
-    "    Returns\n",
-    "    -------\n",
-    "    x: 1D tensor containing normalized attribution scores.\n",
-    "    \"\"\"\n",
-    "    abs = tf.abs(x)\n",
-    "    max = tf.reduce_max(abs)\n",
-    "    return abs / max\n",
-    "\n",
-    "\n",
-    "def explain_gradient_norm(\n",
-    "    model: TFPreTrainedModel,\n",
-    "    token_ids: tf.Tensor,\n",
-    "    attention_mask: tf.Tensor,\n",
-    "    target: int,\n",
-    "    tokenizer: PreTrainedTokenizerFast,\n",
-    ") -> qn.TokenSalience:\n",
-    "    \"\"\"\n",
-    "    Computes token attribution score using the Gradient Norm method for a single point.\n",
-    "\n",
-    "    Parameters\n",
-    "    ----------\n",
-    "    model:\n",
-    "        Huggingface model, which is subject to explanation.\n",
-    "    token_ids:\n",
-    "        1D Array of token ids.\n",
-    "    attention_mask:\n",
-    "        1D array of attention mask.\n",
-    "    target:\n",
-    "        Predicted label.\n",
-    "    tokenizer:\n",
-    "        Huggingface tokenizer used to convert input_ids back to plain text tokens.\n",
-    "\n",
-    "    Returns\n",
-    "    -------\n",
-    "\n",
-    "    a: quantus.nlp.TokenSalience\n",
-    "        Named tuple (tokens, salience), with tokens and their respective attribution scores.\n",
-    "    \"\"\"\n",
-    "    # Convert tokens to embeddings.\n",
-    "    embeddings = model.distilbert.get_input_embeddings()(input_ids=token_ids)\n",
-    "    with tf.GradientTape() as tape:\n",
-    "        tape.watch(embeddings)\n",
-    "        logits = model(\n",
-    "            None, inputs_embeds=embeddings, attention_mask=attention_mask\n",
-    "        ).logits\n",
-    "        logits_for_label = tf.gather(logits, axis=1, indices=target)\n",
-    "\n",
-    "    # Compute gradients of logits with respect to embeddings.\n",
-    "    grads = tape.gradient(logits_for_label, embeddings)\n",
-    "    # Compute L2 norm of gradients.\n",
-    "    grad_norm = tf.linalg.norm(grads, axis=-1)\n",
-    "    with tf.device(\"cpu\"):\n",
-    "        scores = normalize(grad_norm[0]).numpy()\n",
-    "    return qn.TokenSalience(tokenizer.convert_ids_to_tokens(token_ids), scores)\n",
-    "\n",
-    "\n",
-    "def explain_gradient_norm_batch(\n",
-    "    model: TFPreTrainedModel,\n",
-    "    inputs: List[str],\n",
-    "    targets: np.ndarray,\n",
-    "    tokenizer: PreTrainedTokenizerFast,\n",
-    ") -> List[qn.TokenSalience]:\n",
-    "    \"\"\"\n",
-    "    Computes token attribution score using the Gradient Norm method for batch.\n",
-    "\n",
-    "    Parameters\n",
-    "    ----------\n",
-    "    model:\n",
-    "        Huggingface model, which is subject to explanation.\n",
-    "    inputs:\n",
-    "        List of plain text inputs.\n",
-    "    targets:\n",
-    "        1D array of predicted labels.\n",
-    "    tokenizer:\n",
-    "        Huggingface tokenizer used to convert input_ids back to plain text tokens.\n",
-    "\n",
-    "    Returns\n",
-    "    -------\n",
-    "\n",
-    "    a_batch: List of quantus.nlp.TokenSalience.\n",
-    "        List of named tuples (tokens, salience), with tokens and their respective attribution scores.\n",
-    "    \"\"\"\n",
-    "    \"\"\"A wrapper around explain_gradient_norm which allows calling it on batch\"\"\"\n",
-    "    tokens = tokenizer(inputs, return_tensors=\"tf\", padding=\"longest\")\n",
-    "    batch_size = len(targets)\n",
-    "    return [\n",
-    "        explain_gradient_norm(\n",
-    "            model,\n",
-    "            tokens[\"input_ids\"][i],\n",
-    "            tokens[\"attention_mask\"][i],\n",
-    "            targets[i],\n",
-    "            tokenizer,\n",
-    "        )\n",
-    "        for i in range(batch_size)\n",
-    "    ]\n",
-    "\n",
-    "\n",
-    "@tf.function(jit_compile=True)\n",
-    "def get_interpolated_inputs(\n",
-    "    baseline: tf.Tensor, target: tf.Tensor, num_steps: int\n",
-    ") -> tf.Tensor:\n",
-    "    \"\"\"\n",
-    "    Gets num_step linearly interpolated inputs from baseline to target.\n",
-    "    Reference: https://github.com/PAIR-code/lit/blob/main/lit_nlp/components/gradient_maps.py#L238\n",
-    "\n",
-    "    Returns\n",
-    "    -------\n",
-    "    interpolated_inputs: <float32>[num_steps, num_tokens, emb_size]\n",
-    "    \"\"\"\n",
-    "    baseline = tf.cast(baseline, dtype=tf.float64)\n",
-    "    target = tf.cast(target, dtype=tf.float64)\n",
-    "    delta = target - baseline  # <float32>[num_tokens, emb_size]\n",
-    "    # Creates scale values array of shape [num_steps, num_tokens, emb_dim],\n",
-    "    # where the values in scales[i] are the ith step from np.linspace. <float32>[num_steps, 1, 1]\n",
-    "    scales = tf.linspace(0, 1, num_steps + 1)[:, tf.newaxis, tf.newaxis]\n",
-    "    shape = (num_steps + 1,) + delta.shape\n",
-    "    # <float32>[num_steps, num_tokens, emb_size]\n",
-    "    deltas = scales * tf.broadcast_to(delta, shape)\n",
-    "    interpolated_inputs = baseline + deltas\n",
-    "    return interpolated_inputs\n",
-    "\n",
-    "\n",
-    "def explain_int_grad(\n",
-    "    model: TFPreTrainedModel,\n",
-    "    token_ids: tf.Tensor,\n",
-    "    attention_mask: tf.Tensor,\n",
-    "    target: int,\n",
-    "    tokenizer: PreTrainedTokenizerFast,\n",
-    "    num_steps: int,\n",
-    ") -> qn.TokenSalience:\n",
-    "    \"\"\"\n",
-    "    Computes token attribution score using the Integrated Gradients method for a single point.\n",
-    "\n",
-    "    Parameters\n",
-    "    ----------\n",
-    "    model:\n",
-    "        Huggingface model, which is subject to explanation.\n",
-    "    token_ids:\n",
-    "        1D Array of token ids.\n",
-    "    attention_mask:\n",
-    "        1D array of attention mask.\n",
-    "    target:\n",
-    "        Predicted label.\n",
-    "    tokenizer:\n",
-    "        Huggingface tokenizer used to convert input_ids back to plain text tokens.\n",
-    "\n",
-    "    Returns\n",
-    "    -------\n",
-    "\n",
-    "    a: quantus.nlp.TokenSalience\n",
-    "        Named tuple (tokens, salience), with tokens and their respective attribution scores.\n",
-    "    \"\"\"\n",
-    "    # Convert tokens to embeddings.\n",
-    "    embeddings = model.distilbert.get_input_embeddings()(input_ids=token_ids)[0]\n",
-    "    baseline = tf.zeros_like(embeddings)\n",
-    "    # Generate interpolation from 0 to embeddings.\n",
-    "    with tf.device(\"cpu\"):\n",
-    "        interpolated_embeddings = get_interpolated_inputs(\n",
-    "            baseline, embeddings, num_steps\n",
-    "        )\n",
-    "    interpolated_embeddings = tf.cast(interpolated_embeddings, tf.float32)\n",
-    "    interpolated_attention_mask = tf.stack(\n",
-    "        [attention_mask for i in range(num_steps + 1)]\n",
-    "    )\n",
-    "    with tf.GradientTape() as tape:\n",
-    "        tape.watch(interpolated_embeddings)\n",
-    "        logits = model(\n",
-    "            None,\n",
-    "            inputs_embeds=interpolated_embeddings,\n",
-    "            attention_mask=interpolated_attention_mask,\n",
-    "        ).logits\n",
-    "        logits_for_label = tf.gather(logits, axis=1, indices=target)\n",
-    "\n",
-    "    # Compute gradients of logits with respect to interpolations.\n",
-    "    grads = tape.gradient(logits_for_label, interpolated_embeddings)\n",
-    "    # Integrate gradients.\n",
-    "    int_grad = tfp.math.trapz(tfp.math.trapz(grads, axis=0))\n",
-    "    with tf.device(\"cpu\"):\n",
-    "        scores = normalize(int_grad).numpy()\n",
-    "    return qn.TokenSalience(tokenizer.convert_ids_to_tokens(token_ids), scores)\n",
-    "\n",
-    "\n",
-    "def explain_int_grad_batch(\n",
-    "    model: TFPreTrainedModel,\n",
-    "    inputs: List[str],\n",
-    "    targets: np.ndarray,\n",
-    "    tokenizer: PreTrainedTokenizerFast,\n",
-    "    num_steps: int = 10,\n",
-    ") -> List[qn.TokenSalience]:\n",
-    "    \"\"\"\n",
-    "    Computes token attribution score using the Integrated Gradients method for batch.\n",
-    "\n",
-    "    Parameters\n",
-    "    ----------\n",
-    "    model:\n",
-    "        Huggingface model, which is subject to explanation.\n",
-    "    inputs:\n",
-    "        List of plain text inputs.\n",
-    "    targets:\n",
-    "        1D array of predicted labels.\n",
-    "    tokenizer:\n",
-    "        Huggingface tokenizer used to convert input_ids back to plain text tokens.\n",
-    "\n",
-    "    num_steps: int.\n",
-    "        Number of interpolations steps, default=10.\n",
-    "\n",
-    "    Returns\n",
-    "    -------\n",
-    "    a_batch: List of quantus.nlp.TokenSalience.\n",
-    "        List of named tuples (tokens, salience), with tokens and their respective attribution scores.\n",
-    "    \"\"\"\n",
-    "    tokens = tokenizer(inputs, return_tensors=\"tf\", padding=\"longest\")\n",
-    "    batch_size = len(targets)\n",
-    "    return [\n",
-    "        explain_int_grad(\n",
-    "            model,\n",
-    "            tokens[\"input_ids\"][i],\n",
-    "            tokens[\"attention_mask\"][i],\n",
-    "            targets[i],\n",
-    "            tokenizer,\n",
-    "            num_steps,\n",
-    "        )\n",
-    "        for i in range(batch_size)\n",
-    "    ]\n",
-    "\n",
-    "\n",
-    "# Create functions which match the signature required by Quantus.\n",
-    "explain_gradient_norm_func = partial(explain_gradient_norm_batch, tokenizer=tokenizer)\n",
-    "explain_int_grad_func = partial(explain_int_grad_batch, tokenizer=tokenizer)"
-   ],
-   "metadata": {
-    "collapsed": false
-   }
-  },
-  {
-   "cell_type": "markdown",
-   "source": [
-    "### 1.5 Visualise the explanations."
-   ],
-   "metadata": {
-    "id": "Bo1yUcCh_zBD"
-   }
-  },
-  {
-   "cell_type": "code",
-   "source": [
-    "# Visualise GradNorm.\n",
-    "a_batch_grad_norm = explain_gradient_norm_func(model, x_batch[2:5], y_batch[2:5])\n",
-    "plot_textual_heatmap(a_batch_grad_norm)"
-   ],
-   "metadata": {
-    "colab": {
-     "base_uri": "https://localhost:8080/",
-     "height": 187
-    },
-    "id": "jNogPZU8ShAr",
-    "outputId": "25608dfc-5f87-4571-b8a8-909ab6de5a3f"
-   },
-   "execution_count": 11,
-   "outputs": [
-    {
-     "name": "stderr",
-     "output_type": "stream",
-     "text": [
-      "/var/folders/vv/f22t8y7d1l96ynv9mzgy0j5w0000gn/T/ipykernel_28733/2299850630.py:33: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.\n",
-      "  ax = fig.add_axes([0, 0.05, 1 , 0.9], fc=[0, 0, 0, 0])\n"
-     ]
-    },
-    {
-     "data": {
-      "text/plain": "<module 'matplotlib.pyplot' from '/Users/artemsereda/anaconda3/envs/quantus/lib/python3.9/site-packages/matplotlib/pyplot.py'>"
-     },
-     "execution_count": 11,
-     "metadata": {},
-     "output_type": "execute_result"
-    },
-    {
-     "data": {
-      "text/plain": "<Figure size 2400x150 with 73 Axes>",
-      "image/png": "\n"
-     },
-     "metadata": {},
-     "output_type": "display_data"
-    }
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 12,
-   "outputs": [
-    {
-     "name": "stderr",
-     "output_type": "stream",
-     "text": [
-      "/var/folders/vv/f22t8y7d1l96ynv9mzgy0j5w0000gn/T/ipykernel_28733/2299850630.py:33: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.\n",
-      "  ax = fig.add_axes([0, 0.05, 1 , 0.9], fc=[0, 0, 0, 0])\n"
-     ]
-    },
-    {
-     "data": {
-      "text/plain": "<module 'matplotlib.pyplot' from '/Users/artemsereda/anaconda3/envs/quantus/lib/python3.9/site-packages/matplotlib/pyplot.py'>"
-     },
-     "execution_count": 12,
-     "metadata": {},
-     "output_type": "execute_result"
-    },
-    {
-     "data": {
-      "text/plain": "<Figure size 2400x150 with 73 Axes>",
-      "image/png": "\n"
-     },
-     "metadata": {},
-     "output_type": "display_data"
-    }
-   ],
-   "source": [
-    "# Visualise Integrated Gradients explanations.\n",
-    "a_batch_int_grad = explain_int_grad_func(model, x_batch[2:5], y_batch[2:5])\n",
-    "plot_textual_heatmap(a_batch_int_grad)"
-   ],
-   "metadata": {
-    "colab": {
-     "base_uri": "https://localhost:8080/",
-     "height": 187
-    },
-    "id": "MqR9AJsPnXqJ",
-    "outputId": "2a1d268c-da94-4840-eec8-040184db7f82"
-   }
-  },
-  {
-   "cell_type": "markdown",
-   "source": [
-    "## 2) Quantitative analysis using Quantus\n",
-    "For this example, we compute [Sensitivity](https://arxiv.org/abs/1901.09392) metric"
-   ],
-   "metadata": {
-    "collapsed": false,
-    "id": "3JPS2S-MnXqJ"
-   }
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 13,
-   "outputs": [],
-   "source": [
-    "# This is only a workaround to account for hardcoded attribute access in lib.\n",
-    "class ModelTuple(NamedTuple):\n",
-    "    model: Any\n",
-    "    tokenizer: Any\n",
-    "\n",
-    "\n",
-    "# This is also only a workaround to account for hardcoded attribute access in lib.\n",
-    "model_stub = ModelTuple(model, tokenizer)\n",
-    "model_stub.model.bert = model.distilbert\n",
-    "model_stub.model.bert.embeddings.word_embeddings = model.distilbert.embeddings.weight"
-   ],
-   "metadata": {
-    "id": "-l0yasspnXqJ"
-   }
-  },
-  {
-   "cell_type": "markdown",
-   "source": [
-    "Average Sensitivity captures the average change in explanations under slight perturbation"
-   ],
-   "metadata": {
-    "collapsed": false,
-    "id": "_4bfX_ITnXqK"
-   }
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 15,
-   "outputs": [
-    {
-     "data": {
-      "text/plain": "Collecting perturbations:   0%|          | 0/10 [00:00<?, ?it/s]",
-      "application/vnd.jupyter.widget-view+json": {
-       "version_major": 2,
-       "version_minor": 0,
-       "model_id": "7a414e67e4f94ac3a6f53c33bc60b337"
-      },
-      "application/json": {
-       "n": 0,
-       "total": 10,
-       "elapsed": 0.02758502960205078,
-       "ncols": null,
-       "nrows": null,
-       "prefix": "Collecting perturbations",
-       "ascii": false,
-       "unit": "it",
-       "unit_scale": false,
-       "rate": null,
-       "bar_format": null,
-       "postfix": null,
-       "unit_divisor": 1000,
-       "initial": 0,
-       "colour": null
-      }
-     },
-     "metadata": {},
-     "output_type": "display_data"
-    },
-    {
-     "data": {
-      "text/plain": "Collecting explanations:   0%|          | 0/9 [00:00<?, ?it/s]",
-      "application/vnd.jupyter.widget-view+json": {
-       "version_major": 2,
-       "version_minor": 0,
-       "model_id": "be87bcd458e942249730cacb59d306f0"
-      },
-      "application/json": {
-       "n": 0,
-       "total": 9,
-       "elapsed": 0.01702404022216797,
-       "ncols": null,
-       "nrows": null,
-       "prefix": "Collecting explanations",
-       "ascii": false,
-       "unit": "it",
-       "unit_scale": false,
-       "rate": null,
-       "bar_format": null,
-       "postfix": null,
-       "unit_divisor": 1000,
-       "initial": 0,
-       "colour": null
-      }
-     },
-     "metadata": {},
-     "output_type": "display_data"
-    },
-    {
-     "data": {
-      "text/plain": "Collecting perturbations:   0%|          | 0/10 [00:00<?, ?it/s]",
-      "application/vnd.jupyter.widget-view+json": {
-       "version_major": 2,
-       "version_minor": 0,
-       "model_id": "6045624e6a9440f6bf3f7d819f5e9223"
-      },
-      "application/json": {
-       "n": 0,
-       "total": 10,
-       "elapsed": 0.021217823028564453,
-       "ncols": null,
-       "nrows": null,
-       "prefix": "Collecting perturbations",
-       "ascii": false,
-       "unit": "it",
-       "unit_scale": false,
-       "rate": null,
-       "bar_format": null,
-       "postfix": null,
-       "unit_divisor": 1000,
-       "initial": 0,
-       "colour": null
-      }
-     },
-     "metadata": {},
-     "output_type": "display_data"
-    },
-    {
-     "data": {
-      "text/plain": "Collecting explanations:   0%|          | 0/9 [00:00<?, ?it/s]",
-      "application/vnd.jupyter.widget-view+json": {
-       "version_major": 2,
-       "version_minor": 0,
-       "model_id": "af3a1229661b4baea2af49f4793aab41"
-      },
-      "application/json": {
-       "n": 0,
-       "total": 9,
-       "elapsed": 0.015310049057006836,
-       "ncols": null,
-       "nrows": null,
-       "prefix": "Collecting explanations",
-       "ascii": false,
-       "unit": "it",
-       "unit_scale": false,
-       "rate": null,
-       "bar_format": null,
-       "postfix": null,
-       "unit_divisor": 1000,
-       "initial": 0,
-       "colour": null
-      }
-     },
-     "metadata": {},
-     "output_type": "display_data"
-    }
-   ],
-   "source": [
-    "# Instantiate metric.\n",
-    "avg_sensitivity = qn.AvgSensitivity()\n",
-    "\n",
-    "# Evaluate avg sensitivity for Gradient Norm.\n",
-    "avg_sensitivity_grad_norm = avg_sensitivity(\n",
-    "    model=model_stub,\n",
-    "    x_batch=x_batch,\n",
-    "    y_batch=y_batch,\n",
-    "    perturb_func=qn.change_spelling,\n",
-    "    explain_func=explain_gradient_norm_func,\n",
-    ").mean()\n",
-    "\n",
-    "# Evaluate avg sensitivity for Integrated Gradients.\n",
-    "avg_sensitivity_int_grad = avg_sensitivity(\n",
-    "    model=model_stub,\n",
-    "    x_batch=x_batch,\n",
-    "    y_batch=y_batch,\n",
-    "    perturb_func=qn.change_spelling,\n",
-    "    explain_func=explain_int_grad_func,\n",
-    ").mean()"
-   ],
-   "metadata": {
-    "colab": {
-     "base_uri": "https://localhost:8080/",
-     "height": 145,
-     "referenced_widgets": [
-      "f539d91e10aa4216bc852be8897904fc",
-      "95e17670f76240a891da5b1218b2ae09",
-      "d259c5044a534fe997234f847e2dfaf6",
-      "27328026e1ec4e49a6c86b272ba55750",
-      "e711f79c92a4454e8b5b64be6db28052",
-      "3c6ca2fb0d1b43bb8bf26c0f3c476242",
-      "b5190d5a072b419a9efc8e4d8a9090d8",
-      "5fdf523b124c436f84a7f2fe35084bd1",
-      "c10116d3eb5848229d9dddba6610bad3",
-      "dbc7623dda6f4270973256ca86801288",
-      "5d2fbbed3de34662aeab561982508f92",
-      "3c9f57b3a3a64428b6bdc1e4e590ecde",
-      "48842ecc9e3a4396b683a23c49f8c7eb",
-      "ce6da216a9e84cb389f64fa027e1f49c",
-      "a70c715350e44a2e8f1e2b49aca89527",
-      "402bb9d95e1447f8810f729f48cb134a",
-      "e944ae244de142268b5cbc6b06c847bc",
-      "162e58f3801340fc99b297a365895321",
-      "92eae6b08b174832b9aa2f7a603eaf81",
-      "a970f5a7cccc44b9b693b90f5e47a255",
-      "9da0ef1957344bd4ba22c6e5c0755dad",
-      "b150db7ffa024c0e8525b804c86f4599",
-      "103fbd2c1b0243558f7dcec60993cee4",
-      "9e300b052b084d979ddc125cc6dd1467",
-      "e62c917b449e4917968db34c41bb052f",
-      "3608352acb4a4e35b7f1f86d7fe68440",
-      "1729d9fd508344d0bb3b94b2477e33ec",
-      "f513bda9bc6d4b4bbe63a094aff7aa58",
-      "5fa49e5530c842b7953e00ade3045c92",
-      "b2516bc3259a41d2926a47223f213fe5",
-      "d4deb0be86d1471fb2c230b664bb26ec",
-      "01af026a8db8434e9ae9eeaa06599420",
-      "19a92baa764348ecbccc63589feb2a3a",
-      "085a46ae240449fe81b49198a82b3d24",
-      "1b4416f783ae4e7e89199b17e7f4ce7c",
-      "e54bc025c8e44b2abeffd71ffa89db0e",
-      "41940b33cd8b4e86b821e1fdba069ff9",
-      "1850b3d7d7a7401480db9384615309af",
-      "9d1ed4939590418e91328cd88e91c672",
-      "5cfec1477c2f46cab2ebc6bc1ef27eeb",
-      "f36af1ab4cf44bf4b3bda2f4059da84b",
-      "bbc5507bf0984c07ba33ce163d50dd79",
-      "ebd768308645435b921396ff11d64005",
-      "9e770e0c0702446380c0647dcf2458a5"
-     ]
-    },
-    "id": "tk58amDynXqK",
-    "outputId": "7d83ce50-fb6e-473d-8a84-28e84198e1de"
-   }
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 16,
-   "outputs": [
-    {
-     "data": {
-      "text/plain": "Collecting perturbations:   0%|          | 0/10 [00:00<?, ?it/s]",
-      "application/vnd.jupyter.widget-view+json": {
-       "version_major": 2,
-       "version_minor": 0,
-       "model_id": "6c2e406cd06846d8a4d09a1478e54b91"
-      },
-      "application/json": {
-       "n": 0,
-       "total": 10,
-       "elapsed": 0.028053998947143555,
-       "ncols": null,
-       "nrows": null,
-       "prefix": "Collecting perturbations",
-       "ascii": false,
-       "unit": "it",
-       "unit_scale": false,
-       "rate": null,
-       "bar_format": null,
-       "postfix": null,
-       "unit_divisor": 1000,
-       "initial": 0,
-       "colour": null
-      }
-     },
-     "metadata": {},
-     "output_type": "display_data"
-    },
-    {
-     "data": {
-      "text/plain": "Collecting explanations:   0%|          | 0/9 [00:00<?, ?it/s]",
-      "application/vnd.jupyter.widget-view+json": {
-       "version_major": 2,
-       "version_minor": 0,
-       "model_id": "ff1e2b6f56b14d15b49423e9b63f1ac6"
-      },
-      "application/json": {
-       "n": 0,
-       "total": 9,
-       "elapsed": 0.017345190048217773,
-       "ncols": null,
-       "nrows": null,
-       "prefix": "Collecting explanations",
-       "ascii": false,
-       "unit": "it",
-       "unit_scale": false,
-       "rate": null,
-       "bar_format": null,
-       "postfix": null,
-       "unit_divisor": 1000,
-       "initial": 0,
-       "colour": null
-      }
-     },
-     "metadata": {},
-     "output_type": "display_data"
-    },
-    {
-     "data": {
-      "text/plain": "Collecting perturbations:   0%|          | 0/10 [00:00<?, ?it/s]",
-      "application/vnd.jupyter.widget-view+json": {
-       "version_major": 2,
-       "version_minor": 0,
-       "model_id": "4618e1174a884100955a01c126749bec"
-      },
-      "application/json": {
-       "n": 0,
-       "total": 10,
-       "elapsed": 0.015853166580200195,
-       "ncols": null,
-       "nrows": null,
-       "prefix": "Collecting perturbations",
-       "ascii": false,
-       "unit": "it",
-       "unit_scale": false,
-       "rate": null,
-       "bar_format": null,
-       "postfix": null,
-       "unit_divisor": 1000,
-       "initial": 0,
-       "colour": null
-      }
-     },
-     "metadata": {},
-     "output_type": "display_data"
-    },
-    {
-     "data": {
-      "text/plain": "Collecting explanations:   0%|          | 0/10 [00:00<?, ?it/s]",
-      "application/vnd.jupyter.widget-view+json": {
-       "version_major": 2,
-       "version_minor": 0,
-       "model_id": "f0eff83f3864415ba51d6de89690e494"
-      },
-      "application/json": {
-       "n": 0,
-       "total": 10,
-       "elapsed": 0.030935049057006836,
-       "ncols": null,
-       "nrows": null,
-       "prefix": "Collecting explanations",
-       "ascii": false,
-       "unit": "it",
-       "unit_scale": false,
-       "rate": null,
-       "bar_format": null,
-       "postfix": null,
-       "unit_divisor": 1000,
-       "initial": 0,
-       "colour": null
-      }
-     },
-     "metadata": {},
-     "output_type": "display_data"
-    }
-   ],
-   "source": [
-    "# Instantiate metric.\n",
-    "max_sensitivity = qn.MaxSensitivity()\n",
-    "\n",
-    "# Evaluate max sensitivity metric for Gradient Norm.\n",
-    "max_sensitivity_grad_norm = max_sensitivity(\n",
-    "    model=model_stub,\n",
-    "    x_batch=x_batch,\n",
-    "    y_batch=y_batch,\n",
-    "    perturb_func=qn.change_spelling,\n",
-    "    explain_func=explain_gradient_norm_func,\n",
-    ").mean()\n",
-    "\n",
-    "# Evaluate max sensitivity metric for Integrated Gradients.\n",
-    "max_sensitivity_int_grad = max_sensitivity(\n",
-    "    model=model_stub,\n",
-    "    x_batch=x_batch,\n",
-    "    y_batch=y_batch,\n",
-    "    perturb_func=qn.change_spelling,\n",
-    "    explain_func=explain_int_grad_func,\n",
-    ").mean()"
-   ],
-   "metadata": {
-    "colab": {
-     "base_uri": "https://localhost:8080/",
-     "height": 145,
-     "referenced_widgets": [
-      "4c611b3b81574076954a0c511b8235fc",
-      "853325f35c57491192f09f879efbd544",
-      "45aa94cf21174a00b62b64bea6aead78",
-      "fcdf278a18854f91a43038974ed1e889",
-      "9030788e3fca4a1593814b2513a8a72b",
-      "40c89ee3fd1a44bc862269e796735caa",
-      "10e538cd196347cd8ca19d063a1c9f54",
-      "ca0f19c3717448f39ededbaa80cda438",
-      "aa2ba3006de2405bb436266aab9a9078",
-      "003944c19322432f8fbffe4a95bb5a3d",
-      "e6dd9deda3954d80b142479e38bf3038",
-      "1926e91fc75243f79ae5876479ad28f9",
-      "8cdb7c0249424c25aec755bcb3f5f817",
-      "d8d15329978c432b9542b00518fb6091",
-      "c4dc3aafedcf421a8104cfbc346ff63c",
-      "b2ddc8ca76584d0dbcdb8695cde9bda4",
-      "300ae80e21384502b96438404812e42d",
-      "882d8598f9514fc3ad4198c3056e5894",
-      "54e79e8c93114ab5bd86552175596997",
-      "aec26073910f448f972a23ed85a1c715",
-      "2827b86158c54ac3a8c58cb64ffb294a",
-      "8e3622d839a74245aaf4ef67856c35a5",
-      "1e9e1569314341338a6067afd7ac91ed",
-      "9036582bde6b458e8b480d01b79e5698",
-      "0b8c5c5ef635404e9a4f62215357a6b0",
-      "ec519180813449e7829b106f5924b06f",
-      "bda5020fb43347e381bfca3dc6efcfd4",
-      "0f69d704bc68421fa9f2fa7e408c3a55",
-      "0c419d27bcdf430f924fc77136369a06",
-      "2517cb5f22644bc1b101c0b5f4d77da8",
-      "0a615f111c064d96a2cd880a4872fad6",
-      "fb7f07b1d4054ff197e3baf38d316c00",
-      "cf73c69dbf3f41aa8d9f38f99c28a476",
-      "5db7ddbc5f1d4ca5b1c13ed16c8f95bc",
-      "be2e7c506bf04a6aa9103643641528f5",
-      "d917ddc2b06e4db9a2e30e9eb5fcc000",
-      "35b575db01ad4806b2de96f7d799d287",
-      "6721e9c247f4419c9b13dc9cc4f66a33",
-      "729e719cfca54c0f8f3a2b948882e965",
-      "15183e2ad7b54490ab07239ff4997d2d",
-      "10258155181245e581447f690cc4011f",
-      "dad6ae5be0464735a35bc4a46f6519e2",
-      "248388c2722648fcb487b528b6dae8d7",
-      "9233dfe5b46b411d95d4bc58e5649e9e"
-     ]
-    },
-    "id": "5DUqxF-GnXqL",
-    "outputId": "e465ff0e-d8c3-483a-cfdd-8a5fc8465ee4"
-   }
-  },
-  {
-   "cell_type": "markdown",
-   "source": [
-    "Maximum Sensitivity captures the maximal change in explanations under slight perturbation"
-   ],
-   "metadata": {
-    "collapsed": false
-   }
-  },
-  {
-   "cell_type": "markdown",
-   "source": [
-    "Display results in tabular form"
-   ],
-   "metadata": {
-    "collapsed": false,
-    "id": "4_I1JIQgnXqL"
-   }
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 17,
-   "outputs": [
-    {
-     "data": {
-      "text/plain": "                     Gradient Norm  Integrated Gradients\nAverage Sensitivity       0.126966              0.236630\nMax Sensitivity           0.259777              0.190411",
-      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Gradient Norm</th>\n      <th>Integrated Gradients</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Average Sensitivity</th>\n      <td>0.126966</td>\n      <td>0.236630</td>\n    </tr>\n    <tr>\n      <th>Max Sensitivity</th>\n      <td>0.259777</td>\n      <td>0.190411</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
-     },
-     "execution_count": 17,
-     "metadata": {},
-     "output_type": "execute_result"
-    }
-   ],
-   "source": [
-    "# Reformat the results.\n",
-    "all_results = np.asarray(\n",
-    "    [\n",
-    "        [avg_sensitivity_grad_norm, avg_sensitivity_int_grad],\n",
-    "        [max_sensitivity_grad_norm, max_sensitivity_int_grad],\n",
-    "    ]\n",
-    ")\n",
-    "\n",
-    "# Print out the evaluation outcome!\n",
-    "pd.DataFrame(\n",
-    "    all_results,\n",
-    "    columns=[\"Gradient Norm\", \"Integrated Gradients\"],\n",
-    "    index=[\"Average Sensitivity\", \"Max Sensitivity\"],\n",
-    ")"
-   ],
-   "metadata": {
-    "colab": {
-     "base_uri": "https://localhost:8080/",
-     "height": 112
-    },
-    "id": "NzkJreuNnXqM",
-    "outputId": "960d19b6-974d-43b2-cc4b-cf4625bade06"
-   }
-  },
-  {
-   "cell_type": "code",
-   "execution_count": null,
-   "outputs": [],
-   "source": [],
-   "metadata": {
-    "id": "fbOyZRAfnXqM"
-   }
-  }
- ],
- "metadata": {
-  "kernelspec": {
-   "display_name": "Python 3 (ipykernel)",
-   "language": "python",
-   "name": "python3"
-  },
-  "language_info": {
-   "codemirror_mode": {
-    "name": "ipython",
-    "version": 3
-   },
-   "file_extension": ".py",
-   "mimetype": "text/x-python",
-   "name": "python",
-   "nbconvert_exporter": "python",
-   "pygments_lexer": "ipython3",
-   "version": "3.7.13"
-  },
-  "colab": {
-   "provenance": [],
-   "collapsed_sections": []
-  },
-  "accelerator": "GPU",
-  "widgets": {
-   "application/vnd.jupyter.widget-state+json": {
-    "e8ba301d2b0641509ddea11effc55df4": {
-     "model_module": "@jupyter-widgets/controls",
-     "model_name": "HBoxModel",
-     "model_module_version": "1.5.0",
-     "state": {
-      "_dom_classes": [],
-      "_model_module": "@jupyter-widgets/controls",
-      "_model_module_version": "1.5.0",
-      "_model_name": "HBoxModel",
-      "_view_count": null,
-      "_view_module": "@jupyter-widgets/controls",
-      "_view_module_version": "1.5.0",
-      "_view_name": "HBoxView",
-      "box_style": "",
-      "children": [
-       "IPY_MODEL_5dfd67eee5584fd7ba54da2cc67d4d2d",
-       "IPY_MODEL_5c250c426c334b86987b6846a7dfcc2a",
-       "IPY_MODEL_eed4caada42340a1a974572cc51e6890"
-      ],
-      "layout": "IPY_MODEL_227ce5ea7ff7467fab0e9dadc6b12cd3"
-     }
-    },
-    "5dfd67eee5584fd7ba54da2cc67d4d2d": {
-     "model_module": "@jupyter-widgets/controls",
-     "model_name": "HTMLModel",
-     "model_module_version": "1.5.0",
-     "state": {
-      "_dom_classes": [],
-      "_model_module": "@jupyter-widgets/controls",
-      "_model_module_version": "1.5.0",
-      "_model_name": "HTMLModel",
-      "_view_count": null,
-      "_view_module": "@jupyter-widgets/controls",
-      "_view_module_version": "1.5.0",
-      "_view_name": "HTMLView",
-      "description": "",
-      "description_tooltip": null,
-      "layout": "IPY_MODEL_5cba9c8b08ce48629283d17b558b34b3",
-      "placeholder": "​",
-      "style": "IPY_MODEL_bcc11d55ed534626bcb7159103d240a1",
-      "value": "100%"
-     }
-    },
-    "5c250c426c334b86987b6846a7dfcc2a": {
-     "model_module": "@jupyter-widgets/controls",
-     "model_name": "FloatProgressModel",
-     "model_module_version": "1.5.0",
-     "state": {
-      "_dom_classes": [],
-      "_model_module": "@jupyter-widgets/controls",
-      "_model_module_version": "1.5.0",
-      "_model_name": "FloatProgressModel",
-      "_view_count": null,
-      "_view_module": "@jupyter-widgets/controls",
-      "_view_module_version": "1.5.0",
-      "_view_name": "ProgressView",
-      "bar_style": "success",
-      "description": "",
-      "description_tooltip": null,
-      "layout": "IPY_MODEL_a9cba86f3b4341b982d426e9b7bef680",
-      "max": 3,
-      "min": 0,
-      "orientation": "horizontal",
-      "style": "IPY_MODEL_a71b701a522348069be3fe8ae31db7d0",
-      "value": 3
-     }
-    },
-    "eed4caada42340a1a974572cc51e6890": {
-     "model_module": "@jupyter-widgets/controls",
-     "model_name": "HTMLModel",
-     "model_module_version": "1.5.0",
-     "state": {
-      "_dom_classes": [],
-      "_model_module": "@jupyter-widgets/controls",
-      "_model_module_version": "1.5.0",
-      "_model_name": "HTMLModel",
-      "_view_count": null,
-      "_view_module": "@jupyter-widgets/controls",
-      "_view_module_version": "1.5.0",
-      "_view_name": "HTMLView",
-      "description": "",
-      "description_tooltip": null,
-      "layout": "IPY_MODEL_1cf1aebb3abc4e7e87f79a7a9034d5b3",
-      "placeholder": "​",
-      "style": "IPY_MODEL_2add5d190198404aa6428c3975b87547",
-      "value": " 3/3 [00:00&lt;00:00, 61.05it/s]"
-     }
-    },
-    "227ce5ea7ff7467fab0e9dadc6b12cd3": {
-     "model_module": "@jupyter-widgets/base",
-     "model_name": "LayoutModel",
-     "model_module_version": "1.2.0",
-     "state": {
-      "_model_module": "@jupyter-widgets/base",
-      "_model_module_version": "1.2.0",
-      "_model_name": "LayoutModel",
-      "_view_count": null,
-      "_view_module": "@jupyter-widgets/base",
-      "_view_module_version": "1.2.0",
-      "_view_name": "LayoutView",
-      "align_content": null,
-      "align_items": null,
-      "align_self": null,
-      "border": null,
-      "bottom": null,
-      "display": null,
-      "flex": null,
-      "flex_flow": null,
-      "grid_area": null,
-      "grid_auto_columns": null,
-      "grid_auto_flow": null,
-      "grid_auto_rows": null,
-      "grid_column": null,
-      "grid_gap": null,
-      "grid_row": null,
-      "grid_template_areas": null,
-      "grid_template_columns": null,
-      "grid_template_rows": null,
-      "height": null,
-      "justify_content": null,
-      "justify_items": null,
-      "left": null,
-      "margin": null,
-      "max_height": null,
-      "max_width": null,
-      "min_height": null,
-      "min_width": null,
-      "object_fit": null,
-      "object_position": null,
-      "order": null,
-      "overflow": null,
-      "overflow_x": null,
-      "overflow_y": null,
-      "padding": null,
-      "right": null,
-      "top": null,
-      "visibility": null,
-      "width": null
-     }
-    },
-    "5cba9c8b08ce48629283d17b558b34b3": {
-     "model_module": "@jupyter-widgets/base",
-     "model_name": "LayoutModel",
-     "model_module_version": "1.2.0",
-     "state": {
-      "_model_module": "@jupyter-widgets/base",
-      "_model_module_version": "1.2.0",
-      "_model_name": "LayoutModel",
-      "_view_count": null,
-      "_view_module": "@jupyter-widgets/base",
-      "_view_module_version": "1.2.0",
-      "_view_name": "LayoutView",
-      "align_content": null,
-      "align_items": null,
-      "align_self": null,
-      "border": null,
-      "bottom": null,
-      "display": null,
-      "flex": null,
-      "flex_flow": null,
-      "grid_area": null,
-      "grid_auto_columns": null,
-      "grid_auto_flow": null,
-      "grid_auto_rows": null,
-      "grid_column": null,
-      "grid_gap": null,
-      "grid_row": null,
-      "grid_template_areas": null,
-      "grid_template_columns": null,
-      "grid_template_rows": null,
-      "height": null,
-      "justify_content": null,
-      "justify_items": null,
-      "left": null,
-      "margin": null,
-      "max_height": null,
-      "max_width": null,
-      "min_height": null,
-      "min_width": null,
-      "object_fit": null,
-      "object_position": null,
-      "order": null,
-      "overflow": null,
-      "overflow_x": null,
-      "overflow_y": null,
-      "padding": null,
-      "right": null,
-      "top": null,
-      "visibility": null,
-      "width": null
-     }
-    },
-    "bcc11d55ed534626bcb7159103d240a1": {
-     "model_module": "@jupyter-widgets/controls",
-     "model_name": "DescriptionStyleModel",
-     "model_module_version": "1.5.0",
-     "state": {
-      "_model_module": "@jupyter-widgets/controls",
-      "_model_module_version": "1.5.0",
-      "_model_name": "DescriptionStyleModel",
-      "_view_count": null,
-      "_view_module": "@jupyter-widgets/base",
-      "_view_module_version": "1.2.0",
-      "_view_name": "StyleView",
-      "description_width": ""
-     }
-    },
-    "a9cba86f3b4341b982d426e9b7bef680": {
-     "model_module": "@jupyter-widgets/base",
-     "model_name": "LayoutModel",
-     "model_module_version": "1.2.0",
-     "state": {
-      "_model_module": "@jupyter-widgets/base",
-      "_model_module_version": "1.2.0",
-      "_model_name": "LayoutModel",
-      "_view_count": null,
-      "_view_module": "@jupyter-widgets/base",
-      "_view_module_version": "1.2.0",
-      "_view_name": "LayoutView",
-      "align_content": null,
-      "align_items": null,
-      "align_self": null,
-      "border": null,
-      "bottom": null,
-      "display": null,
-      "flex": null,
-      "flex_flow": null,
-      "grid_area": null,
-      "grid_auto_columns": null,
-      "grid_auto_flow": null,
-      "grid_auto_rows": null,
-      "grid_column": null,
-      "grid_gap": null,
-      "grid_row": null,
-      "grid_template_areas": null,
-      "grid_template_columns": null,
-      "grid_template_rows": null,
-      "height": null,
-      "justify_content": null,
-      "justify_items": null,
-      "left": null,
-      "margin": null,
-      "max_height": null,
-      "max_width": null,
-      "min_height": null,
-      "min_width": null,
-      "object_fit": null,
-      "object_position": null,
-      "order": null,
-      "overflow": null,
-      "overflow_x": null,
-      "overflow_y": null,
-      "padding": null,
-      "right": null,
-      "top": null,
-      "visibility": null,
-      "width": null
-     }
-    },
-    "a71b701a522348069be3fe8ae31db7d0": {
-     "model_module": "@jupyter-widgets/controls",
-     "model_name": "ProgressStyleModel",
-     "model_module_version": "1.5.0",
-     "state": {
-      "_model_module": "@jupyter-widgets/controls",
-      "_model_module_version": "1.5.0",
-      "_model_name": "ProgressStyleModel",
-      "_view_count": null,
-      "_view_module": "@jupyter-widgets/base",
-      "_view_module_version": "1.2.0",
-      "_view_name": "StyleView",
-      "bar_color": null,
-      "description_width": ""
-     }
-    },
-    "1cf1aebb3abc4e7e87f79a7a9034d5b3": {
-     "model_module": "@jupyter-widgets/base",
-     "model_name": "LayoutModel",
-     "model_module_version": "1.2.0",
-     "state": {
-      "_model_module": "@jupyter-widgets/base",
-      "_model_module_version": "1.2.0",
-      "_model_name": "LayoutModel",
-      "_view_count": null,
-      "_view_module": "@jupyter-widgets/base",
-      "_view_module_version": "1.2.0",
-      "_view_name": "LayoutView",
-      "align_content": null,
-      "align_items": null,
-      "align_self": null,
-      "border": null,
-      "bottom": null,
-      "display": null,
-      "flex": null,
-      "flex_flow": null,
-      "grid_area": null,
-      "grid_auto_columns": null,
-      "grid_auto_flow": null,
-      "grid_auto_rows": null,
-      "grid_column": null,
-      "grid_gap": null,
-      "grid_row": null,
-      "grid_template_areas": null,
-      "grid_template_columns": null,
-      "grid_template_rows": null,
-      "height": null,
-      "justify_content": null,
-      "justify_items": null,
-      "left": null,
-      "margin": null,
-      "max_height": null,
-      "max_width": null,
-      "min_height": null,
-      "min_width": null,
-      "object_fit": null,
-      "object_position": null,
-      "order": null,
-      "overflow": null,
-      "overflow_x": null,
-      "overflow_y": null,
-      "padding": null,
-      "right": null,
-      "top": null,
-      "visibility": null,
-      "width": null
-     }
-    },
-    "2add5d190198404aa6428c3975b87547": {
-     "model_module": "@jupyter-widgets/controls",
-     "model_name": "DescriptionStyleModel",
-     "model_module_version": "1.5.0",
-     "state": {
-      "_model_module": "@jupyter-widgets/controls",
-      "_model_module_version": "1.5.0",
-      "_model_name": "DescriptionStyleModel",
-      "_view_count": null,
-      "_view_module": "@jupyter-widgets/base",
-      "_view_module_version": "1.2.0",
-      "_view_name": "StyleView",
-      "description_width": ""
-     }
-    },
-    "f539d91e10aa4216bc852be8897904fc": {
-     "model_module": "@jupyter-widgets/controls",
-     "model_name": "HBoxModel",
-     "model_module_version": "1.5.0",
-     "state": {
-      "_dom_classes": [],
-      "_model_module": "@jupyter-widgets/controls",
-      "_model_module_version": "1.5.0",
-      "_model_name": "HBoxModel",
-      "_view_count": null,
-      "_view_module": "@jupyter-widgets/controls",
-      "_view_module_version": "1.5.0",
-      "_view_name": "HBoxView",
-      "box_style": "",
-      "children": [
-       "IPY_MODEL_95e17670f76240a891da5b1218b2ae09",
-       "IPY_MODEL_d259c5044a534fe997234f847e2dfaf6",
-       "IPY_MODEL_27328026e1ec4e49a6c86b272ba55750"
-      ],
-      "layout": "IPY_MODEL_e711f79c92a4454e8b5b64be6db28052"
-     }
-    },
-    "95e17670f76240a891da5b1218b2ae09": {
-     "model_module": "@jupyter-widgets/controls",
-     "model_name": "HTMLModel",
-     "model_module_version": "1.5.0",
-     "state": {
-      "_dom_classes": [],
-      "_model_module": "@jupyter-widgets/controls",
-      "_model_module_version": "1.5.0",
-      "_model_name": "HTMLModel",
-      "_view_count": null,
-      "_view_module": "@jupyter-widgets/controls",
-      "_view_module_version": "1.5.0",
-      "_view_name": "HTMLView",
-      "description": "",
-      "description_tooltip": null,
-      "layout": "IPY_MODEL_3c6ca2fb0d1b43bb8bf26c0f3c476242",
-      "placeholder": "​",
-      "style": "IPY_MODEL_b5190d5a072b419a9efc8e4d8a9090d8",
-      "value": "Collecting perturbations: 100%"
-     }
-    },
-    "d259c5044a534fe997234f847e2dfaf6": {
-     "model_module": "@jupyter-widgets/controls",
-     "model_name": "FloatProgressModel",
-     "model_module_version": "1.5.0",
-     "state": {
-      "_dom_classes": [],
-      "_model_module": "@jupyter-widgets/controls",
-      "_model_module_version": "1.5.0",
-      "_model_name": "FloatProgressModel",
-      "_view_count": null,
-      "_view_module": "@jupyter-widgets/controls",
-      "_view_module_version": "1.5.0",
-      "_view_name": "ProgressView",
-      "bar_style": "success",
-      "description": "",
-      "description_tooltip": null,
-      "layout": "IPY_MODEL_5fdf523b124c436f84a7f2fe35084bd1",
-      "max": 10,
-      "min": 0,
-      "orientation": "horizontal",
-      "style": "IPY_MODEL_c10116d3eb5848229d9dddba6610bad3",
-      "value": 10
-     }
-    },
-    "27328026e1ec4e49a6c86b272ba55750": {
-     "model_module": "@jupyter-widgets/controls",
-     "model_name": "HTMLModel",
-     "model_module_version": "1.5.0",
-     "state": {
-      "_dom_classes": [],
-      "_model_module": "@jupyter-widgets/controls",
-      "_model_module_version": "1.5.0",
-      "_model_name": "HTMLModel",
-      "_view_count": null,
-      "_view_module": "@jupyter-widgets/controls",
-      "_view_module_version": "1.5.0",
-      "_view_name": "HTMLView",
-      "description": "",
-      "description_tooltip": null,
-      "layout": "IPY_MODEL_dbc7623dda6f4270973256ca86801288",
-      "placeholder": "​",
-      "style": "IPY_MODEL_5d2fbbed3de34662aeab561982508f92",
-      "value": " 10/10 [00:00&lt;00:00, 11.41it/s]"
-     }
-    },
-    "e711f79c92a4454e8b5b64be6db28052": {
-     "model_module": "@jupyter-widgets/base",
-     "model_name": "LayoutModel",
-     "model_module_version": "1.2.0",
-     "state": {
-      "_model_module": "@jupyter-widgets/base",
-      "_model_module_version": "1.2.0",
-      "_model_name": "LayoutModel",
-      "_view_count": null,
-      "_view_module": "@jupyter-widgets/base",
-      "_view_module_version": "1.2.0",
-      "_view_name": "LayoutView",
-      "align_content": null,
-      "align_items": null,
-      "align_self": null,
-      "border": null,
-      "bottom": null,
-      "display": null,
-      "flex": null,
-      "flex_flow": null,
-      "grid_area": null,
-      "grid_auto_columns": null,
-      "grid_auto_flow": null,
-      "grid_auto_rows": null,
-      "grid_column": null,
-      "grid_gap": null,
-      "grid_row": null,
-      "grid_template_areas": null,
-      "grid_template_columns": null,
-      "grid_template_rows": null,
-      "height": null,
-      "justify_content": null,
-      "justify_items": null,
-      "left": null,
-      "margin": null,
-      "max_height": null,
-      "max_width": null,
-      "min_height": null,
-      "min_width": null,
-      "object_fit": null,
-      "object_position": null,
-      "order": null,
-      "overflow": null,
-      "overflow_x": null,
-      "overflow_y": null,
-      "padding": null,
-      "right": null,
-      "top": null,
-      "visibility": null,
-      "width": null
-     }
-    },
-    "3c6ca2fb0d1b43bb8bf26c0f3c476242": {
-     "model_module": "@jupyter-widgets/base",
-     "model_name": "LayoutModel",
-     "model_module_version": "1.2.0",
-     "state": {
-      "_model_module": "@jupyter-widgets/base",
-      "_model_module_version": "1.2.0",
-      "_model_name": "LayoutModel",
-      "_view_count": null,
-      "_view_module": "@jupyter-widgets/base",
-      "_view_module_version": "1.2.0",
-      "_view_name": "LayoutView",
-      "align_content": null,
-      "align_items": null,
-      "align_self": null,
-      "border": null,
-      "bottom": null,
-      "display": null,
-      "flex": null,
-      "flex_flow": null,
-      "grid_area": null,
-      "grid_auto_columns": null,
-      "grid_auto_flow": null,
-      "grid_auto_rows": null,
-      "grid_column": null,
-      "grid_gap": null,
-      "grid_row": null,
-      "grid_template_areas": null,
-      "grid_template_columns": null,
-      "grid_template_rows": null,
-      "height": null,
-      "justify_content": null,
-      "justify_items": null,
-      "left": null,
-      "margin": null,
-      "max_height": null,
-      "max_width": null,
-      "min_height": null,
-      "min_width": null,
-      "object_fit": null,
-      "object_position": null,
-      "order": null,
-      "overflow": null,
-      "overflow_x": null,
-      "overflow_y": null,
-      "padding": null,
-      "right": null,
-      "top": null,
-      "visibility": null,
-      "width": null
-     }
-    },
-    "b5190d5a072b419a9efc8e4d8a9090d8": {
-     "model_module": "@jupyter-widgets/controls",
-     "model_name": "DescriptionStyleModel",
-     "model_module_version": "1.5.0",
-     "state": {
-      "_model_module": "@jupyter-widgets/controls",
-      "_model_module_version": "1.5.0",
-      "_model_name": "DescriptionStyleModel",
-      "_view_count": null,
-      "_view_module": "@jupyter-widgets/base",
-      "_view_module_version": "1.2.0",
-      "_view_name": "StyleView",
-      "description_width": ""
-     }
-    },
-    "5fdf523b124c436f84a7f2fe35084bd1": {
-     "model_module": "@jupyter-widgets/base",
-     "model_name": "LayoutModel",
-     "model_module_version": "1.2.0",
-     "state": {
-      "_model_module": "@jupyter-widgets/base",
-      "_model_module_version": "1.2.0",
-      "_model_name": "LayoutModel",
-      "_view_count": null,
-      "_view_module": "@jupyter-widgets/base",
-      "_view_module_version": "1.2.0",
-      "_view_name": "LayoutView",
-      "align_content": null,
-      "align_items": null,
-      "align_self": null,
-      "border": null,
-      "bottom": null,
-      "display": null,
-      "flex": null,
-      "flex_flow": null,
-      "grid_area": null,
-      "grid_auto_columns": null,
-      "grid_auto_flow": null,
-      "grid_auto_rows": null,
-      "grid_column": null,
-      "grid_gap": null,
-      "grid_row": null,
-      "grid_template_areas": null,
-      "grid_template_columns": null,
-      "grid_template_rows": null,
-      "height": null,
-      "justify_content": null,
-      "justify_items": null,
-      "left": null,
-      "margin": null,
-      "max_height": null,
-      "max_width": null,
-      "min_height": null,
-      "min_width": null,
-      "object_fit": null,
-      "object_position": null,
-      "order": null,
-      "overflow": null,
-      "overflow_x": null,
-      "overflow_y": null,
-      "padding": null,
-      "right": null,
-      "top": null,
-      "visibility": null,
-      "width": null
-     }
-    },
-    "c10116d3eb5848229d9dddba6610bad3": {
-     "model_module": "@jupyter-widgets/controls",
-     "model_name": "ProgressStyleModel",
-     "model_module_version": "1.5.0",
-     "state": {
-      "_model_module": "@jupyter-widgets/controls",
-      "_model_module_version": "1.5.0",
-      "_model_name": "ProgressStyleModel",
-      "_view_count": null,
-      "_view_module": "@jupyter-widgets/base",
-      "_view_module_version": "1.2.0",
-      "_view_name": "StyleView",
-      "bar_color": null,
-      "description_width": ""
-     }
-    },
-    "dbc7623dda6f4270973256ca86801288": {
-     "model_module": "@jupyter-widgets/base",
-     "model_name": "LayoutModel",
-     "model_module_version": "1.2.0",
-     "state": {
-      "_model_module": "@jupyter-widgets/base",
-      "_model_module_version": "1.2.0",
-      "_model_name": "LayoutModel",
-      "_view_count": null,
-      "_view_module": "@jupyter-widgets/base",
-      "_view_module_version": "1.2.0",
-      "_view_name": "LayoutView",
-      "align_content": null,
-      "align_items": null,
-      "align_self": null,
-      "border": null,
-      "bottom": null,
-      "display": null,
-      "flex": null,
-      "flex_flow": null,
-      "grid_area": null,
-      "grid_auto_columns": null,
-      "grid_auto_flow": null,
-      "grid_auto_rows": null,
-      "grid_column": null,
-      "grid_gap": null,
-      "grid_row": null,
-      "grid_template_areas": null,
-      "grid_template_columns": null,
-      "grid_template_rows": null,
-      "height": null,
-      "justify_content": null,
-      "justify_items": null,
-      "left": null,
-      "margin": null,
-      "max_height": null,
-      "max_width": null,
-      "min_height": null,
-      "min_width": null,
-      "object_fit": null,
-      "object_position": null,
-      "order": null,
-      "overflow": null,
-      "overflow_x": null,
-      "overflow_y": null,
-      "padding": null,
-      "right": null,
-      "top": null,
-      "visibility": null,
-      "width": null
-     }
-    },
-    "5d2fbbed3de34662aeab561982508f92": {
-     "model_module": "@jupyter-widgets/controls",
-     "model_name": "DescriptionStyleModel",
-     "model_module_version": "1.5.0",
-     "state": {
-      "_model_module": "@jupyter-widgets/controls",
-      "_model_module_version": "1.5.0",
-      "_model_name": "DescriptionStyleModel",
-      "_view_count": null,
-      "_view_module": "@jupyter-widgets/base",
-      "_view_module_version": "1.2.0",
-      "_view_name": "StyleView",
-      "description_width": ""
-     }
-    },
-    "3c9f57b3a3a64428b6bdc1e4e590ecde": {
-     "model_module": "@jupyter-widgets/controls",
-     "model_name": "HBoxModel",
-     "model_module_version": "1.5.0",
-     "state": {
-      "_dom_classes": [],
-      "_model_module": "@jupyter-widgets/controls",
-      "_model_module_version": "1.5.0",
-      "_model_name": "HBoxModel",
-      "_view_count": null,
-      "_view_module": "@jupyter-widgets/controls",
-      "_view_module_version": "1.5.0",
-      "_view_name": "HBoxView",
-      "box_style": "",
-      "children": [
-       "IPY_MODEL_48842ecc9e3a4396b683a23c49f8c7eb",
-       "IPY_MODEL_ce6da216a9e84cb389f64fa027e1f49c",
-       "IPY_MODEL_a70c715350e44a2e8f1e2b49aca89527"
-      ],
-      "layout": "IPY_MODEL_402bb9d95e1447f8810f729f48cb134a"
-     }
-    },
-    "48842ecc9e3a4396b683a23c49f8c7eb": {
-     "model_module": "@jupyter-widgets/controls",
-     "model_name": "HTMLModel",
-     "model_module_version": "1.5.0",
-     "state": {
-      "_dom_classes": [],
-      "_model_module": "@jupyter-widgets/controls",
-      "_model_module_version": "1.5.0",
-      "_model_name": "HTMLModel",
-      "_view_count": null,
-      "_view_module": "@jupyter-widgets/controls",
-      "_view_module_version": "1.5.0",
-      "_view_name": "HTMLView",
-      "description": "",
-      "description_tooltip": null,
-      "layout": "IPY_MODEL_e944ae244de142268b5cbc6b06c847bc",
-      "placeholder": "​",
-      "style": "IPY_MODEL_162e58f3801340fc99b297a365895321",
-      "value": "Collecting explanations: 100%"
-     }
-    },
-    "ce6da216a9e84cb389f64fa027e1f49c": {
-     "model_module": "@jupyter-widgets/controls",
-     "model_name": "FloatProgressModel",
-     "model_module_version": "1.5.0",
-     "state": {
-      "_dom_classes": [],
-      "_model_module": "@jupyter-widgets/controls",
-      "_model_module_version": "1.5.0",
-      "_model_name": "FloatProgressModel",
-      "_view_count": null,
-      "_view_module": "@jupyter-widgets/controls",
-      "_view_module_version": "1.5.0",
-      "_view_name": "ProgressView",
-      "bar_style": "success",
-      "description": "",
-      "description_tooltip": null,
-      "layout": "IPY_MODEL_92eae6b08b174832b9aa2f7a603eaf81",
-      "max": 9,
-      "min": 0,
-      "orientation": "horizontal",
-      "style": "IPY_MODEL_a970f5a7cccc44b9b693b90f5e47a255",
-      "value": 9
-     }
-    },
-    "a70c715350e44a2e8f1e2b49aca89527": {
-     "model_module": "@jupyter-widgets/controls",
-     "model_name": "HTMLModel",
-     "model_module_version": "1.5.0",
-     "state": {
-      "_dom_classes": [],
-      "_model_module": "@jupyter-widgets/controls",
-      "_model_module_version": "1.5.0",
-      "_model_name": "HTMLModel",
-      "_view_count": null,
-      "_view_module": "@jupyter-widgets/controls",
-      "_view_module_version": "1.5.0",
-      "_view_name": "HTMLView",
-      "description": "",
-      "description_tooltip": null,
-      "layout": "IPY_MODEL_9da0ef1957344bd4ba22c6e5c0755dad",
-      "placeholder": "​",
-      "style": "IPY_MODEL_b150db7ffa024c0e8525b804c86f4599",
-      "value": " 9/9 [00:13&lt;00:00,  1.32s/it]"
-     }
-    },
-    "402bb9d95e1447f8810f729f48cb134a": {
-     "model_module": "@jupyter-widgets/base",
-     "model_name": "LayoutModel",
-     "model_module_version": "1.2.0",
-     "state": {
-      "_model_module": "@jupyter-widgets/base",
-      "_model_module_version": "1.2.0",
-      "_model_name": "LayoutModel",
-      "_view_count": null,
-      "_view_module": "@jupyter-widgets/base",
-      "_view_module_version": "1.2.0",
-      "_view_name": "LayoutView",
-      "align_content": null,
-      "align_items": null,
-      "align_self": null,
-      "border": null,
-      "bottom": null,
-      "display": null,
-      "flex": null,
-      "flex_flow": null,
-      "grid_area": null,
-      "grid_auto_columns": null,
-      "grid_auto_flow": null,
-      "grid_auto_rows": null,
-      "grid_column": null,
-      "grid_gap": null,
-      "grid_row": null,
-      "grid_template_areas": null,
-      "grid_template_columns": null,
-      "grid_template_rows": null,
-      "height": null,
-      "justify_content": null,
-      "justify_items": null,
-      "left": null,
-      "margin": null,
-      "max_height": null,
-      "max_width": null,
-      "min_height": null,
-      "min_width": null,
-      "object_fit": null,
-      "object_position": null,
-      "order": null,
-      "overflow": null,
-      "overflow_x": null,
-      "overflow_y": null,
-      "padding": null,
-      "right": null,
-      "top": null,
-      "visibility": null,
-      "width": null
-     }
-    },
-    "e944ae244de142268b5cbc6b06c847bc": {
-     "model_module": "@jupyter-widgets/base",
-     "model_name": "LayoutModel",
-     "model_module_version": "1.2.0",
-     "state": {
-      "_model_module": "@jupyter-widgets/base",
-      "_model_module_version": "1.2.0",
-      "_model_name": "LayoutModel",
-      "_view_count": null,
-      "_view_module": "@jupyter-widgets/base",
-      "_view_module_version": "1.2.0",
-      "_view_name": "LayoutView",
-      "align_content": null,
-      "align_items": null,
-      "align_self": null,
-      "border": null,
-      "bottom": null,
-      "display": null,
-      "flex": null,
-      "flex_flow": null,
-      "grid_area": null,
-      "grid_auto_columns": null,
-      "grid_auto_flow": null,
-      "grid_auto_rows": null,
-      "grid_column": null,
-      "grid_gap": null,
-      "grid_row": null,
-      "grid_template_areas": null,
-      "grid_template_columns": null,
-      "grid_template_rows": null,
-      "height": null,
-      "justify_content": null,
-      "justify_items": null,
-      "left": null,
-      "margin": null,
-      "max_height": null,
-      "max_width": null,
-      "min_height": null,
-      "min_width": null,
-      "object_fit": null,
-      "object_position": null,
-      "order": null,
-      "overflow": null,
-      "overflow_x": null,
-      "overflow_y": null,
-      "padding": null,
-      "right": null,
-      "top": null,
-      "visibility": null,
-      "width": null
-     }
-    },
-    "162e58f3801340fc99b297a365895321": {
-     "model_module": "@jupyter-widgets/controls",
-     "model_name": "DescriptionStyleModel",
-     "model_module_version": "1.5.0",
-     "state": {
-      "_model_module": "@jupyter-widgets/controls",
-      "_model_module_version": "1.5.0",
-      "_model_name": "DescriptionStyleModel",
-      "_view_count": null,
-      "_view_module": "@jupyter-widgets/base",
-      "_view_module_version": "1.2.0",
-      "_view_name": "StyleView",
-      "description_width": ""
-     }
-    },
-    "92eae6b08b174832b9aa2f7a603eaf81": {
-     "model_module": "@jupyter-widgets/base",
-     "model_name": "LayoutModel",
-     "model_module_version": "1.2.0",
-     "state": {
-      "_model_module": "@jupyter-widgets/base",
-      "_model_module_version": "1.2.0",
-      "_model_name": "LayoutModel",
-      "_view_count": null,
-      "_view_module": "@jupyter-widgets/base",
-      "_view_module_version": "1.2.0",
-      "_view_name": "LayoutView",
-      "align_content": null,
-      "align_items": null,
-      "align_self": null,
-      "border": null,
-      "bottom": null,
-      "display": null,
-      "flex": null,
-      "flex_flow": null,
-      "grid_area": null,
-      "grid_auto_columns": null,
-      "grid_auto_flow": null,
-      "grid_auto_rows": null,
-      "grid_column": null,
-      "grid_gap": null,
-      "grid_row": null,
-      "grid_template_areas": null,
-      "grid_template_columns": null,
-      "grid_template_rows": null,
-      "height": null,
-      "justify_content": null,
-      "justify_items": null,
-      "left": null,
-      "margin": null,
-      "max_height": null,
-      "max_width": null,
-      "min_height": null,
-      "min_width": null,
-      "object_fit": null,
-      "object_position": null,
-      "order": null,
-      "overflow": null,
-      "overflow_x": null,
-      "overflow_y": null,
-      "padding": null,
-      "right": null,
-      "top": null,
-      "visibility": null,
-      "width": null
-     }
-    },
-    "a970f5a7cccc44b9b693b90f5e47a255": {
-     "model_module": "@jupyter-widgets/controls",
-     "model_name": "ProgressStyleModel",
-     "model_module_version": "1.5.0",
-     "state": {
-      "_model_module": "@jupyter-widgets/controls",
-      "_model_module_version": "1.5.0",
-      "_model_name": "ProgressStyleModel",
-      "_view_count": null,
-      "_view_module": "@jupyter-widgets/base",
-      "_view_module_version": "1.2.0",
-      "_view_name": "StyleView",
-      "bar_color": null,
-      "description_width": ""
-     }
-    },
-    "9da0ef1957344bd4ba22c6e5c0755dad": {
-     "model_module": "@jupyter-widgets/base",
-     "model_name": "LayoutModel",
-     "model_module_version": "1.2.0",
-     "state": {
-      "_model_module": "@jupyter-widgets/base",
-      "_model_module_version": "1.2.0",
-      "_model_name": "LayoutModel",
-      "_view_count": null,
-      "_view_module": "@jupyter-widgets/base",
-      "_view_module_version": "1.2.0",
-      "_view_name": "LayoutView",
-      "align_content": null,
-      "align_items": null,
-      "align_self": null,
-      "border": null,
-      "bottom": null,
-      "display": null,
-      "flex": null,
-      "flex_flow": null,
-      "grid_area": null,
-      "grid_auto_columns": null,
-      "grid_auto_flow": null,
-      "grid_auto_rows": null,
-      "grid_column": null,
-      "grid_gap": null,
-      "grid_row": null,
-      "grid_template_areas": null,
-      "grid_template_columns": null,
-      "grid_template_rows": null,
-      "height": null,
-      "justify_content": null,
-      "justify_items": null,
-      "left": null,
-      "margin": null,
-      "max_height": null,
-      "max_width": null,
-      "min_height": null,
-      "min_width": null,
-      "object_fit": null,
-      "object_position": null,
-      "order": null,
-      "overflow": null,
-      "overflow_x": null,
-      "overflow_y": null,
-      "padding": null,
-      "right": null,
-      "top": null,
-      "visibility": null,
-      "width": null
-     }
-    },
-    "b150db7ffa024c0e8525b804c86f4599": {
-     "model_module": "@jupyter-widgets/controls",
-     "model_name": "DescriptionStyleModel",
-     "model_module_version": "1.5.0",
-     "state": {
-      "_model_module": "@jupyter-widgets/controls",
-      "_model_module_version": "1.5.0",
-      "_model_name": "DescriptionStyleModel",
-      "_view_count": null,
-      "_view_module": "@jupyter-widgets/base",
-      "_view_module_version": "1.2.0",
-      "_view_name": "StyleView",
-      "description_width": ""
-     }
-    },
-    "103fbd2c1b0243558f7dcec60993cee4": {
-     "model_module": "@jupyter-widgets/controls",
-     "model_name": "HBoxModel",
-     "model_module_version": "1.5.0",
-     "state": {
-      "_dom_classes": [],
-      "_model_module": "@jupyter-widgets/controls",
-      "_model_module_version": "1.5.0",
-      "_model_name": "HBoxModel",
-      "_view_count": null,
-      "_view_module": "@jupyter-widgets/controls",
-      "_view_module_version": "1.5.0",
-      "_view_name": "HBoxView",
-      "box_style": "",
-      "children": [
-       "IPY_MODEL_9e300b052b084d979ddc125cc6dd1467",
-       "IPY_MODEL_e62c917b449e4917968db34c41bb052f",
-       "IPY_MODEL_3608352acb4a4e35b7f1f86d7fe68440"
-      ],
-      "layout": "IPY_MODEL_1729d9fd508344d0bb3b94b2477e33ec"
-     }
-    },
-    "9e300b052b084d979ddc125cc6dd1467": {
-     "model_module": "@jupyter-widgets/controls",
-     "model_name": "HTMLModel",
-     "model_module_version": "1.5.0",
-     "state": {
-      "_dom_classes": [],
-      "_model_module": "@jupyter-widgets/controls",
-      "_model_module_version": "1.5.0",
-      "_model_name": "HTMLModel",
-      "_view_count": null,
-      "_view_module": "@jupyter-widgets/controls",
-      "_view_module_version": "1.5.0",
-      "_view_name": "HTMLView",
-      "description": "",
-      "description_tooltip": null,
-      "layout": "IPY_MODEL_f513bda9bc6d4b4bbe63a094aff7aa58",
-      "placeholder": "​",
-      "style": "IPY_MODEL_5fa49e5530c842b7953e00ade3045c92",
-      "value": "Collecting perturbations: 100%"
-     }
-    },
-    "e62c917b449e4917968db34c41bb052f": {
-     "model_module": "@jupyter-widgets/controls",
-     "model_name": "FloatProgressModel",
-     "model_module_version": "1.5.0",
-     "state": {
-      "_dom_classes": [],
-      "_model_module": "@jupyter-widgets/controls",
-      "_model_module_version": "1.5.0",
-      "_model_name": "FloatProgressModel",
-      "_view_count": null,
-      "_view_module": "@jupyter-widgets/controls",
-      "_view_module_version": "1.5.0",
-      "_view_name": "ProgressView",
-      "bar_style": "success",
-      "description": "",
-      "description_tooltip": null,
-      "layout": "IPY_MODEL_b2516bc3259a41d2926a47223f213fe5",
-      "max": 10,
-      "min": 0,
-      "orientation": "horizontal",
-      "style": "IPY_MODEL_d4deb0be86d1471fb2c230b664bb26ec",
-      "value": 10
-     }
-    },
-    "3608352acb4a4e35b7f1f86d7fe68440": {
-     "model_module": "@jupyter-widgets/controls",
-     "model_name": "HTMLModel",
-     "model_module_version": "1.5.0",
-     "state": {
-      "_dom_classes": [],
-      "_model_module": "@jupyter-widgets/controls",
-      "_model_module_version": "1.5.0",
-      "_model_name": "HTMLModel",
-      "_view_count": null,
-      "_view_module": "@jupyter-widgets/controls",
-      "_view_module_version": "1.5.0",
-      "_view_name": "HTMLView",
-      "description": "",
-      "description_tooltip": null,
-      "layout": "IPY_MODEL_01af026a8db8434e9ae9eeaa06599420",
-      "placeholder": "​",
-      "style": "IPY_MODEL_19a92baa764348ecbccc63589feb2a3a",
-      "value": " 10/10 [00:00&lt;00:00, 11.76it/s]"
-     }
-    },
-    "1729d9fd508344d0bb3b94b2477e33ec": {
-     "model_module": "@jupyter-widgets/base",
-     "model_name": "LayoutModel",
-     "model_module_version": "1.2.0",
-     "state": {
-      "_model_module": "@jupyter-widgets/base",
-      "_model_module_version": "1.2.0",
-      "_model_name": "LayoutModel",
-      "_view_count": null,
-      "_view_module": "@jupyter-widgets/base",
-      "_view_module_version": "1.2.0",
-      "_view_name": "LayoutView",
-      "align_content": null,
-      "align_items": null,
-      "align_self": null,
-      "border": null,
-      "bottom": null,
-      "display": null,
-      "flex": null,
-      "flex_flow": null,
-      "grid_area": null,
-      "grid_auto_columns": null,
-      "grid_auto_flow": null,
-      "grid_auto_rows": null,
-      "grid_column": null,
-      "grid_gap": null,
-      "grid_row": null,
-      "grid_template_areas": null,
-      "grid_template_columns": null,
-      "grid_template_rows": null,
-      "height": null,
-      "justify_content": null,
-      "justify_items": null,
-      "left": null,
-      "margin": null,
-      "max_height": null,
-      "max_width": null,
-      "min_height": null,
-      "min_width": null,
-      "object_fit": null,
-      "object_position": null,
-      "order": null,
-      "overflow": null,
-      "overflow_x": null,
-      "overflow_y": null,
-      "padding": null,
-      "right": null,
-      "top": null,
-      "visibility": null,
-      "width": null
-     }
-    },
-    "f513bda9bc6d4b4bbe63a094aff7aa58": {
-     "model_module": "@jupyter-widgets/base",
-     "model_name": "LayoutModel",
-     "model_module_version": "1.2.0",
-     "state": {
-      "_model_module": "@jupyter-widgets/base",
-      "_model_module_version": "1.2.0",
-      "_model_name": "LayoutModel",
-      "_view_count": null,
-      "_view_module": "@jupyter-widgets/base",
-      "_view_module_version": "1.2.0",
-      "_view_name": "LayoutView",
-      "align_content": null,
-      "align_items": null,
-      "align_self": null,
-      "border": null,
-      "bottom": null,
-      "display": null,
-      "flex": null,
-      "flex_flow": null,
-      "grid_area": null,
-      "grid_auto_columns": null,
-      "grid_auto_flow": null,
-      "grid_auto_rows": null,
-      "grid_column": null,
-      "grid_gap": null,
-      "grid_row": null,
-      "grid_template_areas": null,
-      "grid_template_columns": null,
-      "grid_template_rows": null,
-      "height": null,
-      "justify_content": null,
-      "justify_items": null,
-      "left": null,
-      "margin": null,
-      "max_height": null,
-      "max_width": null,
-      "min_height": null,
-      "min_width": null,
-      "object_fit": null,
-      "object_position": null,
-      "order": null,
-      "overflow": null,
-      "overflow_x": null,
-      "overflow_y": null,
-      "padding": null,
-      "right": null,
-      "top": null,
-      "visibility": null,
-      "width": null
-     }
-    },
-    "5fa49e5530c842b7953e00ade3045c92": {
-     "model_module": "@jupyter-widgets/controls",
-     "model_name": "DescriptionStyleModel",
-     "model_module_version": "1.5.0",
-     "state": {
-      "_model_module": "@jupyter-widgets/controls",
-      "_model_module_version": "1.5.0",
-      "_model_name": "DescriptionStyleModel",
-      "_view_count": null,
-      "_view_module": "@jupyter-widgets/base",
-      "_view_module_version": "1.2.0",
-      "_view_name": "StyleView",
-      "description_width": ""
-     }
-    },
-    "b2516bc3259a41d2926a47223f213fe5": {
-     "model_module": "@jupyter-widgets/base",
-     "model_name": "LayoutModel",
-     "model_module_version": "1.2.0",
-     "state": {
-      "_model_module": "@jupyter-widgets/base",
-      "_model_module_version": "1.2.0",
-      "_model_name": "LayoutModel",
-      "_view_count": null,
-      "_view_module": "@jupyter-widgets/base",
-      "_view_module_version": "1.2.0",
-      "_view_name": "LayoutView",
-      "align_content": null,
-      "align_items": null,
-      "align_self": null,
-      "border": null,
-      "bottom": null,
-      "display": null,
-      "flex": null,
-      "flex_flow": null,
-      "grid_area": null,
-      "grid_auto_columns": null,
-      "grid_auto_flow": null,
-      "grid_auto_rows": null,
-      "grid_column": null,
-      "grid_gap": null,
-      "grid_row": null,
-      "grid_template_areas": null,
-      "grid_template_columns": null,
-      "grid_template_rows": null,
-      "height": null,
-      "justify_content": null,
-      "justify_items": null,
-      "left": null,
-      "margin": null,
-      "max_height": null,
-      "max_width": null,
-      "min_height": null,
-      "min_width": null,
-      "object_fit": null,
-      "object_position": null,
-      "order": null,
-      "overflow": null,
-      "overflow_x": null,
-      "overflow_y": null,
-      "padding": null,
-      "right": null,
-      "top": null,
-      "visibility": null,
-      "width": null
-     }
-    },
-    "d4deb0be86d1471fb2c230b664bb26ec": {
-     "model_module": "@jupyter-widgets/controls",
-     "model_name": "ProgressStyleModel",
-     "model_module_version": "1.5.0",
-     "state": {
-      "_model_module": "@jupyter-widgets/controls",
-      "_model_module_version": "1.5.0",
-      "_model_name": "ProgressStyleModel",
-      "_view_count": null,
-      "_view_module": "@jupyter-widgets/base",
-      "_view_module_version": "1.2.0",
-      "_view_name": "StyleView",
-      "bar_color": null,
-      "description_width": ""
-     }
-    },
-    "01af026a8db8434e9ae9eeaa06599420": {
-     "model_module": "@jupyter-widgets/base",
-     "model_name": "LayoutModel",
-     "model_module_version": "1.2.0",
-     "state": {
-      "_model_module": "@jupyter-widgets/base",
-      "_model_module_version": "1.2.0",
-      "_model_name": "LayoutModel",
-      "_view_count": null,
-      "_view_module": "@jupyter-widgets/base",
-      "_view_module_version": "1.2.0",
-      "_view_name": "LayoutView",
-      "align_content": null,
-      "align_items": null,
-      "align_self": null,
-      "border": null,
-      "bottom": null,
-      "display": null,
-      "flex": null,
-      "flex_flow": null,
-      "grid_area": null,
-      "grid_auto_columns": null,
-      "grid_auto_flow": null,
-      "grid_auto_rows": null,
-      "grid_column": null,
-      "grid_gap": null,
-      "grid_row": null,
-      "grid_template_areas": null,
-      "grid_template_columns": null,
-      "grid_template_rows": null,
-      "height": null,
-      "justify_content": null,
-      "justify_items": null,
-      "left": null,
-      "margin": null,
-      "max_height": null,
-      "max_width": null,
-      "min_height": null,
-      "min_width": null,
-      "object_fit": null,
-      "object_position": null,
-      "order": null,
-      "overflow": null,
-      "overflow_x": null,
-      "overflow_y": null,
-      "padding": null,
-      "right": null,
-      "top": null,
-      "visibility": null,
-      "width": null
-     }
-    },
-    "19a92baa764348ecbccc63589feb2a3a": {
-     "model_module": "@jupyter-widgets/controls",
-     "model_name": "DescriptionStyleModel",
-     "model_module_version": "1.5.0",
-     "state": {
-      "_model_module": "@jupyter-widgets/controls",
-      "_model_module_version": "1.5.0",
-      "_model_name": "DescriptionStyleModel",
-      "_view_count": null,
-      "_view_module": "@jupyter-widgets/base",
-      "_view_module_version": "1.2.0",
-      "_view_name": "StyleView",
-      "description_width": ""
-     }
-    },
-    "085a46ae240449fe81b49198a82b3d24": {
-     "model_module": "@jupyter-widgets/controls",
-     "model_name": "HBoxModel",
-     "model_module_version": "1.5.0",
-     "state": {
-      "_dom_classes": [],
-      "_model_module": "@jupyter-widgets/controls",
-      "_model_module_version": "1.5.0",
-      "_model_name": "HBoxModel",
-      "_view_count": null,
-      "_view_module": "@jupyter-widgets/controls",
-      "_view_module_version": "1.5.0",
-      "_view_name": "HBoxView",
-      "box_style": "",
-      "children": [
-       "IPY_MODEL_1b4416f783ae4e7e89199b17e7f4ce7c",
-       "IPY_MODEL_e54bc025c8e44b2abeffd71ffa89db0e",
-       "IPY_MODEL_41940b33cd8b4e86b821e1fdba069ff9"
-      ],
-      "layout": "IPY_MODEL_1850b3d7d7a7401480db9384615309af"
-     }
-    },
-    "1b4416f783ae4e7e89199b17e7f4ce7c": {
-     "model_module": "@jupyter-widgets/controls",
-     "model_name": "HTMLModel",
-     "model_module_version": "1.5.0",
-     "state": {
-      "_dom_classes": [],
-      "_model_module": "@jupyter-widgets/controls",
-      "_model_module_version": "1.5.0",
-      "_model_name": "HTMLModel",
-      "_view_count": null,
-      "_view_module": "@jupyter-widgets/controls",
-      "_view_module_version": "1.5.0",
-      "_view_name": "HTMLView",
-      "description": "",
-      "description_tooltip": null,
-      "layout": "IPY_MODEL_9d1ed4939590418e91328cd88e91c672",
-      "placeholder": "​",
-      "style": "IPY_MODEL_5cfec1477c2f46cab2ebc6bc1ef27eeb",
-      "value": "Collecting explanations: 100%"
-     }
-    },
-    "e54bc025c8e44b2abeffd71ffa89db0e": {
-     "model_module": "@jupyter-widgets/controls",
-     "model_name": "FloatProgressModel",
-     "model_module_version": "1.5.0",
-     "state": {
-      "_dom_classes": [],
-      "_model_module": "@jupyter-widgets/controls",
-      "_model_module_version": "1.5.0",
-      "_model_name": "FloatProgressModel",
-      "_view_count": null,
-      "_view_module": "@jupyter-widgets/controls",
-      "_view_module_version": "1.5.0",
-      "_view_name": "ProgressView",
-      "bar_style": "success",
-      "description": "",
-      "description_tooltip": null,
-      "layout": "IPY_MODEL_f36af1ab4cf44bf4b3bda2f4059da84b",
-      "max": 9,
-      "min": 0,
-      "orientation": "horizontal",
-      "style": "IPY_MODEL_bbc5507bf0984c07ba33ce163d50dd79",
-      "value": 9
-     }
-    },
-    "41940b33cd8b4e86b821e1fdba069ff9": {
-     "model_module": "@jupyter-widgets/controls",
-     "model_name": "HTMLModel",
-     "model_module_version": "1.5.0",
-     "state": {
-      "_dom_classes": [],
-      "_model_module": "@jupyter-widgets/controls",
-      "_model_module_version": "1.5.0",
-      "_model_name": "HTMLModel",
-      "_view_count": null,
-      "_view_module": "@jupyter-widgets/controls",
-      "_view_module_version": "1.5.0",
-      "_view_name": "HTMLView",
-      "description": "",
-      "description_tooltip": null,
-      "layout": "IPY_MODEL_ebd768308645435b921396ff11d64005",
-      "placeholder": "​",
-      "style": "IPY_MODEL_9e770e0c0702446380c0647dcf2458a5",
-      "value": " 9/9 [00:13&lt;00:00,  1.50s/it]"
-     }
-    },
-    "1850b3d7d7a7401480db9384615309af": {
-     "model_module": "@jupyter-widgets/base",
-     "model_name": "LayoutModel",
-     "model_module_version": "1.2.0",
-     "state": {
-      "_model_module": "@jupyter-widgets/base",
-      "_model_module_version": "1.2.0",
-      "_model_name": "LayoutModel",
-      "_view_count": null,
-      "_view_module": "@jupyter-widgets/base",
-      "_view_module_version": "1.2.0",
-      "_view_name": "LayoutView",
-      "align_content": null,
-      "align_items": null,
-      "align_self": null,
-      "border": null,
-      "bottom": null,
-      "display": null,
-      "flex": null,
-      "flex_flow": null,
-      "grid_area": null,
-      "grid_auto_columns": null,
-      "grid_auto_flow": null,
-      "grid_auto_rows": null,
-      "grid_column": null,
-      "grid_gap": null,
-      "grid_row": null,
-      "grid_template_areas": null,
-      "grid_template_columns": null,
-      "grid_template_rows": null,
-      "height": null,
-      "justify_content": null,
-      "justify_items": null,
-      "left": null,
-      "margin": null,
-      "max_height": null,
-      "max_width": null,
-      "min_height": null,
-      "min_width": null,
-      "object_fit": null,
-      "object_position": null,
-      "order": null,
-      "overflow": null,
-      "overflow_x": null,
-      "overflow_y": null,
-      "padding": null,
-      "right": null,
-      "top": null,
-      "visibility": null,
-      "width": null
-     }
-    },
-    "9d1ed4939590418e91328cd88e91c672": {
-     "model_module": "@jupyter-widgets/base",
-     "model_name": "LayoutModel",
-     "model_module_version": "1.2.0",
-     "state": {
-      "_model_module": "@jupyter-widgets/base",
-      "_model_module_version": "1.2.0",
-      "_model_name": "LayoutModel",
-      "_view_count": null,
-      "_view_module": "@jupyter-widgets/base",
-      "_view_module_version": "1.2.0",
-      "_view_name": "LayoutView",
-      "align_content": null,
-      "align_items": null,
-      "align_self": null,
-      "border": null,
-      "bottom": null,
-      "display": null,
-      "flex": null,
-      "flex_flow": null,
-      "grid_area": null,
-      "grid_auto_columns": null,
-      "grid_auto_flow": null,
-      "grid_auto_rows": null,
-      "grid_column": null,
-      "grid_gap": null,
-      "grid_row": null,
-      "grid_template_areas": null,
-      "grid_template_columns": null,
-      "grid_template_rows": null,
-      "height": null,
-      "justify_content": null,
-      "justify_items": null,
-      "left": null,
-      "margin": null,
-      "max_height": null,
-      "max_width": null,
-      "min_height": null,
-      "min_width": null,
-      "object_fit": null,
-      "object_position": null,
-      "order": null,
-      "overflow": null,
-      "overflow_x": null,
-      "overflow_y": null,
-      "padding": null,
-      "right": null,
-      "top": null,
-      "visibility": null,
-      "width": null
-     }
-    },
-    "5cfec1477c2f46cab2ebc6bc1ef27eeb": {
-     "model_module": "@jupyter-widgets/controls",
-     "model_name": "DescriptionStyleModel",
-     "model_module_version": "1.5.0",
-     "state": {
-      "_model_module": "@jupyter-widgets/controls",
-      "_model_module_version": "1.5.0",
-      "_model_name": "DescriptionStyleModel",
-      "_view_count": null,
-      "_view_module": "@jupyter-widgets/base",
-      "_view_module_version": "1.2.0",
-      "_view_name": "StyleView",
-      "description_width": ""
-     }
-    },
-    "f36af1ab4cf44bf4b3bda2f4059da84b": {
-     "model_module": "@jupyter-widgets/base",
-     "model_name": "LayoutModel",
-     "model_module_version": "1.2.0",
-     "state": {
-      "_model_module": "@jupyter-widgets/base",
-      "_model_module_version": "1.2.0",
-      "_model_name": "LayoutModel",
-      "_view_count": null,
-      "_view_module": "@jupyter-widgets/base",
-      "_view_module_version": "1.2.0",
-      "_view_name": "LayoutView",
-      "align_content": null,
-      "align_items": null,
-      "align_self": null,
-      "border": null,
-      "bottom": null,
-      "display": null,
-      "flex": null,
-      "flex_flow": null,
-      "grid_area": null,
-      "grid_auto_columns": null,
-      "grid_auto_flow": null,
-      "grid_auto_rows": null,
-      "grid_column": null,
-      "grid_gap": null,
-      "grid_row": null,
-      "grid_template_areas": null,
-      "grid_template_columns": null,
-      "grid_template_rows": null,
-      "height": null,
-      "justify_content": null,
-      "justify_items": null,
-      "left": null,
-      "margin": null,
-      "max_height": null,
-      "max_width": null,
-      "min_height": null,
-      "min_width": null,
-      "object_fit": null,
-      "object_position": null,
-      "order": null,
-      "overflow": null,
-      "overflow_x": null,
-      "overflow_y": null,
-      "padding": null,
-      "right": null,
-      "top": null,
-      "visibility": null,
-      "width": null
-     }
-    },
-    "bbc5507bf0984c07ba33ce163d50dd79": {
-     "model_module": "@jupyter-widgets/controls",
-     "model_name": "ProgressStyleModel",
-     "model_module_version": "1.5.0",
-     "state": {
-      "_model_module": "@jupyter-widgets/controls",
-      "_model_module_version": "1.5.0",
-      "_model_name": "ProgressStyleModel",
-      "_view_count": null,
-      "_view_module": "@jupyter-widgets/base",
-      "_view_module_version": "1.2.0",
-      "_view_name": "StyleView",
-      "bar_color": null,
-      "description_width": ""
-     }
-    },
-    "ebd768308645435b921396ff11d64005": {
-     "model_module": "@jupyter-widgets/base",
-     "model_name": "LayoutModel",
-     "model_module_version": "1.2.0",
-     "state": {
-      "_model_module": "@jupyter-widgets/base",
-      "_model_module_version": "1.2.0",
-      "_model_name": "LayoutModel",
-      "_view_count": null,
-      "_view_module": "@jupyter-widgets/base",
-      "_view_module_version": "1.2.0",
-      "_view_name": "LayoutView",
-      "align_content": null,
-      "align_items": null,
-      "align_self": null,
-      "border": null,
-      "bottom": null,
-      "display": null,
-      "flex": null,
-      "flex_flow": null,
-      "grid_area": null,
-      "grid_auto_columns": null,
-      "grid_auto_flow": null,
-      "grid_auto_rows": null,
-      "grid_column": null,
-      "grid_gap": null,
-      "grid_row": null,
-      "grid_template_areas": null,
-      "grid_template_columns": null,
-      "grid_template_rows": null,
-      "height": null,
-      "justify_content": null,
-      "justify_items": null,
-      "left": null,
-      "margin": null,
-      "max_height": null,
-      "max_width": null,
-      "min_height": null,
-      "min_width": null,
-      "object_fit": null,
-      "object_position": null,
-      "order": null,
-      "overflow": null,
-      "overflow_x": null,
-      "overflow_y": null,
-      "padding": null,
-      "right": null,
-      "top": null,
-      "visibility": null,
-      "width": null
-     }
-    },
-    "9e770e0c0702446380c0647dcf2458a5": {
-     "model_module": "@jupyter-widgets/controls",
-     "model_name": "DescriptionStyleModel",
-     "model_module_version": "1.5.0",
-     "state": {
-      "_model_module": "@jupyter-widgets/controls",
-      "_model_module_version": "1.5.0",
-      "_model_name": "DescriptionStyleModel",
-      "_view_count": null,
-      "_view_module": "@jupyter-widgets/base",
-      "_view_module_version": "1.2.0",
-      "_view_name": "StyleView",
-      "description_width": ""
-     }
-    },
-    "4c611b3b81574076954a0c511b8235fc": {
-     "model_module": "@jupyter-widgets/controls",
-     "model_name": "HBoxModel",
-     "model_module_version": "1.5.0",
-     "state": {
-      "_dom_classes": [],
-      "_model_module": "@jupyter-widgets/controls",
-      "_model_module_version": "1.5.0",
-      "_model_name": "HBoxModel",
-      "_view_count": null,
-      "_view_module": "@jupyter-widgets/controls",
-      "_view_module_version": "1.5.0",
-      "_view_name": "HBoxView",
-      "box_style": "",
-      "children": [
-       "IPY_MODEL_853325f35c57491192f09f879efbd544",
-       "IPY_MODEL_45aa94cf21174a00b62b64bea6aead78",
-       "IPY_MODEL_fcdf278a18854f91a43038974ed1e889"
-      ],
-      "layout": "IPY_MODEL_9030788e3fca4a1593814b2513a8a72b"
-     }
-    },
-    "853325f35c57491192f09f879efbd544": {
-     "model_module": "@jupyter-widgets/controls",
-     "model_name": "HTMLModel",
-     "model_module_version": "1.5.0",
-     "state": {
-      "_dom_classes": [],
-      "_model_module": "@jupyter-widgets/controls",
-      "_model_module_version": "1.5.0",
-      "_model_name": "HTMLModel",
-      "_view_count": null,
-      "_view_module": "@jupyter-widgets/controls",
-      "_view_module_version": "1.5.0",
-      "_view_name": "HTMLView",
-      "description": "",
-      "description_tooltip": null,
-      "layout": "IPY_MODEL_40c89ee3fd1a44bc862269e796735caa",
-      "placeholder": "​",
-      "style": "IPY_MODEL_10e538cd196347cd8ca19d063a1c9f54",
-      "value": "Collecting perturbations: 100%"
-     }
-    },
-    "45aa94cf21174a00b62b64bea6aead78": {
-     "model_module": "@jupyter-widgets/controls",
-     "model_name": "FloatProgressModel",
-     "model_module_version": "1.5.0",
-     "state": {
-      "_dom_classes": [],
-      "_model_module": "@jupyter-widgets/controls",
-      "_model_module_version": "1.5.0",
-      "_model_name": "FloatProgressModel",
-      "_view_count": null,
-      "_view_module": "@jupyter-widgets/controls",
-      "_view_module_version": "1.5.0",
-      "_view_name": "ProgressView",
-      "bar_style": "success",
-      "description": "",
-      "description_tooltip": null,
-      "layout": "IPY_MODEL_ca0f19c3717448f39ededbaa80cda438",
-      "max": 10,
-      "min": 0,
-      "orientation": "horizontal",
-      "style": "IPY_MODEL_aa2ba3006de2405bb436266aab9a9078",
-      "value": 10
-     }
-    },
-    "fcdf278a18854f91a43038974ed1e889": {
-     "model_module": "@jupyter-widgets/controls",
-     "model_name": "HTMLModel",
-     "model_module_version": "1.5.0",
-     "state": {
-      "_dom_classes": [],
-      "_model_module": "@jupyter-widgets/controls",
-      "_model_module_version": "1.5.0",
-      "_model_name": "HTMLModel",
-      "_view_count": null,
-      "_view_module": "@jupyter-widgets/controls",
-      "_view_module_version": "1.5.0",
-      "_view_name": "HTMLView",
-      "description": "",
-      "description_tooltip": null,
-      "layout": "IPY_MODEL_003944c19322432f8fbffe4a95bb5a3d",
-      "placeholder": "​",
-      "style": "IPY_MODEL_e6dd9deda3954d80b142479e38bf3038",
-      "value": " 10/10 [00:00&lt;00:00, 11.89it/s]"
-     }
-    },
-    "9030788e3fca4a1593814b2513a8a72b": {
-     "model_module": "@jupyter-widgets/base",
-     "model_name": "LayoutModel",
-     "model_module_version": "1.2.0",
-     "state": {
-      "_model_module": "@jupyter-widgets/base",
-      "_model_module_version": "1.2.0",
-      "_model_name": "LayoutModel",
-      "_view_count": null,
-      "_view_module": "@jupyter-widgets/base",
-      "_view_module_version": "1.2.0",
-      "_view_name": "LayoutView",
-      "align_content": null,
-      "align_items": null,
-      "align_self": null,
-      "border": null,
-      "bottom": null,
-      "display": null,
-      "flex": null,
-      "flex_flow": null,
-      "grid_area": null,
-      "grid_auto_columns": null,
-      "grid_auto_flow": null,
-      "grid_auto_rows": null,
-      "grid_column": null,
-      "grid_gap": null,
-      "grid_row": null,
-      "grid_template_areas": null,
-      "grid_template_columns": null,
-      "grid_template_rows": null,
-      "height": null,
-      "justify_content": null,
-      "justify_items": null,
-      "left": null,
-      "margin": null,
-      "max_height": null,
-      "max_width": null,
-      "min_height": null,
-      "min_width": null,
-      "object_fit": null,
-      "object_position": null,
-      "order": null,
-      "overflow": null,
-      "overflow_x": null,
-      "overflow_y": null,
-      "padding": null,
-      "right": null,
-      "top": null,
-      "visibility": null,
-      "width": null
-     }
-    },
-    "40c89ee3fd1a44bc862269e796735caa": {
-     "model_module": "@jupyter-widgets/base",
-     "model_name": "LayoutModel",
-     "model_module_version": "1.2.0",
-     "state": {
-      "_model_module": "@jupyter-widgets/base",
-      "_model_module_version": "1.2.0",
-      "_model_name": "LayoutModel",
-      "_view_count": null,
-      "_view_module": "@jupyter-widgets/base",
-      "_view_module_version": "1.2.0",
-      "_view_name": "LayoutView",
-      "align_content": null,
-      "align_items": null,
-      "align_self": null,
-      "border": null,
-      "bottom": null,
-      "display": null,
-      "flex": null,
-      "flex_flow": null,
-      "grid_area": null,
-      "grid_auto_columns": null,
-      "grid_auto_flow": null,
-      "grid_auto_rows": null,
-      "grid_column": null,
-      "grid_gap": null,
-      "grid_row": null,
-      "grid_template_areas": null,
-      "grid_template_columns": null,
-      "grid_template_rows": null,
-      "height": null,
-      "justify_content": null,
-      "justify_items": null,
-      "left": null,
-      "margin": null,
-      "max_height": null,
-      "max_width": null,
-      "min_height": null,
-      "min_width": null,
-      "object_fit": null,
-      "object_position": null,
-      "order": null,
-      "overflow": null,
-      "overflow_x": null,
-      "overflow_y": null,
-      "padding": null,
-      "right": null,
-      "top": null,
-      "visibility": null,
-      "width": null
-     }
-    },
-    "10e538cd196347cd8ca19d063a1c9f54": {
-     "model_module": "@jupyter-widgets/controls",
-     "model_name": "DescriptionStyleModel",
-     "model_module_version": "1.5.0",
-     "state": {
-      "_model_module": "@jupyter-widgets/controls",
-      "_model_module_version": "1.5.0",
-      "_model_name": "DescriptionStyleModel",
-      "_view_count": null,
-      "_view_module": "@jupyter-widgets/base",
-      "_view_module_version": "1.2.0",
-      "_view_name": "StyleView",
-      "description_width": ""
-     }
-    },
-    "ca0f19c3717448f39ededbaa80cda438": {
-     "model_module": "@jupyter-widgets/base",
-     "model_name": "LayoutModel",
-     "model_module_version": "1.2.0",
-     "state": {
-      "_model_module": "@jupyter-widgets/base",
-      "_model_module_version": "1.2.0",
-      "_model_name": "LayoutModel",
-      "_view_count": null,
-      "_view_module": "@jupyter-widgets/base",
-      "_view_module_version": "1.2.0",
-      "_view_name": "LayoutView",
-      "align_content": null,
-      "align_items": null,
-      "align_self": null,
-      "border": null,
-      "bottom": null,
-      "display": null,
-      "flex": null,
-      "flex_flow": null,
-      "grid_area": null,
-      "grid_auto_columns": null,
-      "grid_auto_flow": null,
-      "grid_auto_rows": null,
-      "grid_column": null,
-      "grid_gap": null,
-      "grid_row": null,
-      "grid_template_areas": null,
-      "grid_template_columns": null,
-      "grid_template_rows": null,
-      "height": null,
-      "justify_content": null,
-      "justify_items": null,
-      "left": null,
-      "margin": null,
-      "max_height": null,
-      "max_width": null,
-      "min_height": null,
-      "min_width": null,
-      "object_fit": null,
-      "object_position": null,
-      "order": null,
-      "overflow": null,
-      "overflow_x": null,
-      "overflow_y": null,
-      "padding": null,
-      "right": null,
-      "top": null,
-      "visibility": null,
-      "width": null
-     }
-    },
-    "aa2ba3006de2405bb436266aab9a9078": {
-     "model_module": "@jupyter-widgets/controls",
-     "model_name": "ProgressStyleModel",
-     "model_module_version": "1.5.0",
-     "state": {
-      "_model_module": "@jupyter-widgets/controls",
-      "_model_module_version": "1.5.0",
-      "_model_name": "ProgressStyleModel",
-      "_view_count": null,
-      "_view_module": "@jupyter-widgets/base",
-      "_view_module_version": "1.2.0",
-      "_view_name": "StyleView",
-      "bar_color": null,
-      "description_width": ""
-     }
-    },
-    "003944c19322432f8fbffe4a95bb5a3d": {
-     "model_module": "@jupyter-widgets/base",
-     "model_name": "LayoutModel",
-     "model_module_version": "1.2.0",
-     "state": {
-      "_model_module": "@jupyter-widgets/base",
-      "_model_module_version": "1.2.0",
-      "_model_name": "LayoutModel",
-      "_view_count": null,
-      "_view_module": "@jupyter-widgets/base",
-      "_view_module_version": "1.2.0",
-      "_view_name": "LayoutView",
-      "align_content": null,
-      "align_items": null,
-      "align_self": null,
-      "border": null,
-      "bottom": null,
-      "display": null,
-      "flex": null,
-      "flex_flow": null,
-      "grid_area": null,
-      "grid_auto_columns": null,
-      "grid_auto_flow": null,
-      "grid_auto_rows": null,
-      "grid_column": null,
-      "grid_gap": null,
-      "grid_row": null,
-      "grid_template_areas": null,
-      "grid_template_columns": null,
-      "grid_template_rows": null,
-      "height": null,
-      "justify_content": null,
-      "justify_items": null,
-      "left": null,
-      "margin": null,
-      "max_height": null,
-      "max_width": null,
-      "min_height": null,
-      "min_width": null,
-      "object_fit": null,
-      "object_position": null,
-      "order": null,
-      "overflow": null,
-      "overflow_x": null,
-      "overflow_y": null,
-      "padding": null,
-      "right": null,
-      "top": null,
-      "visibility": null,
-      "width": null
-     }
-    },
-    "e6dd9deda3954d80b142479e38bf3038": {
-     "model_module": "@jupyter-widgets/controls",
-     "model_name": "DescriptionStyleModel",
-     "model_module_version": "1.5.0",
-     "state": {
-      "_model_module": "@jupyter-widgets/controls",
-      "_model_module_version": "1.5.0",
-      "_model_name": "DescriptionStyleModel",
-      "_view_count": null,
-      "_view_module": "@jupyter-widgets/base",
-      "_view_module_version": "1.2.0",
-      "_view_name": "StyleView",
-      "description_width": ""
-     }
-    },
-    "1926e91fc75243f79ae5876479ad28f9": {
-     "model_module": "@jupyter-widgets/controls",
-     "model_name": "HBoxModel",
-     "model_module_version": "1.5.0",
-     "state": {
-      "_dom_classes": [],
-      "_model_module": "@jupyter-widgets/controls",
-      "_model_module_version": "1.5.0",
-      "_model_name": "HBoxModel",
-      "_view_count": null,
-      "_view_module": "@jupyter-widgets/controls",
-      "_view_module_version": "1.5.0",
-      "_view_name": "HBoxView",
-      "box_style": "",
-      "children": [
-       "IPY_MODEL_8cdb7c0249424c25aec755bcb3f5f817",
-       "IPY_MODEL_d8d15329978c432b9542b00518fb6091",
-       "IPY_MODEL_c4dc3aafedcf421a8104cfbc346ff63c"
-      ],
-      "layout": "IPY_MODEL_b2ddc8ca76584d0dbcdb8695cde9bda4"
-     }
-    },
-    "8cdb7c0249424c25aec755bcb3f5f817": {
-     "model_module": "@jupyter-widgets/controls",
-     "model_name": "HTMLModel",
-     "model_module_version": "1.5.0",
-     "state": {
-      "_dom_classes": [],
-      "_model_module": "@jupyter-widgets/controls",
-      "_model_module_version": "1.5.0",
-      "_model_name": "HTMLModel",
-      "_view_count": null,
-      "_view_module": "@jupyter-widgets/controls",
-      "_view_module_version": "1.5.0",
-      "_view_name": "HTMLView",
-      "description": "",
-      "description_tooltip": null,
-      "layout": "IPY_MODEL_300ae80e21384502b96438404812e42d",
-      "placeholder": "​",
-      "style": "IPY_MODEL_882d8598f9514fc3ad4198c3056e5894",
-      "value": "Collecting explanations: 100%"
-     }
-    },
-    "d8d15329978c432b9542b00518fb6091": {
-     "model_module": "@jupyter-widgets/controls",
-     "model_name": "FloatProgressModel",
-     "model_module_version": "1.5.0",
-     "state": {
-      "_dom_classes": [],
-      "_model_module": "@jupyter-widgets/controls",
-      "_model_module_version": "1.5.0",
-      "_model_name": "FloatProgressModel",
-      "_view_count": null,
-      "_view_module": "@jupyter-widgets/controls",
-      "_view_module_version": "1.5.0",
-      "_view_name": "ProgressView",
-      "bar_style": "success",
-      "description": "",
-      "description_tooltip": null,
-      "layout": "IPY_MODEL_54e79e8c93114ab5bd86552175596997",
-      "max": 9,
-      "min": 0,
-      "orientation": "horizontal",
-      "style": "IPY_MODEL_aec26073910f448f972a23ed85a1c715",
-      "value": 9
-     }
-    },
-    "c4dc3aafedcf421a8104cfbc346ff63c": {
-     "model_module": "@jupyter-widgets/controls",
-     "model_name": "HTMLModel",
-     "model_module_version": "1.5.0",
-     "state": {
-      "_dom_classes": [],
-      "_model_module": "@jupyter-widgets/controls",
-      "_model_module_version": "1.5.0",
-      "_model_name": "HTMLModel",
-      "_view_count": null,
-      "_view_module": "@jupyter-widgets/controls",
-      "_view_module_version": "1.5.0",
-      "_view_name": "HTMLView",
-      "description": "",
-      "description_tooltip": null,
-      "layout": "IPY_MODEL_2827b86158c54ac3a8c58cb64ffb294a",
-      "placeholder": "​",
-      "style": "IPY_MODEL_8e3622d839a74245aaf4ef67856c35a5",
-      "value": " 9/9 [00:11&lt;00:00,  1.25s/it]"
-     }
-    },
-    "b2ddc8ca76584d0dbcdb8695cde9bda4": {
-     "model_module": "@jupyter-widgets/base",
-     "model_name": "LayoutModel",
-     "model_module_version": "1.2.0",
-     "state": {
-      "_model_module": "@jupyter-widgets/base",
-      "_model_module_version": "1.2.0",
-      "_model_name": "LayoutModel",
-      "_view_count": null,
-      "_view_module": "@jupyter-widgets/base",
-      "_view_module_version": "1.2.0",
-      "_view_name": "LayoutView",
-      "align_content": null,
-      "align_items": null,
-      "align_self": null,
-      "border": null,
-      "bottom": null,
-      "display": null,
-      "flex": null,
-      "flex_flow": null,
-      "grid_area": null,
-      "grid_auto_columns": null,
-      "grid_auto_flow": null,
-      "grid_auto_rows": null,
-      "grid_column": null,
-      "grid_gap": null,
-      "grid_row": null,
-      "grid_template_areas": null,
-      "grid_template_columns": null,
-      "grid_template_rows": null,
-      "height": null,
-      "justify_content": null,
-      "justify_items": null,
-      "left": null,
-      "margin": null,
-      "max_height": null,
-      "max_width": null,
-      "min_height": null,
-      "min_width": null,
-      "object_fit": null,
-      "object_position": null,
-      "order": null,
-      "overflow": null,
-      "overflow_x": null,
-      "overflow_y": null,
-      "padding": null,
-      "right": null,
-      "top": null,
-      "visibility": null,
-      "width": null
-     }
-    },
-    "300ae80e21384502b96438404812e42d": {
-     "model_module": "@jupyter-widgets/base",
-     "model_name": "LayoutModel",
-     "model_module_version": "1.2.0",
-     "state": {
-      "_model_module": "@jupyter-widgets/base",
-      "_model_module_version": "1.2.0",
-      "_model_name": "LayoutModel",
-      "_view_count": null,
-      "_view_module": "@jupyter-widgets/base",
-      "_view_module_version": "1.2.0",
-      "_view_name": "LayoutView",
-      "align_content": null,
-      "align_items": null,
-      "align_self": null,
-      "border": null,
-      "bottom": null,
-      "display": null,
-      "flex": null,
-      "flex_flow": null,
-      "grid_area": null,
-      "grid_auto_columns": null,
-      "grid_auto_flow": null,
-      "grid_auto_rows": null,
-      "grid_column": null,
-      "grid_gap": null,
-      "grid_row": null,
-      "grid_template_areas": null,
-      "grid_template_columns": null,
-      "grid_template_rows": null,
-      "height": null,
-      "justify_content": null,
-      "justify_items": null,
-      "left": null,
-      "margin": null,
-      "max_height": null,
-      "max_width": null,
-      "min_height": null,
-      "min_width": null,
-      "object_fit": null,
-      "object_position": null,
-      "order": null,
-      "overflow": null,
-      "overflow_x": null,
-      "overflow_y": null,
-      "padding": null,
-      "right": null,
-      "top": null,
-      "visibility": null,
-      "width": null
-     }
-    },
-    "882d8598f9514fc3ad4198c3056e5894": {
-     "model_module": "@jupyter-widgets/controls",
-     "model_name": "DescriptionStyleModel",
-     "model_module_version": "1.5.0",
-     "state": {
-      "_model_module": "@jupyter-widgets/controls",
-      "_model_module_version": "1.5.0",
-      "_model_name": "DescriptionStyleModel",
-      "_view_count": null,
-      "_view_module": "@jupyter-widgets/base",
-      "_view_module_version": "1.2.0",
-      "_view_name": "StyleView",
-      "description_width": ""
-     }
-    },
-    "54e79e8c93114ab5bd86552175596997": {
-     "model_module": "@jupyter-widgets/base",
-     "model_name": "LayoutModel",
-     "model_module_version": "1.2.0",
-     "state": {
-      "_model_module": "@jupyter-widgets/base",
-      "_model_module_version": "1.2.0",
-      "_model_name": "LayoutModel",
-      "_view_count": null,
-      "_view_module": "@jupyter-widgets/base",
-      "_view_module_version": "1.2.0",
-      "_view_name": "LayoutView",
-      "align_content": null,
-      "align_items": null,
-      "align_self": null,
-      "border": null,
-      "bottom": null,
-      "display": null,
-      "flex": null,
-      "flex_flow": null,
-      "grid_area": null,
-      "grid_auto_columns": null,
-      "grid_auto_flow": null,
-      "grid_auto_rows": null,
-      "grid_column": null,
-      "grid_gap": null,
-      "grid_row": null,
-      "grid_template_areas": null,
-      "grid_template_columns": null,
-      "grid_template_rows": null,
-      "height": null,
-      "justify_content": null,
-      "justify_items": null,
-      "left": null,
-      "margin": null,
-      "max_height": null,
-      "max_width": null,
-      "min_height": null,
-      "min_width": null,
-      "object_fit": null,
-      "object_position": null,
-      "order": null,
-      "overflow": null,
-      "overflow_x": null,
-      "overflow_y": null,
-      "padding": null,
-      "right": null,
-      "top": null,
-      "visibility": null,
-      "width": null
-     }
-    },
-    "aec26073910f448f972a23ed85a1c715": {
-     "model_module": "@jupyter-widgets/controls",
-     "model_name": "ProgressStyleModel",
-     "model_module_version": "1.5.0",
-     "state": {
-      "_model_module": "@jupyter-widgets/controls",
-      "_model_module_version": "1.5.0",
-      "_model_name": "ProgressStyleModel",
-      "_view_count": null,
-      "_view_module": "@jupyter-widgets/base",
-      "_view_module_version": "1.2.0",
-      "_view_name": "StyleView",
-      "bar_color": null,
-      "description_width": ""
-     }
-    },
-    "2827b86158c54ac3a8c58cb64ffb294a": {
-     "model_module": "@jupyter-widgets/base",
-     "model_name": "LayoutModel",
-     "model_module_version": "1.2.0",
-     "state": {
-      "_model_module": "@jupyter-widgets/base",
-      "_model_module_version": "1.2.0",
-      "_model_name": "LayoutModel",
-      "_view_count": null,
-      "_view_module": "@jupyter-widgets/base",
-      "_view_module_version": "1.2.0",
-      "_view_name": "LayoutView",
-      "align_content": null,
-      "align_items": null,
-      "align_self": null,
-      "border": null,
-      "bottom": null,
-      "display": null,
-      "flex": null,
-      "flex_flow": null,
-      "grid_area": null,
-      "grid_auto_columns": null,
-      "grid_auto_flow": null,
-      "grid_auto_rows": null,
-      "grid_column": null,
-      "grid_gap": null,
-      "grid_row": null,
-      "grid_template_areas": null,
-      "grid_template_columns": null,
-      "grid_template_rows": null,
-      "height": null,
-      "justify_content": null,
-      "justify_items": null,
-      "left": null,
-      "margin": null,
-      "max_height": null,
-      "max_width": null,
-      "min_height": null,
-      "min_width": null,
-      "object_fit": null,
-      "object_position": null,
-      "order": null,
-      "overflow": null,
-      "overflow_x": null,
-      "overflow_y": null,
-      "padding": null,
-      "right": null,
-      "top": null,
-      "visibility": null,
-      "width": null
-     }
-    },
-    "8e3622d839a74245aaf4ef67856c35a5": {
-     "model_module": "@jupyter-widgets/controls",
-     "model_name": "DescriptionStyleModel",
-     "model_module_version": "1.5.0",
-     "state": {
-      "_model_module": "@jupyter-widgets/controls",
-      "_model_module_version": "1.5.0",
-      "_model_name": "DescriptionStyleModel",
-      "_view_count": null,
-      "_view_module": "@jupyter-widgets/base",
-      "_view_module_version": "1.2.0",
-      "_view_name": "StyleView",
-      "description_width": ""
-     }
-    },
-    "1e9e1569314341338a6067afd7ac91ed": {
-     "model_module": "@jupyter-widgets/controls",
-     "model_name": "HBoxModel",
-     "model_module_version": "1.5.0",
-     "state": {
-      "_dom_classes": [],
-      "_model_module": "@jupyter-widgets/controls",
-      "_model_module_version": "1.5.0",
-      "_model_name": "HBoxModel",
-      "_view_count": null,
-      "_view_module": "@jupyter-widgets/controls",
-      "_view_module_version": "1.5.0",
-      "_view_name": "HBoxView",
-      "box_style": "",
-      "children": [
-       "IPY_MODEL_9036582bde6b458e8b480d01b79e5698",
-       "IPY_MODEL_0b8c5c5ef635404e9a4f62215357a6b0",
-       "IPY_MODEL_ec519180813449e7829b106f5924b06f"
-      ],
-      "layout": "IPY_MODEL_bda5020fb43347e381bfca3dc6efcfd4"
-     }
-    },
-    "9036582bde6b458e8b480d01b79e5698": {
-     "model_module": "@jupyter-widgets/controls",
-     "model_name": "HTMLModel",
-     "model_module_version": "1.5.0",
-     "state": {
-      "_dom_classes": [],
-      "_model_module": "@jupyter-widgets/controls",
-      "_model_module_version": "1.5.0",
-      "_model_name": "HTMLModel",
-      "_view_count": null,
-      "_view_module": "@jupyter-widgets/controls",
-      "_view_module_version": "1.5.0",
-      "_view_name": "HTMLView",
-      "description": "",
-      "description_tooltip": null,
-      "layout": "IPY_MODEL_0f69d704bc68421fa9f2fa7e408c3a55",
-      "placeholder": "​",
-      "style": "IPY_MODEL_0c419d27bcdf430f924fc77136369a06",
-      "value": "Collecting perturbations: 100%"
-     }
-    },
-    "0b8c5c5ef635404e9a4f62215357a6b0": {
-     "model_module": "@jupyter-widgets/controls",
-     "model_name": "FloatProgressModel",
-     "model_module_version": "1.5.0",
-     "state": {
-      "_dom_classes": [],
-      "_model_module": "@jupyter-widgets/controls",
-      "_model_module_version": "1.5.0",
-      "_model_name": "FloatProgressModel",
-      "_view_count": null,
-      "_view_module": "@jupyter-widgets/controls",
-      "_view_module_version": "1.5.0",
-      "_view_name": "ProgressView",
-      "bar_style": "success",
-      "description": "",
-      "description_tooltip": null,
-      "layout": "IPY_MODEL_2517cb5f22644bc1b101c0b5f4d77da8",
-      "max": 10,
-      "min": 0,
-      "orientation": "horizontal",
-      "style": "IPY_MODEL_0a615f111c064d96a2cd880a4872fad6",
-      "value": 10
-     }
-    },
-    "ec519180813449e7829b106f5924b06f": {
-     "model_module": "@jupyter-widgets/controls",
-     "model_name": "HTMLModel",
-     "model_module_version": "1.5.0",
-     "state": {
-      "_dom_classes": [],
-      "_model_module": "@jupyter-widgets/controls",
-      "_model_module_version": "1.5.0",
-      "_model_name": "HTMLModel",
-      "_view_count": null,
-      "_view_module": "@jupyter-widgets/controls",
-      "_view_module_version": "1.5.0",
-      "_view_name": "HTMLView",
-      "description": "",
-      "description_tooltip": null,
-      "layout": "IPY_MODEL_fb7f07b1d4054ff197e3baf38d316c00",
-      "placeholder": "​",
-      "style": "IPY_MODEL_cf73c69dbf3f41aa8d9f38f99c28a476",
-      "value": " 10/10 [00:00&lt;00:00, 12.14it/s]"
-     }
-    },
-    "bda5020fb43347e381bfca3dc6efcfd4": {
-     "model_module": "@jupyter-widgets/base",
-     "model_name": "LayoutModel",
-     "model_module_version": "1.2.0",
-     "state": {
-      "_model_module": "@jupyter-widgets/base",
-      "_model_module_version": "1.2.0",
-      "_model_name": "LayoutModel",
-      "_view_count": null,
-      "_view_module": "@jupyter-widgets/base",
-      "_view_module_version": "1.2.0",
-      "_view_name": "LayoutView",
-      "align_content": null,
-      "align_items": null,
-      "align_self": null,
-      "border": null,
-      "bottom": null,
-      "display": null,
-      "flex": null,
-      "flex_flow": null,
-      "grid_area": null,
-      "grid_auto_columns": null,
-      "grid_auto_flow": null,
-      "grid_auto_rows": null,
-      "grid_column": null,
-      "grid_gap": null,
-      "grid_row": null,
-      "grid_template_areas": null,
-      "grid_template_columns": null,
-      "grid_template_rows": null,
-      "height": null,
-      "justify_content": null,
-      "justify_items": null,
-      "left": null,
-      "margin": null,
-      "max_height": null,
-      "max_width": null,
-      "min_height": null,
-      "min_width": null,
-      "object_fit": null,
-      "object_position": null,
-      "order": null,
-      "overflow": null,
-      "overflow_x": null,
-      "overflow_y": null,
-      "padding": null,
-      "right": null,
-      "top": null,
-      "visibility": null,
-      "width": null
-     }
-    },
-    "0f69d704bc68421fa9f2fa7e408c3a55": {
-     "model_module": "@jupyter-widgets/base",
-     "model_name": "LayoutModel",
-     "model_module_version": "1.2.0",
-     "state": {
-      "_model_module": "@jupyter-widgets/base",
-      "_model_module_version": "1.2.0",
-      "_model_name": "LayoutModel",
-      "_view_count": null,
-      "_view_module": "@jupyter-widgets/base",
-      "_view_module_version": "1.2.0",
-      "_view_name": "LayoutView",
-      "align_content": null,
-      "align_items": null,
-      "align_self": null,
-      "border": null,
-      "bottom": null,
-      "display": null,
-      "flex": null,
-      "flex_flow": null,
-      "grid_area": null,
-      "grid_auto_columns": null,
-      "grid_auto_flow": null,
-      "grid_auto_rows": null,
-      "grid_column": null,
-      "grid_gap": null,
-      "grid_row": null,
-      "grid_template_areas": null,
-      "grid_template_columns": null,
-      "grid_template_rows": null,
-      "height": null,
-      "justify_content": null,
-      "justify_items": null,
-      "left": null,
-      "margin": null,
-      "max_height": null,
-      "max_width": null,
-      "min_height": null,
-      "min_width": null,
-      "object_fit": null,
-      "object_position": null,
-      "order": null,
-      "overflow": null,
-      "overflow_x": null,
-      "overflow_y": null,
-      "padding": null,
-      "right": null,
-      "top": null,
-      "visibility": null,
-      "width": null
-     }
-    },
-    "0c419d27bcdf430f924fc77136369a06": {
-     "model_module": "@jupyter-widgets/controls",
-     "model_name": "DescriptionStyleModel",
-     "model_module_version": "1.5.0",
-     "state": {
-      "_model_module": "@jupyter-widgets/controls",
-      "_model_module_version": "1.5.0",
-      "_model_name": "DescriptionStyleModel",
-      "_view_count": null,
-      "_view_module": "@jupyter-widgets/base",
-      "_view_module_version": "1.2.0",
-      "_view_name": "StyleView",
-      "description_width": ""
-     }
-    },
-    "2517cb5f22644bc1b101c0b5f4d77da8": {
-     "model_module": "@jupyter-widgets/base",
-     "model_name": "LayoutModel",
-     "model_module_version": "1.2.0",
-     "state": {
-      "_model_module": "@jupyter-widgets/base",
-      "_model_module_version": "1.2.0",
-      "_model_name": "LayoutModel",
-      "_view_count": null,
-      "_view_module": "@jupyter-widgets/base",
-      "_view_module_version": "1.2.0",
-      "_view_name": "LayoutView",
-      "align_content": null,
-      "align_items": null,
-      "align_self": null,
-      "border": null,
-      "bottom": null,
-      "display": null,
-      "flex": null,
-      "flex_flow": null,
-      "grid_area": null,
-      "grid_auto_columns": null,
-      "grid_auto_flow": null,
-      "grid_auto_rows": null,
-      "grid_column": null,
-      "grid_gap": null,
-      "grid_row": null,
-      "grid_template_areas": null,
-      "grid_template_columns": null,
-      "grid_template_rows": null,
-      "height": null,
-      "justify_content": null,
-      "justify_items": null,
-      "left": null,
-      "margin": null,
-      "max_height": null,
-      "max_width": null,
-      "min_height": null,
-      "min_width": null,
-      "object_fit": null,
-      "object_position": null,
-      "order": null,
-      "overflow": null,
-      "overflow_x": null,
-      "overflow_y": null,
-      "padding": null,
-      "right": null,
-      "top": null,
-      "visibility": null,
-      "width": null
-     }
-    },
-    "0a615f111c064d96a2cd880a4872fad6": {
-     "model_module": "@jupyter-widgets/controls",
-     "model_name": "ProgressStyleModel",
-     "model_module_version": "1.5.0",
-     "state": {
-      "_model_module": "@jupyter-widgets/controls",
-      "_model_module_version": "1.5.0",
-      "_model_name": "ProgressStyleModel",
-      "_view_count": null,
-      "_view_module": "@jupyter-widgets/base",
-      "_view_module_version": "1.2.0",
-      "_view_name": "StyleView",
-      "bar_color": null,
-      "description_width": ""
-     }
-    },
-    "fb7f07b1d4054ff197e3baf38d316c00": {
-     "model_module": "@jupyter-widgets/base",
-     "model_name": "LayoutModel",
-     "model_module_version": "1.2.0",
-     "state": {
-      "_model_module": "@jupyter-widgets/base",
-      "_model_module_version": "1.2.0",
-      "_model_name": "LayoutModel",
-      "_view_count": null,
-      "_view_module": "@jupyter-widgets/base",
-      "_view_module_version": "1.2.0",
-      "_view_name": "LayoutView",
-      "align_content": null,
-      "align_items": null,
-      "align_self": null,
-      "border": null,
-      "bottom": null,
-      "display": null,
-      "flex": null,
-      "flex_flow": null,
-      "grid_area": null,
-      "grid_auto_columns": null,
-      "grid_auto_flow": null,
-      "grid_auto_rows": null,
-      "grid_column": null,
-      "grid_gap": null,
-      "grid_row": null,
-      "grid_template_areas": null,
-      "grid_template_columns": null,
-      "grid_template_rows": null,
-      "height": null,
-      "justify_content": null,
-      "justify_items": null,
-      "left": null,
-      "margin": null,
-      "max_height": null,
-      "max_width": null,
-      "min_height": null,
-      "min_width": null,
-      "object_fit": null,
-      "object_position": null,
-      "order": null,
-      "overflow": null,
-      "overflow_x": null,
-      "overflow_y": null,
-      "padding": null,
-      "right": null,
-      "top": null,
-      "visibility": null,
-      "width": null
-     }
-    },
-    "cf73c69dbf3f41aa8d9f38f99c28a476": {
-     "model_module": "@jupyter-widgets/controls",
-     "model_name": "DescriptionStyleModel",
-     "model_module_version": "1.5.0",
-     "state": {
-      "_model_module": "@jupyter-widgets/controls",
-      "_model_module_version": "1.5.0",
-      "_model_name": "DescriptionStyleModel",
-      "_view_count": null,
-      "_view_module": "@jupyter-widgets/base",
-      "_view_module_version": "1.2.0",
-      "_view_name": "StyleView",
-      "description_width": ""
-     }
-    },
-    "5db7ddbc5f1d4ca5b1c13ed16c8f95bc": {
-     "model_module": "@jupyter-widgets/controls",
-     "model_name": "HBoxModel",
-     "model_module_version": "1.5.0",
-     "state": {
-      "_dom_classes": [],
-      "_model_module": "@jupyter-widgets/controls",
-      "_model_module_version": "1.5.0",
-      "_model_name": "HBoxModel",
-      "_view_count": null,
-      "_view_module": "@jupyter-widgets/controls",
-      "_view_module_version": "1.5.0",
-      "_view_name": "HBoxView",
-      "box_style": "",
-      "children": [
-       "IPY_MODEL_be2e7c506bf04a6aa9103643641528f5",
-       "IPY_MODEL_d917ddc2b06e4db9a2e30e9eb5fcc000",
-       "IPY_MODEL_35b575db01ad4806b2de96f7d799d287"
-      ],
-      "layout": "IPY_MODEL_6721e9c247f4419c9b13dc9cc4f66a33"
-     }
-    },
-    "be2e7c506bf04a6aa9103643641528f5": {
-     "model_module": "@jupyter-widgets/controls",
-     "model_name": "HTMLModel",
-     "model_module_version": "1.5.0",
-     "state": {
-      "_dom_classes": [],
-      "_model_module": "@jupyter-widgets/controls",
-      "_model_module_version": "1.5.0",
-      "_model_name": "HTMLModel",
-      "_view_count": null,
-      "_view_module": "@jupyter-widgets/controls",
-      "_view_module_version": "1.5.0",
-      "_view_name": "HTMLView",
-      "description": "",
-      "description_tooltip": null,
-      "layout": "IPY_MODEL_729e719cfca54c0f8f3a2b948882e965",
-      "placeholder": "​",
-      "style": "IPY_MODEL_15183e2ad7b54490ab07239ff4997d2d",
-      "value": "Collecting explanations: 100%"
-     }
-    },
-    "d917ddc2b06e4db9a2e30e9eb5fcc000": {
-     "model_module": "@jupyter-widgets/controls",
-     "model_name": "FloatProgressModel",
-     "model_module_version": "1.5.0",
-     "state": {
-      "_dom_classes": [],
-      "_model_module": "@jupyter-widgets/controls",
-      "_model_module_version": "1.5.0",
-      "_model_name": "FloatProgressModel",
-      "_view_count": null,
-      "_view_module": "@jupyter-widgets/controls",
-      "_view_module_version": "1.5.0",
-      "_view_name": "ProgressView",
-      "bar_style": "success",
-      "description": "",
-      "description_tooltip": null,
-      "layout": "IPY_MODEL_10258155181245e581447f690cc4011f",
-      "max": 9,
-      "min": 0,
-      "orientation": "horizontal",
-      "style": "IPY_MODEL_dad6ae5be0464735a35bc4a46f6519e2",
-      "value": 9
-     }
-    },
-    "35b575db01ad4806b2de96f7d799d287": {
-     "model_module": "@jupyter-widgets/controls",
-     "model_name": "HTMLModel",
-     "model_module_version": "1.5.0",
-     "state": {
-      "_dom_classes": [],
-      "_model_module": "@jupyter-widgets/controls",
-      "_model_module_version": "1.5.0",
-      "_model_name": "HTMLModel",
-      "_view_count": null,
-      "_view_module": "@jupyter-widgets/controls",
-      "_view_module_version": "1.5.0",
-      "_view_name": "HTMLView",
-      "description": "",
-      "description_tooltip": null,
-      "layout": "IPY_MODEL_248388c2722648fcb487b528b6dae8d7",
-      "placeholder": "​",
-      "style": "IPY_MODEL_9233dfe5b46b411d95d4bc58e5649e9e",
-      "value": " 9/9 [00:13&lt;00:00,  1.49s/it]"
-     }
-    },
-    "6721e9c247f4419c9b13dc9cc4f66a33": {
-     "model_module": "@jupyter-widgets/base",
-     "model_name": "LayoutModel",
-     "model_module_version": "1.2.0",
-     "state": {
-      "_model_module": "@jupyter-widgets/base",
-      "_model_module_version": "1.2.0",
-      "_model_name": "LayoutModel",
-      "_view_count": null,
-      "_view_module": "@jupyter-widgets/base",
-      "_view_module_version": "1.2.0",
-      "_view_name": "LayoutView",
-      "align_content": null,
-      "align_items": null,
-      "align_self": null,
-      "border": null,
-      "bottom": null,
-      "display": null,
-      "flex": null,
-      "flex_flow": null,
-      "grid_area": null,
-      "grid_auto_columns": null,
-      "grid_auto_flow": null,
-      "grid_auto_rows": null,
-      "grid_column": null,
-      "grid_gap": null,
-      "grid_row": null,
-      "grid_template_areas": null,
-      "grid_template_columns": null,
-      "grid_template_rows": null,
-      "height": null,
-      "justify_content": null,
-      "justify_items": null,
-      "left": null,
-      "margin": null,
-      "max_height": null,
-      "max_width": null,
-      "min_height": null,
-      "min_width": null,
-      "object_fit": null,
-      "object_position": null,
-      "order": null,
-      "overflow": null,
-      "overflow_x": null,
-      "overflow_y": null,
-      "padding": null,
-      "right": null,
-      "top": null,
-      "visibility": null,
-      "width": null
-     }
-    },
-    "729e719cfca54c0f8f3a2b948882e965": {
-     "model_module": "@jupyter-widgets/base",
-     "model_name": "LayoutModel",
-     "model_module_version": "1.2.0",
-     "state": {
-      "_model_module": "@jupyter-widgets/base",
-      "_model_module_version": "1.2.0",
-      "_model_name": "LayoutModel",
-      "_view_count": null,
-      "_view_module": "@jupyter-widgets/base",
-      "_view_module_version": "1.2.0",
-      "_view_name": "LayoutView",
-      "align_content": null,
-      "align_items": null,
-      "align_self": null,
-      "border": null,
-      "bottom": null,
-      "display": null,
-      "flex": null,
-      "flex_flow": null,
-      "grid_area": null,
-      "grid_auto_columns": null,
-      "grid_auto_flow": null,
-      "grid_auto_rows": null,
-      "grid_column": null,
-      "grid_gap": null,
-      "grid_row": null,
-      "grid_template_areas": null,
-      "grid_template_columns": null,
-      "grid_template_rows": null,
-      "height": null,
-      "justify_content": null,
-      "justify_items": null,
-      "left": null,
-      "margin": null,
-      "max_height": null,
-      "max_width": null,
-      "min_height": null,
-      "min_width": null,
-      "object_fit": null,
-      "object_position": null,
-      "order": null,
-      "overflow": null,
-      "overflow_x": null,
-      "overflow_y": null,
-      "padding": null,
-      "right": null,
-      "top": null,
-      "visibility": null,
-      "width": null
-     }
-    },
-    "15183e2ad7b54490ab07239ff4997d2d": {
-     "model_module": "@jupyter-widgets/controls",
-     "model_name": "DescriptionStyleModel",
-     "model_module_version": "1.5.0",
-     "state": {
-      "_model_module": "@jupyter-widgets/controls",
-      "_model_module_version": "1.5.0",
-      "_model_name": "DescriptionStyleModel",
-      "_view_count": null,
-      "_view_module": "@jupyter-widgets/base",
-      "_view_module_version": "1.2.0",
-      "_view_name": "StyleView",
-      "description_width": ""
-     }
-    },
-    "10258155181245e581447f690cc4011f": {
-     "model_module": "@jupyter-widgets/base",
-     "model_name": "LayoutModel",
-     "model_module_version": "1.2.0",
-     "state": {
-      "_model_module": "@jupyter-widgets/base",
-      "_model_module_version": "1.2.0",
-      "_model_name": "LayoutModel",
-      "_view_count": null,
-      "_view_module": "@jupyter-widgets/base",
-      "_view_module_version": "1.2.0",
-      "_view_name": "LayoutView",
-      "align_content": null,
-      "align_items": null,
-      "align_self": null,
-      "border": null,
-      "bottom": null,
-      "display": null,
-      "flex": null,
-      "flex_flow": null,
-      "grid_area": null,
-      "grid_auto_columns": null,
-      "grid_auto_flow": null,
-      "grid_auto_rows": null,
-      "grid_column": null,
-      "grid_gap": null,
-      "grid_row": null,
-      "grid_template_areas": null,
-      "grid_template_columns": null,
-      "grid_template_rows": null,
-      "height": null,
-      "justify_content": null,
-      "justify_items": null,
-      "left": null,
-      "margin": null,
-      "max_height": null,
-      "max_width": null,
-      "min_height": null,
-      "min_width": null,
-      "object_fit": null,
-      "object_position": null,
-      "order": null,
-      "overflow": null,
-      "overflow_x": null,
-      "overflow_y": null,
-      "padding": null,
-      "right": null,
-      "top": null,
-      "visibility": null,
-      "width": null
-     }
-    },
-    "dad6ae5be0464735a35bc4a46f6519e2": {
-     "model_module": "@jupyter-widgets/controls",
-     "model_name": "ProgressStyleModel",
-     "model_module_version": "1.5.0",
-     "state": {
-      "_model_module": "@jupyter-widgets/controls",
-      "_model_module_version": "1.5.0",
-      "_model_name": "ProgressStyleModel",
-      "_view_count": null,
-      "_view_module": "@jupyter-widgets/base",
-      "_view_module_version": "1.2.0",
-      "_view_name": "StyleView",
-      "bar_color": null,
-      "description_width": ""
-     }
-    },
-    "248388c2722648fcb487b528b6dae8d7": {
-     "model_module": "@jupyter-widgets/base",
-     "model_name": "LayoutModel",
-     "model_module_version": "1.2.0",
-     "state": {
-      "_model_module": "@jupyter-widgets/base",
-      "_model_module_version": "1.2.0",
-      "_model_name": "LayoutModel",
-      "_view_count": null,
-      "_view_module": "@jupyter-widgets/base",
-      "_view_module_version": "1.2.0",
-      "_view_name": "LayoutView",
-      "align_content": null,
-      "align_items": null,
-      "align_self": null,
-      "border": null,
-      "bottom": null,
-      "display": null,
-      "flex": null,
-      "flex_flow": null,
-      "grid_area": null,
-      "grid_auto_columns": null,
-      "grid_auto_flow": null,
-      "grid_auto_rows": null,
-      "grid_column": null,
-      "grid_gap": null,
-      "grid_row": null,
-      "grid_template_areas": null,
-      "grid_template_columns": null,
-      "grid_template_rows": null,
-      "height": null,
-      "justify_content": null,
-      "justify_items": null,
-      "left": null,
-      "margin": null,
-      "max_height": null,
-      "max_width": null,
-      "min_height": null,
-      "min_width": null,
-      "object_fit": null,
-      "object_position": null,
-      "order": null,
-      "overflow": null,
-      "overflow_x": null,
-      "overflow_y": null,
-      "padding": null,
-      "right": null,
-      "top": null,
-      "visibility": null,
-      "width": null
-     }
-    },
-    "9233dfe5b46b411d95d4bc58e5649e9e": {
-     "model_module": "@jupyter-widgets/controls",
-     "model_name": "DescriptionStyleModel",
-     "model_module_version": "1.5.0",
-     "state": {
-      "_model_module": "@jupyter-widgets/controls",
-      "_model_module_version": "1.5.0",
-      "_model_name": "DescriptionStyleModel",
-      "_view_count": null,
-      "_view_module": "@jupyter-widgets/base",
-      "_view_module_version": "1.2.0",
-      "_view_name": "StyleView",
-      "description_width": ""
-     }
-    }
-   }
-  },
-  "gpuClass": "standard"
- },
- "nbformat": 4,
- "nbformat_minor": 0
-}
\ No newline at end of file
Index: .gitattributes
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.gitattributes b/.gitattributes
new file mode 100644
--- /dev/null	(date 1681078345877)
+++ b/.gitattributes	(date 1681078345877)
@@ -0,0 +1,1 @@
+tests/assets/distilbert filter=lfs diff=lfs merge=lfs -text
Index: .gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.gitignore b/.gitignore
--- a/.gitignore	(revision c2255b793bae21a32b1274275ae60b44cdd94d7b)
+++ b/.gitignore	(date 1681078345878)
@@ -10,7 +10,6 @@
 *.jpg
 *.jpeg
 *.png
-*.npy
 *.npz
 *.csv
 *.pth
Index: .pre-commit-config.yaml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.pre-commit-config.yaml b/.pre-commit-config.yaml
new file mode 100644
--- /dev/null	(date 1681078345878)
+++ b/.pre-commit-config.yaml	(date 1681078345878)
@@ -0,0 +1,32 @@
+repos:
+  - repo: https://github.com/pre-commit/pre-commit-hooks
+    rev: v4.4.0
+    hooks:
+      - id: check-yaml
+      - id: end-of-file-fixer
+      - id: trailing-whitespace
+      - id: check-added-large-files
+      - id: check-ast
+      - id: check-toml
+      - id: requirements-txt-fixer
+      - id: check-docstring-first
+      #- id: name-tests-test
+      - id: no-commit-to-branch
+  - repo: https://github.com/tox-dev/tox-ini-fmt
+    rev: "1.3.0"
+    hooks:
+      - id: tox-ini-fmt
+        args: [ "tox.ini" ]
+  - repo: https://github.com/psf/black
+    rev: 23.3.0
+    hooks:
+      - id: black
+  - repo: https://github.com/asottile/blacken-docs
+    rev: 1.13.0
+    hooks:
+      - id: blacken-docs
+  - repo: https://github.com/asottile/pyupgrade
+    rev: v3.3.1
+    hooks:
+      - id: pyupgrade
+        args: ["--py38-plus"]
Index: pyproject.toml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pyproject.toml b/pyproject.toml
--- a/pyproject.toml	(revision c2255b793bae21a32b1274275ae60b44cdd94d7b)
+++ b/pyproject.toml	(date 1681078345878)
@@ -152,6 +152,11 @@
     "pandas",
     "xmltodict",
 ]
+nlp = [
+    "nltk>=3.8.1",
+    "nlpaug",
+    "transformers>=4.26.1"
+]
 all = [
     "quantus[tf_explain,zennit,tutorials]"
 ]
@@ -187,6 +192,7 @@
 packages = [
     "quantus",
     "quantus.functions",
+    "quantus.functions.nlp_explanation_func",
     "quantus.helpers",
     "quantus.helpers.model",
     "quantus.metrics",
@@ -245,7 +251,10 @@
     "robustness: robustness metrics tests.",
     "localisation: localisation metrics tests.",
     "complexity: complexity metrics tests.",
-    "axiomatic: axiomatic metrics tests."
+    "axiomatic: axiomatic metrics tests.",
+    "nlp: text-classification metrics tests.",
+    "partial_installation: tests with either tensorflow or torch with/or transformers."
+
 ]
 filterwarnings = [
     "error",
@@ -271,3 +280,7 @@
 
 [tool.coverage.report]
 ignore_errors = true
+
+[tool.isort.settings]
+profile = "black"
+known_third_party = ["cachetools", "captum", "cv2", "keras", "matplotlib", "nlpaug", "numpy", "pytest", "pytest_lazyfixture", "pytest_mock", "scipy", "skimage", "sklearn", "tensorflow", "tensorflow_probability", "torch", "tqdm", "transformers", "zennit"]
Index: requirements.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/requirements.txt b/requirements.txt
--- a/requirements.txt	(revision c2255b793bae21a32b1274275ae60b44cdd94d7b)
+++ b/requirements.txt	(date 1681078345885)
@@ -1,7 +1,9 @@
+matplotlib
+nlpaug
+nltk >= 3.8.1
 numpy>=1.23.5
 opencv-python>=4.7.0.68
 scikit-image>=0.19.3
 scikit-learn>=1.2.1
 scipy>=1.10.0
 tqdm
-matplotlib
\ No newline at end of file
Index: requirements_test.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/requirements_test.txt b/requirements_test.txt
--- a/requirements_test.txt	(revision c2255b793bae21a32b1274275ae60b44cdd94d7b)
+++ b/requirements_test.txt	(date 1681078345885)
@@ -1,15 +1,20 @@
-# Include install requirements.
 -r requirements.txt
+captum>=0.6.0
+noisegrad
+pandas
 pytest
 pytest-lazy-fixture
 pytest-mock
-# TensorFlow and co.
+pytest_ordering
+safetensors
+shap
 tensorflow>=2.12.0; sys_platform != 'darwin'
 tensorflow_macos>=2.12.0; sys_platform == 'darwin'
+tensorflow_probability
 tf-explain
-# Torch and co.
+
+tokenizers
 torch>=1.13.1
 torchvision>=0.15.1
+transformers
 zennit>=0.5.0
-captum>=0.6.0
-pandas
\ No newline at end of file
Index: tox.ini
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/tox.ini b/tox.ini
--- a/tox.ini	(revision c2255b793bae21a32b1274275ae60b44cdd94d7b)
+++ b/tox.ini	(date 1681078345895)
@@ -2,9 +2,6 @@
 requires =
     tox>=4.2
 env_list =
-    lint
-    type
-    coverage
     py{310, 39, 38}
 skip_missing_interpreters = true
 
@@ -53,6 +50,62 @@
     pytest_sugar
     pytest_xdist
 commands =
+
+[testenv:tf_only]
+description = only TF is installed
+deps =
+    -rrequirements.txt
+    pytest
+    tensorflow>=2.12; sys_platform != "darwin"
+    tensorflow_macos>=2.12; sys_platform == "darwin"
+commands =
+    pytest -s -v {posargs} {toxinidir}/tests/test_installation_extras.py::test_base_tf_installation
+
+[testenv:torch_only]
+description = only Torch is installed
+deps =
+    -rrequirements.txt
+    captum>=0.6
+    pytest
+    torch>=1.13.1
+    torchvision>=0.15.1
+commands =
+    pytest -s -v {posargs} {toxinidir}/tests/test_installation_extras.py::test_base_torch_installation
+
+[testenv:tf_nlp]
+description = TF for NLP is installed
+deps =
+    -rrequirements.txt
+    nlpaug
+    nltk>=3.8.1
+    pytest
+    tensorflow_probability>=0.19
+    tokenizers
+    transformers>=4.26.1
+    tensorflow>=2.12; sys_platform != "darwin"
+    tensorflow_macos>=2.12; sys_platform == "darwin"
+commands =
+    pytest -s -v {posargs} {toxinidir}/tests/test_installation_extras.py::test_tf_nlp_installation
+
+[testenv:torch_nlp]
+description = Torch for NLP is installed
+deps =
+    -rrequirements.txt
+    captum>=0.6
+    nlpaug
+    nltk>=3.8.1
+    pytest
+    tokenizers
+    torch>=1.13.1
+    transformers>=4.26.1
+commands =
+    pytest -s -v {posargs} {toxinidir}/tests/test_installation_extras.py::test_torch_nlp_installation
+
+[gh-actions]
+python =
+    3.8: py38
+    3.9: py39
+    3.10: py310
 
 [gh]
 python =
diff --git a/tests/assets/cifar10/x_batch.npy b/tests/assets/cifar10/x_batch.npy
new file mode 100644
index 0000000000000000000000000000000000000000..2ac7c589fe5c448244cc68d7978cee1bc379a84f
GIT binary patch
literal 196736
zc%1CL+pacOd8k=^*6Je;a*%@@O#MQO^pX`NAqkMMsZ1~!95%)_#sTb)&lm`V&`Orp
zNvoy0hrWS%DRn9H68aK4X}`}S)l)8hK;0cFE5B@&zA;CQ8k={&8~^9G-u~uy-u<7J
z|Gxb1pZdv%|MI~<f9kIvKK1#Ze)dzZJbdb>zy9a{_Rl~5r}uyT&p-L_-`c<W<A3~@
z5C66OUw;1M|Lwzn{r$(EedXcP|N7sb|J(on>njic$HVXZ?|)hT?cesz_5XP;-~Q;i
z@qBgKzc#<WI={a@&)3rLjd{L4&uQPj|Iu^(?zDg7qv!skd4BKs-P@0+{qN^F?>*e7
z-w$S-w?2A4P5V0It=~JgFYitJJ2U=m#(j6%-<;?B(?0WErhR8VKRnKNVf<;|-ky0*
z|CRaAI1lsPb;jS{IQHMtf4?2una}e6ah&Blvo5~NeBL~^Gf(#OiTTX<E9aN_Z{N*0
zv;XYd^1(dW=h>gzPv$w_S!TbN50BqryyqE*ecGn~KJ6>x{Qa?gqaC=Q|NF;rw)^~@
zb7nq&I?unz^XlK9&)*-8{WkF8Z}NBGo4^0%JZHbQfn)KAbK$+gyPfq6oGsJ7u^!s_
z4*2zE`g5*x-rM7RkNqBa+WvOh(|@5qaQ5Bw|3SuI=e_B_(0|6+FXqWOd&W7z>+Cn@
z&Avgm*tg}KWBUfY&c1D5{^)t@{!f44#`F5h^n33(f7aD;q?gbi#vghJK5oqOo5%JA
zeE-(GKi?I;hVHtbGf&`w^#Ui`-_74YH_y+`6Zix#{%D@_Z<}=#&ilRPGxHtrl5?MZ
z1J6B|nLl_Ay=Gl&@ny~hID{UFN1=njm2{AH;3515yc6EwUjrvg=g+<bADw6W&;IX)
z+i5?+=j`jA`Mcis&v*Ci^DS`2K11iBo5%&ypU|@{^9Mdo>-zd}KI{YVzlZN2PplVs
zu??IrrF-vvd^_~Sb3{IYK7j{+Hc!qOe(;HzC*vaL%zM(+*{|jE(;ql29h>==er^|Z
z(tSZbn{oE+m*Zz2gy){)?7#Gu{eiv(zu1@co_U2{?V+F2;mpT#WPHAxcId`lemC<M
zU&2qf!rQ<Da+mTRa&X$Alef?%zPnuT<u&^t9R{9*FVCfW!I!Ogbiw!6&;j`l^9FwY
z_W0fc9t{0gFQEOuOgnP($O+4g<GFBN;16_w^L@-b)2>_;c-Sg$%=p4TaElxQyk(ys
z%HKJc;L-A>d0xmN(s}satH*V1-3Ry}<9}iPj()^`hHq}A1K<U44&Qk%?cht{mi0#O
z*w7=&FTiX1fB)G3`2xSL@ckq&G0)0@v_~!l9#3-2$RqM^<hIY`efZ_jZO&Ex{e{dM
zJRkXJ3m@TJ)LVcD&K*4`^1S>PJbm>zj^Cel_GgWpxm?KGTjV9^(q1|VJx9)ApV*(`
z*WkroJuvvP1s_jvKIc`s1pPt3m7j9%tcP=FpP`S?t;cyEIfiovPni$xzzgHR-x(+T
zTK>%WqSvz@$TQK?Pk73?l>R`UJD-6=^)%N1C-a;4J~>bRLAU<vJU?-qpZfsbRUUYp
z-<31j&%*Ns{HupTXE;yjJaEf*zc}N!9XKo<M(%}PMebd~r`+e#rSO-%=Td#=m3e}P
z(3w9w&Kr71J9>BR1Iksv`Oq=&NBl=m3*0ZCo_^m>|FK`lpZG5L3*64Wv9Fwq@Hy@3
z3v=%5-}8Oiqpw5Xq~Flp^2eDkd`Ni&`W*Toe}vACo(vqqujC5@SIXz%r+ej3<m$?A
z=#Rno>h(+P0P079f8jRcYgdeY13t1v-g~-ze1GJDJ?$qx0{%wc60U%ozn<sN8{zw}
z<_TT|Z-M`(pU!*8mB7g_W}ew6<vPxV`G<aiFVbD+4?c3<@OR*$aw+@=y$t<)=!tSW
z=QwZ&{3E{rkLn$vOX_{0KPP(^@-5>6*YN$=yTBXmpqxYCYAK(LJj1!3>{nku_TK}C
z$}Jai$ff=BLZ3Rdho5r(59PnHdu*{kY_SWd_eal{-m>m5r2VUDhu+4{2*1Al!?cIq
zKm2m$4_zEMT*s~seULA4ew_F0zi`aDDksy9d|Q0SE(l!0{|3M1kKozkM^E(v=;1ey
z?Q8Vzhr-pB9Vu|N2Y%M*<H}dnYi6I<3;%`fwJ+j#DBlPk!Ke3(tG%UmgV@tb&y{o7
zhwzs*_TjDV(Dm;f`$6}%+67+BGxjFn{KO{)UzDrB59liN2YL(NU_YzB+~@C+chEzX
z(`Fs&mB26OTfBfjgf95q?7Q-I?Z3!rtSfqocBGuU@^I~+7kc_r+o4xi_Nd4Mz`t@x
z?dt45^cX)Wel+wR;QXTfcAxPhNBCXNVa~IBXNw=RdYk^x^cNn`N0Afa@2K3WoG|)O
z<u>Jn=<T)xKgj1_Jg&=g$9~9qBliO5wJQq`wg0d`(RcRnN4~oS-k{^p<A>F50UfXX
z6L^apBmSZ%#%=(ecmHO;Z;=xUpOq`t%GK<5<ftwFBk{QVLx1?}eSSmdq5sofzrm^f
zjpKUP_*3eC^t+Km;1_HB8je%>Eqb?q2hM?i@Ro6qCpgDfj_Y#Ykl%qf==#Xj`1hCC
zr5*;Z(5sYN;iusBz|}*?0p4dmJ@<#v7wQjWoGtd++t24W<ITL#FP`T;`1I4yrr-4U
zeBjHmPfG8g|M-Jq7jnIYTliAx`4yZ``&02N{)Ij8U;3~AG4U;&zxLkfAL_ZaSKZSN
zJ)id4v)9U7&=2O#`eO%!{-}>99!R|ae5m~-@&o$p6Z$6eopV_S-qcs-+@F7z{&UW^
z83#Pr0$0-e>HmcMANYNqcI17|hk4rnN5}a*hyOeS|L|?_iT*Pm_7^--uOdFG_B!Od
z`gamXA)SvuYtMO}{A<KHT+r?3jI%_(s=iSEBK&`F{JwVTY2PE~h%bqcV&Cf@JNX~M
z_wOBlYqx{GBX0~HR)3B^LOy{V<kOj7^w%fg20TU1{KxtI)8l-f=eKcc>_70&KFzwH
ze>Ly_@;Kg&-vf`t=WX*{;1T)tq3!T9@QZn3H<|JG50CBZ^uK|R(2Kz@@Dw^C{b!$u
zw?JNs-1-na1Yd3!bQ^eH;z!%+mmj#ey@YOW(fh98|0G9YkGjuzi7PR#61p9FUVAO=
zCqGi{UGT}o@u*KlZbqLv@tf#zwMXjbjh_YhGfohBp!9jZ$Ntn#e+zwvUOofo{2loE
zr+E*!o_TC(U%{)vqix0mZy)GC?Z#Qo`%kQI<_#W!ufXMP#zzi%f)0X5;Y$njf&PPk
z&-0so)jq-#`U!ui|2^_>;pF6x9=N@-dvyG(xFhYj_xT<FGxDGE>d?`Lv>P|o_UP{?
zdjoiY{f)Q_=mG86%d;Nsz|gtaNp|GqnV0g{oG<Vo{foa0`C0f*e3S4II~j1j&wKFc
z=YiW5xJLf|^+(UAc`m;?wr}$UE}t?E@V)`h({Dp=3*3T_z%BD#nD0Lx$6@?+<^le}
zFZ=rzdCPd8#+kzxumd!%8@ZtItFa%}Ub-djMgLCQ2M(e0rT@?6U)aO$$9V$h`a9BI
zeZ+C#572SqPU%;BUGz!d{1*C)oeny@4V(gxz%BRz-O~=xI85Y~#%27&@%`c#atruz
z18z%4fuCO;|Bf8>06qY}$XCGM%%gA%Jq8}3*YG{`mXrSn`3ks)PX_*xx8OVcej5DZ
zT$EF=56pM9i{LMte#XCGcLom8zmR8{H*yz#f8YRo!M+`PJ#Yuz)-IC#3-!+UdH2Xs
z$_=qkK9?WCr(zG)uH5({_`r<6BwlL`Ki2L5-JJ81-f}+7_lL*!y>^($@yb<^H;@yc
zx9G1o-UGhD59luP5OVso1J}w!$RWrv;Qg$Z^+R{{N76reC-4FA7yib4pTqaSFXpfO
z6M0Gfd7kQ>@YDOu1G$Je)!1R+@3+7?b`S9gJ)L+J#-Ts<liJUrtMO+cmt%+AV}EWx
z{Zrs)<hreXtHihO8Ats;@u!@N^oVtaZURSzfA}-!E`B5DL$8DP(7WoLd*A`My+y8)
z{y~3}7X@4c7urqv4L)L*oA%19!0{<A^=HSwtN&)++WWABMNdM$dWu}MMV^CBxGwZs
z<X!L&JKy*d_vmZ-Wombt_ESF8jMMx({N38QIN!+gYvLRoKk*OZQS7cK|62WY7xCW8
zSLl`48D?Ib7xIC69`g6VIr24n9q^95aOIqve}^3dJpj9G=)d{|`}_0bd#<Pc?!?K|
zUUBkkvp@Ig58od6K@awPm?z(7{K%zS;{I0TCg7F*fL|id|HH8zeHy;Iho5Qpjh_@g
z-?*~nkLMZr)p!!tkDNd}Rpam{o<zBXafsLA+~60S3+s+tp?sEjX8l%?=amcMcc?$k
zypPyRwRd$tv9BR_LhpZZd}8NDUU&$+tDj&;3BEo+KVvt2jz0)JUb$x4r5{}{aeC8l
zOFV*hP`-=agPa!q@nnBP9&TI{epSvL{SLo5{E6}4JHZS1Rplt<$JuA(NB1fGNIK2>
zfzPqmt?}QRR|393Pm*V$UW{D?J&bW4=NY+3`VjaBPa9{b98x$(pRK)-xc!TG`-jp8
z;#uzV4BrQC<<rP_k&itW^nutRZjpcVL&eXu#(!GB74Yy-xq@?#-T2a;5c%8qw~jk_
zv6pVZe;YT__{`YrltbtrJ+A)BlRxw#{=~e+;@unR$9x`-?f!l2e)_p1&r82(CtkGr
z0{JHJZ_b(e2^W4V{SLrw^pR5>GW*c@OvaD>QhFSJy?Wb~UoU$1bLE*ipUOGd^Pl4P
zWM7e|pm*@&huC>I&n5Jk{ZP(?o)PbK&-}6D(Vn=76JNN%3-&?1Anhl+!8ecXYuX<!
z`q#e+z6giNUC{@%ha?|RJ0<xY*dZ7XIS2Wd_J?DC^Ad<ZXa2y$z#;Mh`Vi}oE`=|>
z44#Gmq4Vy4;yr*T;}p;@rvG*kFCjl-|I;o!RBj)9ZCnfMfDR}ZFdp)3`~k|p$hFw>
zv3F!V_aXV3+A$Iz1sn=jtSkNq<S6L|^Co@(yJqlC{*pKy<>BxJ^RN=nu-ATvT?ILh
zcH&Hkrvn~{3xd9}A2W`0h<4)7iAMm=CvQu74Ly4C(UUqV(hvMK$O-WO?;ra$p5dwV
z|8agZzvyeq9f|i=zKs9qA?Jd<S35@JRsB%$Cq9P`FO^TSKJAFfPhA7&uD^cO50Ah3
zzH|q@BlbV-KbepIxzK?v_6O|M;%(^6$qxtLDg2{%2S3SIIMvY@I(&-j9(cxHr@bI~
zD4tj1(2VB=zmS7@BL4sftd~56>a#On>~G4miRTypm@jey=gm6r^90T(kK;M=zxLG&
zyg0?dB9E26p+`r4HohY8kNmbrUfE*ztDT4bTl6aVQS(08&-`8c2H!<bfettR8om;}
zn{iw3r}15lA8Y<;?Y7M)l1@L)xV4i$9=}_E>vQ>K;?<YXG4~z%Oq@S>!8pk6(PwEF
ze&CPj^~ka8H~hW+Aif_t7`bAtACq`~=qLLzdb)B5^C2&a^GaUrmN>%JC1`zy#x<EA
zG2cDqNqvxZ>?hM-el+JIT*c2^doTNZ;#1Ji_?_4K&BF)RuJ<Z$4tSgSH=kn3de`_F
zxANua-O%q_^$7Sf>q=aS@sQ!;&6C=r@2l5e)OTt=_*T8Lb};Azc0b^p{lHGee4+pF
zq1tT{H^@0)KNOF#$0n{9`)c)B_2rzqcv1htv^Nf?aTnSRQa5Rj-$B2A{0pc0Dw(Hv
zK^`URs$MhgjkB)YZaz!tZQ@nj2jH{gpl^mhVy9B?2z+iA`*VsPj-7VTx}Yc3m#cRx
z$I`#}Rl8H{@O$(-^e^-|>mow8;j7>o{3Y;ns&g{*y#5{b1G|UvJ8{T~lT;o9Pl3Cs
zf2CXszRY)pTlV3L$M(k2_1yR9(XG=a{3L(m6d%<(711}f2c{m{Q_rz+>=$*?PIU&7
z-`>2ZC3Y~+Bj1${*FJgw_<3rFN&O||_RxW@cZ>h@q>nRC<PYqhj32*`an|)8g`RVs
z+V}2xkGNs-uV2i2qnALh&2LRyAo?TlFWe2C+~b#0E{dOBzjNX+rMK~$;$L`<T&-R+
z?<>ERjs@S>$`!HGHlKp=_0J;5^4;Xwl`oY3pXvkDZWcZz-zPqn`NUsV`A2z-`6N%V
za*qC;@)zPHE3X1K)guyb(|LL>p&P8T^>);&$?KSUYo~Yy@VE8_#smI|8=m@|=Cz`)
zj(rKcMD26>2Lp%Tqw)y$Tkrz-r+!r8VfjAzWqkSLd^dh2@Phd$*I;KzoVoc&k;5Aw
zr5zr<`+jU^AGOCtAAAZP(SEyt|E=xOD_d{vG=J!P_*&y9m&_l!Bfif$J{O+Jvq*h8
z`D5x*TEFhXziFLj?66-vu21+JI2SJeV4m|&xj*!3i5y~{X6YAnyY*gx!`S7tKQ%v^
zy!gb6C@;rOqTMofMg4=sQGriy9^2t3>^Jsy_4+rC{fxJbT~xnK>_zHZZy(>6&b@PN
zS3f3RBL0QOQD}FV@t-3HN(W<)U1JwA&JDZ)&Vet^b^5oiyZUVF=+HlWP5Wu`uv)Kv
zsb1gucCEJz+>>8HKl0PzTksw57kxA9Hoxv?$G@Y8wmxpp3AjRT1P`$LAO}is%ZJ#1
z_K$r>KVd&+9PrruBlL6N5x9o$5O?#7<KN9^#a{({C+|o<I`D=b#=MbNnJ4{eXC2Tt
zp1=Y7b36VPKcNTkGwS)^Pas~OxaU00pGiD1{L(y5)(d{oexKjOkuY!Itmg%Nc<1<3
z4gz1X7o#^|M~AL~U*9@D^^c*4LC3KR@tuy#JfQ2qGxJEklK7VTNXGp^FOtvBzTr<r
z9?<@mdj*VZ1<wKx`WYC9bAt~6ubeY*557bHiG#<_3VwnI!7JtI#FKE|Pk~qP;}&>Q
zZ~yu634Ji`8Gc3lFL9E@O%spG?|(Y}rXTr{<h}47zlm#I^V_&?;x&l_$F2cg3>}kR
z^8~K=joeOq;1D=lgBRKtiKFKU{1IOX{Rc0ATiyo`ijT-;%mX==@!w28{J-EQcm-aD
z9s`f+iT975$~8YcKH-<>kKl`XEOOHPeU1E~+)aP*1AjH}7Wfw)=?{PSFn|B~@jc)b
z_?0dv-)awhJq7Nb1J}UsmggF{Ujz5%I|hCq0@uVD-!c#0C(q&5@BH-mWFOb^fxx|b
zD{xmhf9u$958vMcx4`uY{;?0gb?hg7=DUoC-4A{NoHHKp@nn4D@w7t^fM4)HJ4Wze
zt2}^wG4T8pdW<}VT?l@ToPeJJJsEp1=iR((;G=o1<RJk!jB^W|8wZ&0J_PT~Pe=YJ
zJ|gdgzFIGZ^?|S8Md^FiBOOQXV|}bAcx{|GdKPwt#4#JsOq@9KIdXCHX@R%5kH6I~
z-}(6d;z{W67Wh-XLH=RfcaQJspXWQgUwP>}$ESJZ*o{m7Q+H80|NhbQDR6IGFZfdY
z_}TFZoS0{wd{Omc<OkyZ;SbR3)^7@28IKqF&Ah4m@qO(G)a5~c8#zgPTl@{T&<X4O
zVNbw5gZ&?QZ2CV$zIh5h+`@nOy|q1h0{K1c6L<|CG~Pyg5b_`NDscwJC&4FxPxL?F
z6nz-@kNmR*{!7o-$obmk&`$%m*hve|%2B2N)JuuHX53TZ{(fxd_bKma+JRT?9>j+w
zUuvoR5Bvcq&{^mT{`dN^2Cl_F&VhL4+5zbwdyoE8=pJ>X7&rBzw0}S^@sHuZN&PzT
zOT8by27QJukS`2B3%qX^PxuLP+0#`!`-*=O{VICg8a+<?SmSacH%Xu26TmxkIrMpt
zoG+Y4o?r96`tg-KgS`m3j3@eU@eaM@KF`3f_Bh~)cE$-^M1RsgRQnh9mBd{tH#XlG
zx`O^1eW-Qm%*TnJUq0LWWYB*ihst*&ud3%oUzBb!AK)MU!+P%@J>dt?5A&wbZ+Mb#
z96fsp9<0$vw&>l)okou`UkUk@bHM%yKE%#ieH1#n$NpoyLHttc0dF7sw|xn}sNanF
z*dKmD{RW<#-vwT%k4A6YLLbEs;-0|A#2u&?rH+gD2c>SSb}-<PcHpu8lHAMcy&uRU
zsnajK6DRrQtm8ZR&G|;obsz5YjQk|utQ`co0DADF<Fj&P?E&&3>}1iCd|uFh?5o!M
zj6Dmz7(I>kDF;ITp+nFy_;dB=?4SJet>f?B7o!{l9DU>XckQjfN$gQu;9GkZaL4$$
z*I<vGUwI??w|wt$-e-Qf2TcDT_zs+wZ^e$Q|0wp;=5?7b20WHuK!2f6*r!+@dh31u
zo_rVMl+ioLOPc=bk&$oEFN{A0f7xg7ta5AM3A_L<q2I<`p;tlAf#b+Q%0uV}#IvOS
zqVzxY9?km&FOi#QPd=P@0o+F}QtyqNB!3MZ5^i$ehVc^7i<j8<m+}|J<vY<M_UIed
z6#!q8zop+FIspDf-a&o@uC<fKzoY%X_S5id^f>drpf}{n-H-DIo{UQZui$6+slYq*
z8T51b8~A~JC-RMU0?vuN6zJ9Cv=e`bUKYM7zlc6-y~X&?Y6pFaJoFsDh4EO)PnI9E
z4(!{RkMYLA1M?wLS4Mv#@LstHI0UX@pFtkg-pPCe|GZZ^qkRHAN?kSMi@$dKt-cBW
zyU%y1mjmBV9Ke=#{qod7gWtwJsvkK11<wO{40?`yP&{Ow@!#I!ztb)o{4)O+_?vN{
z^Ty#u&t-qM*thjJ!XJrmgAc%uIZx)DIu`2%{I7xk`X_F&50SUlxF+$Cea(IMYv3RH
zaf{v6coFzT>q0=6;$N;Gx%U>W@ki)qh@WnaTvUBP{TzM(o*}1metfs^&wd~mu#dnc
za1#Gl<1C;P+FLI0sP(wDF9N6GGuHP*ULyV?^(HtE>>=u@(0}Z>$bFg5QhUjaXZ#BC
z9rO=+6McHAT%3C8&~Nke>;J%Cc7X@hb#Gm{`*D5XY3+Q<@AxqqFA4ulyx2qV1^Li>
zH(E!9b4O1C|3df7ljB_AGm)cD{<7%p>J#W`ybnGBKfvA0Q@au8ns|5Mi*;@Jt^X-<
zIdlU0k3J%NB8Nb~k!OOZjf1}hU-+)_FZ>AkinuxGZurGR>|;-nr<4!lA60LMzSN%@
zzN&nW9Y21-r^Y#iFX&f}{EuHuJ5=mD#@!}<%zE#M!}Z>Q<Y}GijX+<}V;X1kv*UZx
zz4^QJH+~BFL;MbV?5^4)VlPr(F8__a-FQ#rD)6ZFiGZ)f%RPmDHa^by2j+o14}L_>
zp?wdYDlgrRzm2Qo-0(*<eiS-KJP+p(JEC$M^#*#c0C)`kaSogd_zWJz4s2Z`=qPr%
z_z|D_yZiyWY5d6YG2oJVAkAy$TvOLkKR<jaahTQ%2){tyWWTj{r0yu=tKUNpVh^)^
zF>rz$1Rhks#!rU*CiWuv9drx$&iG5t3%YMSB<oGwgYhWPS?GJ{0{iB^Hx3f|0lfka
zvp?*!-*0>XbT#_q7I|Wc|8`4!hW_is8=UG;%o974d@Sq6Pxc%??-GAm<AwG-pW`nU
z{*!-XoypSc%0I1-LH-o@3f~U=n{SY~4C!0sDCOwD3-sT6I%2<7j=sQ)J$kruApPcd
z{U-X?1843>&fUB<-~zr4y-FO|EpcK?;>h&>!}l-Z!`9G4;Kex2$j8Ec>WJz`N_~Ex
ziQ{p8(fgEhW6#kpQ+XxpX<QI^_8fX|-SzIvFOE;(Re6(h$KDY5*UuF`DPLp!<V9KE
zx^+09Ke?|-J4F1`%0;a=7J3PO-GUd$-Ib$^e}S*YzFa?w@wtIN&nIxa1&-U^cuC@6
zmcSu(=WlsZ_jV0jZh5x7<E{DLo+tg5JonIH^-|=4_?w;sht@9*T|i!WXk1j<mweav
z%8$Z7O8=E3(Jx!K896ugx6#v|1JCBU1+Mfjr9XU8I?C@K9p5t#2>W{Yi}@+xBi0#;
zoM3$#_)+Cd;0O8}xGB68J|FU2FMbye3%~t)e-|$MWS-AiN1x?C+eLrl_d~a#w`<@N
zcm?i(bL)2?pIqb<+=3tbMf=izf&Vr1-#WneX~$0!_+JD6#u4Hli2MV*K3(Vqy|1Bm
z5%Do{xA~jN?=$`qdrI;I9glV4ufQ&zeKp>s^e*>*RBl=F?ENKu?ic5^Ts-T?H~um9
z5&pi!E{(k3_~AYJ)kFAT^K!IvM9wj;FY&L+wXtJ*e@ys*_2%-s_YE{Ye7)co<u~rb
z#eEt2eG|X6hhMY~iE{Go<J+a<%qRDi^u8J7pVqO|PS8A7>_EMDB=S}DYwfs+12z7W
z^};t|_cp#3d&Y&mw*ISA{vCFl#&tIz2!95CjKs~ZiIX_RHS!yOLFTVNC3T?9+erR|
z_Z;9yX?$bi0GhYA#@?*|?;<W;dm{Fm=od@yymF6nL+&ZlKG%B=-aWRT{Gg$?#s@=>
z;$N4JC4L<`XB_?gIDYkR)?t1qdU3w1oi=n%`+VZ{ww&L|P6<5H4j+7+C-Fbjw@E&N
z@SAu){ek$asfU5R>b2w3dOnH6+=~bG)5cFifBj?k>Hop89lL<}LGv5>ARoUU$H6Y4
zyioj$f71O;T%dX7*sT-q$h@ov$P;=S_=oRd?|BaV+yYn67x;3zM<eY^;D1ZIdMo@q
zda-tB#)%xYUi5zo{L60x|LmK2)Ad`xN8q=dKlTmi32;fh56%m@4Ldh<?w#Y`TR+J-
zvg8R_*MspJryag^i#_a=hYx*-ok;mTd5RCQ8$IM%`^!W0)as{|+r8&5`WW)lE%g6Z
z`78NBt$X|sxd*ynoLAydwEyRRUh_;6FK1j}?nTwk7&z2U4%{X_@0R_LK4ttpcwt^)
z>{R*_W}Na<;N5&U=7+qS_)Fu>h}WZjS@Ip0@RL39uF~biWf+(8?L6UI&{O0X&NK6G
zJ*KtwAVTMj56b(-$1;BM2%CrBe6lrs<tcKEd2D<qc>NrD1wL4JB6+3SDdU&xeHHTE
z)G_p2IVbo#b^j8_-20y7bI`f_JR`Tuhvx6rs{n7Kms<xRegWW{eJJ12PRst!_l(0}
zf1$s`?-HL#-6P`Yq07YQPn?(Wbi}LD|Lezg<E4?KALq$9uN~W!vx0BFkKE8Y8}JMG
zOyun)@L4-J_|>?vHFCW1i_M3q9N2r+h>t+ddzj}Z=Q(xEjDJtumiPL_KPdfRABjT;
z?q{E^Th4w>{XXjZIWO9$&cFDO{+`#=!L<Gr<B+exy#U}J<MAHnNS)l7@0z?C;-dB6
zCe8uAXnlpm>3J_Q{IPW>kfWIo`68TS<kVCAMbEwYYl#Ox<?SR+TYADifS<|7*b)b~
zR1SdOrv8!k`}m#B>kMBr-vGP?-;*cV{Soe32avjG<njF3JgGy>eaTaoUi(e+eG?C0
zzDV;Fg16>JrQVP6l<yq>Zag3R9lL?~4uNy=1bkpU-2Xy7#L08w{zv!azo!4-iFpFl
z+Yfz%pKRd+<wNqT#2Yl8+5FzfQCs-C_QB+(>d#9ayLwXE_47pz(B2k5^&bC9*ULJk
z@3F60F9Ep(IEAi4k6+9aI2}5v908rkeG$?{#^GK>>dQl4;RnD!bu5ElTl0bvuVTD4
z^b$Fxbx@G|!#BY%<HT}Li}o@2J$ha8Pke^YZ{ZK#2Q%wdZa|JmT|?u|k;juSfWB$|
zN%DV@gN<7O9xmcTd#{sqh3?1knpcG0-uQgRY2KFcq}bD-dp|n9SG?Bmm-}gff9(L+
zI|BFGacK{o+`|WrBZuzgw{f43^NijkT?9Vh^Uyo!V&u{0<+om%cIet?|33X$59i&w
zSLlJzf5u}R>Td$~*)Q<{Jp=g<xJO<B{-^%9@>uffuIy%e@+-Pt^Atjlt;>M_>^|eb
zUz(prel2{bcFLY3_{w?l8#(VW->V)#-AMRy<fEtfr<8lJGZP0NyWUA}O&+lI*IVBP
z_(~lE_c?j^#?|EgHF?*@r`_lII8Wf^_57ZFImw}w4<qliF6I{bM>!9<t@x1o2V3+b
z@uKtqd}sdAM^5_5<Gcr6avtz!zQ_DhcY%J*_p2RL`yui`^Mata(8C|*315KU#vg^=
zshvLWo7d8Nq4@jz$EWL0K017$c9T=RP}Z3`UfKm44;%SXx`SMT+{5|Bek<IuPV9}y
z73F8luX%dt!_0#xa#rgxL~n8)-+xK}=8xCzgZ@TbK5@as38nr_^JUlK7vI6Ig8Y|z
z%GUZxSy%Lq*5@+c8ND}l&@K9caq#_}JRaokTkuMG96FovZqduF$63F1^o6I$G4M0<
zQ7-I-Yv#Z8yYV-!p#zn3)Gv`o;bX`lskdStQSvX8H)5wX&b)R5;3eO&E&*}~@6jKA
z%ss5YJM)I0gRjU}kMsL$$9}#?|Ip_xdcjh=9P}RfhWjh9Grf{$_=WRgpJNX+jtRV*
z{eCK3U&PDl2aNt~y!Y+cul2&0`2F1<{tkcSyi-SLiM(ICdgXlS{{7fbe;)RpJdN+c
z&Xc;n`VpEp)cSwTQ^j5uIZZf=o@m});yl!kQ`c2|LoVg~;XjYl4u618Ay*@B17GOh
z*kiCq{oy=cq(6E|^zjqky>@)M9`J&8@DjR`{CNF1t;-9ZAt$6x$C}^LyZf<!{Xxdd
z)ouhlPCxZV;J<ne&)!4Bexv8Va_lFcPJO$*-%FjHE%;<zqvW|6H_^J5&=cq=PxvwX
z8TbKSVxQ4|89Rph9dwNSLa%+C-@pZSCC0%{&b<-9XW_N&*pXh$v-YOHIzGiu@P~QA
zH!9D!ZdK&R-e0|kZYqC5=dg3cZgQ$Oi@usXtoA34>G{_m|2*Y;{O9v`dN%){c{KjM
z$cI=HH^H;{6OG4hy-?!B_r&X7<wd+KZ{pv3U;p2JUcvu=KL7uDl0Rnsp47EAUM+Fd
z&ym-Z>!QyXr=I+>&f|79zyCquW&h9T@AZ5couS{x@78A^&I^6KcB$xN+F9yXfzN|i
ziMM;s{2ngmy>-6-!Jhx#c=jLd3EULUSNc`nNqna9aKvxjKYFU~6Tgf8g+CfQM)4(l
z#Q5UOYrl|-c-}77_wT*m|M~p)dH%Na1h}buW1d$0560o&=RN!!q4THu<jKp$j`oze
z59^aq$0GVg;s2H=?Ztza?ZbaQ|6@IS-dFIj@OSc(lAmS#2!6%pN2EToe#68a82_F+
zwAk<TAMp3q=Rt3{$Y;HR@BdNY{pq6pYW@FT?aS5vUp<-k_L9H<uIst_-qt5@MBYdA
zS?dJ1?pW^cY25OuopJD|k{5<N#NY8}rw)Sg_Q{|29;ocs`jUOU+TZ8A_uKCC%i!Va
z9Dm#Pmp!lMdo@n!;qQt!SNqU$3*Y_CbIIR(j#uaRyUw@Y_1?$UXG0%Ny-VXih==NZ
z2f%&u1+=@jUU=%bS<eu>h#wL@u*Y8B`b*v;cyaFC-@?hmOZKmD_cHvtf{T~6|Gsqh
z_obJ=ZNJW&=PiHd_nK$x_^5AQ;Kj@6*3~?(&hIJXw_c3%i9g!Bgw*q1<1eniOus5|
z_4uiXi^+Yw<_qM0M(g(^?sH3gy745v&ocXb%f7U|@OTBU-RI)f_LBCi@BO}T|GPe~
z)^RnTwinK&AE_&4y{Fbi;rC1MqTjoM^Q$NGJMH^LeJ$@PN<BH_ZSVO_-a+$a;1Bqt
zfq&vdzkF=(eTv2lffwI9KGB~WclnS!T=Q$Qe(Aukj_tiK)_qU?Gx<XDvDf@I4?Dl*
zx2eDLGI)I%-1c|jh~E!+7S0|rUh#QPeH-sJy~vYo9<cWnB|qFcIH^DP6no%v=2iUY
zIk#WyC2cw1!b|HN^1E@f#=`>t#0kSEz!Tztnuq#o`V%jbdq%B~lX&fi+MS4B=zaF7
zXSxOs$<MWpQR_LSpZA&ZJN`fGKP2AL^Cv#+w}k&IdMKP<+{^Y9cx4@Xp4LfAoqFro
zAdlXUzt#70?~eHvy<aMEx!&X5y0Ofs_3cs@PW}iy_kL{lBl!Ci`MGqU_yb<8fhXZ6
z@x#Ui6PNU*<8x~~*5HTwHTZzOfqtC40_!U!&j9_x{3Pg5>KZq{T{vzYBJ$S!Hhzcp
z#OZoJ1oq?P^+6vC_e=J@{JZj;bh2=r`r(atZak%Qn)o#6H}<-Bj=#-INnVq2n9WOR
zp6<KH{*8Oq|BC$s`W3n(eIqU*dDPaEO5QPgCiLy8a$E25&39YR#(X*AzOeT^&Nz)j
z1RsdAE8if#Z}^3I-pTjWp4#{~&WX5B;y3TpKXo*)(+aoq+xlwQs}cv-x;ECoiJ#oM
z<TI}FLF8xaZKa;_p7Y*fC$sKE>;AHid18;#&i8}-P9DgXI8N7{dh6!1#NJmrzc(Hi
zdY3qC>pCP4r}g3RKY2d~a!KzGg+J9kpFI8EgJeAt<c*wj_eFXMUrU~&`CaJG!ykly
z@B{dNoc33b{cUGl@&U-pV?EKkoiB0tz5g1zMBFp^a=E9*XZXH+kMZ!2fS37h^I7Cu
z_xbxgx4;?iX-7+4DEUC@r%OKrZ@`D~{qx<{kukot_ZsD1h1O@3KETh>_c#~sqsx83
zTk{0Tr^tQc;?)H_pY8|7E|Yvb#<MQkea5Fw&iuB1LE_cT`)uAM^b<aNaZkGO&*Y(y
zf6{zh@{hljzfU~2c^;`x<Gr$}QzL)*_Obtxyffp`Q!mdv0lt^<t($|sgMA?RCCVSk
z_csqNd6B~FMcv!hbFi+%th4tfHy^Ton=QYg?+@V@OYG@e?dr+HHts+7nlF)Gg~J~o
zpZbsTlwTyT7`!)+h-dHp1HZY?Dfyhjf9k<0S61$tagmd)XMsGByfEoLc?Q5g`3vaR
z;0gHx=+BSy#Qp@`3tp(dBwu_FeK+5-_YnX6@jd5H-URp=y{GkRt)tmIV(v$~AD_l$
zrS6|~?UTo#y{7lXwcY@D7r&@^KFK%New}(j(x<^U^X#EBL+8!+f<LuRQ1U93ufeO_
zXIK2%vybu_-hcP_9`r@|c;1&!0QYI9zxNs4XC3oY@5_Djt*3k%?{AM!<s|fo=JP;b
z$<v`O7Uz=uY3Y9QYp`3aIZxps@~V6+=PSM?&#d?8t;t8;BRA@w#EwFJ;QRcZr+Hwh
z)7m;qjc?i0PdLuKt@1J8`pd_5`#&E4ZrvyFB7V}PdU)=4R?h4_*6c6iw@wD~XY*!L
z4@|n3d!0{tgw1n(=lFNeA3OhdkL`QphBbNc+7T+pAQ!goANjhE^8{bWBfHYC>EHSf
zv_r4>F7!Ng!1tVo>#801?PEXXh0u-Odo4Z$@2u;c_pCq1zJcedci4Pu&n@+ym)6O^
z4gvf(fACvr2XBCfo`3mM{03X-wE9@?v1|R1C3=JU2Yf&H-}|9Y_qKsw>}&Fdwdb?X
z>?e5Gx+&lz_}aQ`tuyuN@jc-leo#I6^T+wfH)wxMfAn$i0659|J;&Gq_vBlef7v=<
zoPY8p_t-V8|AV}RTnpaBPrd{nrRSXg>&JesCv^+9<UwzxtFIm3lW#&lzjN%*KHC26
z<8!b46gji>u=Q}HC&;hO8_xWs+o^xF6)t;!dHHziJxLdMCXVQokKK9;JU@TzC;Wm3
zz&~&co%!nVJ?%uCL)(Kdtsi-c@8Ahtf&Rh|dXH)AG`@T6*Ly<O_=k)iti2Dq*n2FJ
zr>^}l^l(i*q{h3rPR<*64ZbKBAWuhLa{quY;IHrnJYC?Cbgkor@AN)R=~U|>#Lpx=
zMZOU4D?g>4?dd*_){RYF7WGx+cI1)I<?p~{?3>Czl{+u?MS9gbb+29YkN>*g_Z&jU
ztlL#O27Kk7;3f9<C3fsneR%8}=-uxg`)S9oJtgojTqQ2WeF>eYe?|C7T|xC~_KE$A
z99DQ%KB}C`IG;;D{*GQ3c|&=Hbzjx}$ayOlUECYu`_VV9?#npAJ?~X+Y2D?>^QU^7
zuO0t>f^*(4elXtGj{RHz_r$;8r?F?Op`UB_tNLX82j*R*&gIDt*?5!qrNo!;1LcF(
zZ@!3Ql%M`h{+|7+KGb`ND!-o2i*o@U_+I2y<pb>9yx%&Nz;E>pzDwKz?>Am&+Jy_~
zcI)d_j-oyFCQovI`AO;ywT}2nE(_gW+FrRV?OW(f<vqu}uup9DFC#BU?=8Kk|9Odh
zXNmsn{Zp-vkNh8dk$Nxql>4rh%E8b>;IjJ)-GJ{t{^tIbOIu(51aFN43t!$UFEMWF
zofZz4=$}jVw${0-J_8&?|F?b_=i2vaXTGU3cfu3eUxF{fW%cUbv+!#A7f%b%se`TD
z^0oAfAM(WaznR~_73)a7EdO5mpZnsr>dmpY_nxY)_U_*Q(DmfLk<&i6-t9Mjb9?W>
z*ka$6e#Bn5R6fbQ2B$j3<zKyzt9D7~68tyyIG2ld<v8G|->sY*duQV|JC5+cJ_WAa
zuh6R#A7cHfH!VEZK9_tp>3HFx^I=`Fqpw%++`5pxw;+0%`4O#;82?o5Iw!tT`X2fG
zgpX<8YCl1~W1m9r$_HB)?gWR-Gw{~9hAro^m7dhzgZ&<Q5I$S`yZejXBKq3;lJ@1|
zyPePelJ={0UG7itXz6)%pTBwRSG>00o4>h#;r}F0^E>fE`c*IPDe-=n-p6=xAEEu?
zU%0A2UjJ6>$}b(ie$n99*7Y)O@Ll+<zbJHayEvCCdD8b2KUI3-zN8N5DIPWcD)&Er
zudVdzqP_Ul{-=8Xsf(}w^kSS-+#r9?{)n%==jJ8-<^RRUi*vb>bBY)8hpvnLXuMYH
zed`y_y+Yb`l0SO74<vpE<MrM;zUMjQTuyfO_^*1Os{P-{@AAhhzL|FSJ>!cX)u%F_
z=A-YSOTTNo^r!a>=iK+KYY80o-l)b&E``qvesM+rFX{XRoL}|d(!c)j6CJzIe^2<!
zIH{9sd|B%C?`dxxQ}y89cOCe*&V2G#_P~4FjSp-c_xL@w!b#hKlfrZG<>Wta-TK^@
zZ2VI2Lj0@0=B?k{UVEMLPVYO*JWFqDA6^2_Cw(Du;OV~a%7^F?y*J=WF1qNiURF64
zybIi3>a&qgq<iIqoM+&__hW8>|K{Ck2a3Jl{FK~py#*fS6Y<k6@!y^9dxtMa4k?|l
zKC_md2d)}Nw`BanZR_wXq0dY3?h4LNc+q>60_Tl`zmn4~?cu$T=|VnSUeexr?N@YO
z`b?a8^$75*coF&E@dM{e_cP~y)m}K4e#b7<IDPL!YyLrgyWha;1%2Ct*Pb`?OuKX-
z@OILJif^=E;L#R%E}Soc^Ww!?e0=-k+fVXL;#AzX#-Uxc2fySyxp(svpBntCyyre#
zjgOt8_V(C$npaUf$r3v6`30|CfAr0hoiqBX?}ff8-}gSE3pnrn6@{ZE@kr89=y>6<
z^2rt40$=@J_{$zV>-}Bo5xtk=0x#Uhm&jMmzg;q)CH%|p0C&A__M-oO0skj_Z#-V`
zv3h9v!pVMEej2`0{DPj#uP*GIz90LK&&WA@=T-a3MZ5C~{+{w0=3WH-M))&7Jx}~Z
zv=iTrAB6XaA8FiY;t1^jSI2h!hm7;t{C+V{{IHBW_r#v!Y?(j)TIS6?5cTKIeHB~h
z$@h_0@iUM=p7^>Yahmn}x<BkE_d(a6%=*|D{Dgmz_N-6;9pmIa*3-FU-o&BQUR%Fk
z@5k1!$T@IdJmaGuu)mFKtv{3B%rkl|>!=>UKGr_5HO>Y+;2xXghk74N^F#mm_<hIw
z^ZCs<oEPJ?|DPS({r-&O`XA>BJSSfAbkBJ4mvu7kCywK9?aw(iULp0?jDHKgJjHV|
z|IZ!YJFWNY`8)lgmsjx$p&KWE;KX4x?qB^g@|yWsiGx+n2*1+bTX-hls(!`n+mi3@
zm5;uXd4%7X55;_vuPR=YE(3?$v(3H+K0WWy2mOG}hf7@fDQ}K*FTL$|ldtRiY9C_X
z6aOgxXdEJN9>1>iH-0n6i~i@mqmi@f|Lpze`u8|L_M>_^{?v>0?v*1R=b8TEP4YC<
zW1A1dx_YlEa((RPwF}p-v{oL>{dB@9=NEZ%%RZ|wfG^3%(2mvopx5(+zCj;3H~#)O
z&)BDXADj3OeNP_8DZV86nbmK+7drc3TnPBizVe;g9m#jgK8r8a142(4-=Lj~^J1Nq
z$AQo4ui#VcTkdD#P{hmRALt*-xkz_AK5}{UHR<2{r3-wa{ba{VewO%6-MPX!>kS^6
zm)-nU_!0K>(gFGh?^^G!c?69wKhZ<@Mfm#?_>><3C$)PvZYA>(uByMqo+`f8E{?p{
zJe3Q4Ipx2{esQYDfxV;oZ^gUp+me3nXYrbSC_DpK^<TYu?7v;~_q>KK)vv;LPy2?x
zTL04H@qO)c(C6B3X1%98cI1f4WANw7WAOdZ7v;*zbI1|Z`;jXz<|$mlhh}{D5xj-Y
zW8Z7Md*c|um+l+woJ;8ZmUi=GFZ3YS!#uxu@m=7jcF@4#68>9%ntUzs2#j;GBLWYB
zPvyUhd2Sc$t-Y4{)Xv)VE`fjTC>f`51RZ~iT+w(*^`O%8_z9ZNDtt4K(d$osIpoI1
zb1_c&FaGAhzxIgEXU^pmf5CY*?u~tJzG3j%`9cSB-+1>;zQOt$Hw0dnUP1TD*B<jd
z_&xgC1$>_13V0}7K|e3}lz7d$D(~^#$`8@|$~U#MAh$Cw_;URWp;v3qF?7uQxYUo<
zuiSY?4q1vXSM)Y@0X&z+p+N8J-zeWq{P!L?M0~G3ICdoWA$i<;_ose1<j>9%`pLeP
z{wEKueykIn2_4(Q->VO9k>jP$y=R&8tv~M@zqx(OINM9$<fKQVkDwP6-cnai|6KCD
z)jJ|j_Pa~_gBO9fD}DSlfA*(wNx)&_DWI!~C%TlQLeC3VCp#W_P07PHPpS55?26Fw
z+HdQ(V7-aUQ*J4J1239yIqzHd4?7&^k$Aew`D^8W;yXC!)crQTgYn7hMBb0zT6ysC
z<G*{NlbnC$lkf%obr<wj{zf}+9(<{uDBrLC4xE>+LYK-nfs4v@&_npn6`sb9x`p4X
zU(}ue+|~Yx{@eIg_)g`S+>@X_fStbi&~tCNdInGGeKBwF33=>WX-5v>Jd&rhww_e$
ztkTZ;*4_*KPrXR(8$U>Y_+#pZ3jge9_08JTfM>?%d}80&gBQjhg73sB;*aM$*bTt{
z>f^*|)jq&?YmW*XYQIXnkNI-70|PI$k1?OftF<Sb<f6BZ?+c&VH|4tOS?p)z9Oqg6
zu6071r&oUv{;Aq6zwn#eThCGashoq{4SlYCFLIB3v-O?W2k1}mg1U9`8TdE#emKw6
zOO@`S2L*nNbK$(eQ_eGT$QHRyzQ#I;$BJFueAW7)SWo6t{Lwy>I$ru|YFCf^Tsz@f
zI#By<?Yccj_JR1y;Ny~Z<1qL;`1s}H-&_BzamU90RbGN0)c<m!-&JlDkDKpTKSK6j
zdrRs_xK4h*L|@k57x-7NrM?w@64oF2=48i9{kg)w^7e&3QhB)ae+&ILUcCOG)Twm;
z(k}h3oDuoz<PWX?h;xkIVSZ8dYrX?NVjYnu*YKr1{oVK4Kf%Wf`@HgL_1xOE>KDlP
zTlQbR+4b^$=uhFU<FKFEN9Er7(Xrpw?nAsy<N)PT;GuTk=np6V1$a90U-cHh8@hMp
z=MwKqSL1JTze;BsuTpv&ekXr{-!=~;@=xtTOXc>^^XkP{@dmX!DPIJSPV_VD5^h7E
zm7hxYF4~nR0xx^`to#%{8+m}bsLHL3OC8+EFVx$1KR8e14fM_EF~&zU?gIPi*n#U0
zD1X_)A3gWLmGte6V}JQq{M0A=EO=4BUFeDY5x&qmdeGJ0V=?bh|9y+RMm>7!IQqT&
zM^Eer$`?P%Z|Fz(i1y>^FY#ZOueEM+<^Qd6VBw$rZad>t4gtUFPmG=XWLIP#;J?UM
zsqZGgX`RIRp7r%(KjFTPJ@Q8J=oFvQ_?+U!=;hUCPVmorz-RA?#y-XUG=Y<c*oB;D
z>*BHR_jv|Bxo?W`fsb45TC@M$>q1>-?=|UtbJUlgcJEi<UKH*n;a;rNcV46KZ`Hej
z|L_a>UF5el`g`^IJ@UM88#=5$6+Bw%52}5s{_)uP>*rb`w+Uahr-9eur_xvGeCEHV
zT{?r__wKR(cH!@69UbD7*4Rn)gTQaV+gUI5%)Lj0_kp+jjLZAn3j*9CpXQ!i@S8g7
z)Ex&udheR>!EfYZ@aU(<zgwS}dy+C9_wsU2&ocAlzMdQR!QGGRf?v2_xz9j&r#@8n
zbqgJn4@4eNz6-uX51%VnK(CP}Do3F&#6ECk53jy<%BzXIU4M}Fpz53ODdyk%%ilk~
zr(DlEnGbSW^FLa*=W(9cU87$?AM_Uhuh0|dA#{~{l(<ieI{3gX_t$)IY`=y6!biEk
z3wpZ+Zn+-}{s0_vPZa0GJub>K@CWXd%Dr#gm*~A?GamO?$rq-b`wYBi1G*nRWnMS;
zf23~fEqnwxv>tx!vTNF*zfa|-(DBqIm#$Z?M(<^xuJEODUGxFt1RAF}^21uY0rGR~
ziOL<}_e<up1}{#2pVsF@9{R&$f9)pNXDZLkynqw#N#Pv0pVIpv*kA5(0#3RAhI>4@
zR|R|voWuXxpM3%Ez(@F^_p*kLf}gjvTc?<Pefu~M@9hZR*>k^!^s084);ort<h#Zv
z-KSsX^AvujoEbi-A1iWo`OaGSFFpdt@Yl#`Cp&rkbbIV4YwXO%b7r3E>#Q^T#yFJ^
zYd<nRr14nz9gs__Z$c+~e-QWj0f*FipZl7StKrAopX|NP_nFTxkNt%M?hy<giC@Se
z^ygmNX-6)voYs5p*2s^_fj!6COR+;nz7-z8gUFNKmlQc?4Ll=%BmZsb5Bw|tB7f%|
zVeKd7e>0Bv<3!)w!bjBCz|ZI%d+l1_b?iUxNBGea`R!z1X*>h_3_q%!nf1pHvKQ|{
z2Py|XaBpz#D|!w+m#-r~7Y+;m=%Mt_{lr_~Tsp=5)yPfUw{bE4UOA?4+&J^b*I^H=
z9~L^3c=XycwUZ#PMlXP#OSj=0(0S$!9L0X6Tn`>a-m*>&@<aVKk#DunaGtT}Y^CRk
zA2`W7xew_?|AQB6<tyZ==r8VP^<VhN1^>PB`!A6r#iPKF<8dE%<Ph(d=e=pa1wQ4k
z@C)P@<RbVB@;3Z$#sM$E3-1L_fB1@Y5&D%lN$ZIxuU7j;^}EE|Z;9v94j;S_KFgnb
zKMM4)dNloOPXlhD<AKl8XZ6J9Wi*c__SNdqjei!N@T2v+{QW{MT7oYp|9;lH)}EHU
zl2d$m=@|P{e;ezKol`#+_uSoQUf>0Ef7;cnqZe>~Pl4yB=mp5#t{*uke8>Bjk<$lW
zo@ZS3Zty(uk>->B={(8b{)2h1dC>ST635VdoYq~fJRn`F9Rqx6{6^t~bB}+ja_%YK
z82R=h4!L<8&FfKaXny_UJjq*c91;7}yjS$)`h}xM)Sq(llV<*1m-eH^6*M0DwPU;f
zvDp9j*#DQ%DgDUElkra>-|n&3Ro*p@I_<<EV3$FTkROKrTbDlajd0z2d%*|dcFC)M
zCF}cqp0zu$pP{SLlPiC8<9o3mHh;ExQi(@WK1$q+@%GI_<a@DaHlI*Cdh2iCZ|yzA
zj8lGry`_FY-n+`jZ-34cyKnP_o4){kNPq8<s2vG^8g_uj$*^zpKJcSl*tqeI`<EB(
zW3Spe&e(6UlW4cW{}ub`soqiZ-Fhz!>j3_-n@zor-jkp`f%m!BkvQPQQR|<&h^rJn
zW0&)H?25u$^Y@{%iF=W*HGd@Xob@{D{{kO-&&K0%{>@Wp-c95Dmz+!UH@EoXPVh{>
z#MxfulQ#eQ6z`h6SN)5bkLS_)Es1|J{yA|Qr#R2(k4yNXakkN4q=)F0wQn`Q82I5F
zSx4^^;x}-fxbxG!9j#l_ym9zx?^8riypm5ikN9DQgUI2%x6S+%_N#ta_;BTl=AraH
zA@n8c7jbT-{}*)_PW5E2^6Rha5rzJ{PZ_^<IpK!CCy&_i<L@rsNf&yr*HygkMSSm8
zdqV5dls`6}dG<m5vGD`38@R8`qw|Dr_FkOUfuZhJ^I2NgBk?DV^N|h|{+S1G1w4bl
zsjFlDOZf$KyZ7xTo>_Vce!qGAd+$@-LjO<qZGv}^(}eTJmx6bZ)7<yw=_D?+b_?lC
z<K&WmdWyF!UNr8Mc+32*e?fUEbuE_a3-AT-FZmsQ=W(9FBlZXT>mGmNQ|vI(o7Qaz
zJ*k{<s@sN~)O&2>C+&T%YxIH3cpKmZI1c=;p_A%;iQAOVCC~J9uN3P?j%!^m_%GjU
zzD(-&NVm(sQb(eB1mzc{&!;@KtNKo@KU+I(<c`xl+|BQ6UOB&^%fkovj>EZJ#5d}P
zsJ@f@5aoyDx0*MEKA!mhQ#?)cACvFaxKs7S=0D=+YM#sEalKpVYW;4_r;c4h{XTKm
zj^F(K))Qd=*w5OF(tfJvQ#z1*f#$!Q?2Y`ceWvnB=zRJ9X@9QjT*aQyaazaLeXE|5
zd|UCj^$nme)Cp|fZr0`asgKnBqm$nPc`WcFTvaZL{rQv^P`iBcAe0Be)7a&N+txEo
z{kPiZPxnA4FS~KLttX&-RynqOq;+N*&mTMLDZlcnf8(ORaqPc_J}(z~%@R1d<iF8d
zo7Z!S>rT9@{Gst1jRQ^nH2n*$ufl#_#7%9bSII|SW7j?9VWD@$PA)x4T;iH>PI*|>
zm*Y>YpS|}o>&Hyq!Rfobx4GlQ-+IEo-V1?zp1R@6VLdP8%<zTAMZ5oR9Q&Q}tuEwq
z_c8KG>o}F(7B8BQ@43`I6T4;WN1f{9wN7Bxr9Y<ee#yf<(a*-|UHEal4=4WgE4VeT
zEAY@fBl7{{57KW^|2ue>xDop&9@2fih<jNQ&uQLZ;NLiei}>MFo-+C#^G{xtamc~1
z)BRh`dyU;|sk{L^zeGQMng6Kpyl4Cq{iMD1Mw%a2e{S`)=0~T0_2|kQ$}<=Ki0#6U
zquk!SKlY({7Rkro!|z(J;4;sye*fA>FW|p%DfP4OwTE;Z>`}>25w03v)VflwV^+N&
zaRseQR{Mr>VC7!qANW%9qFVQxd&^s2{c(Q7hih-g&qBN+en;YW@z)cdMSKi#@r^sj
zZ=XC3<Gy}*9LM~m#2L{3ocNd}?dD1S?Bm=0d*Upa=kkxo`L7v&zi4MZ&l!Koe25>~
zvTw!%vEIy|_U*T9UowvIOq?V8k@j2K@w+ik&SgzI{U0vcfuAMgkk9765|2e(H*v4O
z_|5I>Mf;B51b7Axr``P{kB+>!!2gzYJtS@(cp?6ab*&kP{>DQl-UYaN%J~*PjaLH?
z16RP|61eI<b6$MkyulBT{f*a2JNrrgiFqos51dQK-?N|0^XUQ(Z|T2gKEU%W{o7u+
zU0*W(L(caBeEG?-eSHZ$o6nH_yn<);a|wJtkl#7&<bOV2z%zbB=>hmc9B|IXe4o;Z
z`#d@4#6_B~1l*%X!RM1#M_i+Mf%yCB2b`hDO?%_Wp3-jq7XBjoqlaQIXMd4T_<r*d
zXP)f4_D1HPI343DW?jnJ<fTkIadZBL9t3`X2k@eN4Y=Jd=y2h`?S=F92hN$_%i#Y6
zAHOF(zk>g@bTxSK+tT?f_*Z_L^Af(1#|qbJ2QJlzk(X&tU3~3j=v#cBxY*dwjQ_4(
zpZ4z@`<q|>?PLFki~}ARZ;w4{+QBpROz`7APxNQ>Meq-~clO6T|Ky#RPYgbyj}q?&
zT>$Qq_qc_=Jp^AWhis8UfZK<_`7Lk`d~O$T{=3ro-<STkeYxNZSM=XFLiihb(yh~j
z9+mUjlE)yu2hKB&c_o1d;WO}NoaOh9?dDabzxh9J9NVpLg<cEZVIOHdD(rXB%dPuR
zJ(c-@@6F3%AF!v=eu2OG-BJ%?j~#c9KN!Aeo(XXg^IN!JKY-KZ1w93R9s>W%1)N{O
z^Zt_d<$`YSf!n9hbLD`*xq8e6onIOMKEI(8$nCK+3Fn3X_ddSedTpWSS9IRIz2M89
zI7jWzoF8zAeGK?)y|nU$(D}w$oBx`4bKwbl$vemX^;<q&;LB6+#r>o`^)jEX)<yr?
z1%og2cfG6!K6Rh|KS;k1kAFYG$rXG?elwpZ^jW+J-0p!}<yyuGJkuXJ8aeSPaK5D-
zx$_}-;r_$Vp=XJ2b^mH7qdogCoL{t;FUbERUs)F;^)2?&bKn^{<wE{B<@wQ$-vhrN
z^KTx;kB<G<@R!p)Jb~xRKiWrM0{`8I6P&X@!I$-lkAO$hehYtboxnZzVe}yQ0ePaS
zH)NgF(Cu5~bL6x&?bxq?XYCC1pY~hY;kW8Z$Yaqnk>B*|0_XU9uG+D?0uSs9@D}~=
zs(s0M>Ays-fNn$2@xuWBz-Q{so1fh{IL60596r)}8^o{F8#528_X)gr?62RT<M7=J
ze7WLlw+pxxU$Q?B8Ap7C&IBLL1I>5W;_o}h@0y>D+z8%PPD}j><wESW@PGI~>kuH9
z!H=*fAWtE`F<<Z#c`5b__20xh=!d&#H?D_v;5T_H!gc8?<M)0r@FM!G{>9Mqm$mCR
z3A}l}7x1tYZj-OJME)r}w_c`vA$TFaH$Iy7tMLPer~cqCcv`>WOWIq9sr~hfMn1HT
z_C@;=dSx67aG!I3id=^u&$?y!)dy~@H<5XWchUF6kHotvZxW9Xc<#Mb#%-j2t@Nh%
zyK<gscYc+_`EKw?yi5F)c`3Q4<;0KJC(gZbwcumoMzsUMciLWmJM!eK$9CyV{GaB#
z^xiPWdHvYmIJU$U8fVZrMCe%W?+Sf$e=?sva&qsPbe>o3xi`jrOFWKt=bn4MyC>er
z`2cUwt=v;2{UHC~yT|_exAAMIz4l1^S5M_$Q|J?af1LS4cWDRS*dOR9d^YgEr(L^j
z=21OGzEF4u-&rqk$amP++PlJc*2-zQpP_Q*NxlLefM?(#@L#wR9}EA5^Tr_tA5VC6
z!N<4Ahw}X^Iid6+c(<26<UUpTaPk<8-ynaBJihhV?(e@n{x-f8{3b6U?Vd~YSM4o5
zuhidNLbqLS;~yEHeNEi8d>%Lk-csj6J8J4{)~>7E1{@|nUb+X~rH-<7Eu){yf5UII
z$A#Zek5D^m{AkMm_-m%Ub<?%ig)g7zKlmJZb&nrLJ44PzIESuW<Q)oEUr#&q6FQUm
zoZ^6hqrx%IsS9rY|BHD(%<~iTT#n<M^60`xT8~OU82g!g;yv?p{@@Yy3TTIJkzdYu
z$dSq4@f?7+_%ANcG5Oi8%P1Zvulp3&P97lkv*yRtj#RlFd7iww&~@Xvs;8ztjs9f#
z2>6BF<}vdDU!n8i`^w?8Hx3;+v3cI$0dijQca__|l)q!A2>hJt(w6_ux=wk@z(4mD
zy~vZgnczY4?@MQw$koCXekacBG4G|l@`>|~T&lbToF}eZehi$yb!^{qzS86HQ{@xJ
ztG>W`gKy^Bz)v|>&Lwi=8hK-jA3*ymbe-{Y?}7Fd+EY(TI!QfK{HC1i`)RL!SN#IM
z4Lm;16S_;j<Y(qN^(?q2PB^6QO6n2`kFVrO-ZgLuJ;}VJ|DT=bpUji`7SMa>{C`P1
z^N3zx+&||Ky1E1(n-5euLVCe?z(ewKlq;fdD92)_q5jl;zSDdQ<cQRFJjr9l3-FVE
z;8*p`+CS0vnQ!l9;yvmIeE0ZX{Vc-a<FsS{;2froiF}RuKsVS&?A_2S>`>UnnFn$j
z_7LoN$UB@f^c8pmzNs4oKL`H6ht^#I{{HCV_b2BGz5wUQ1&qsg!J9wGZ{YnC`5pK_
z*>~7~{1AzgQr={LiL1EfiG3G7ANVzHf;hDJQLu9v7lOZ@_&4Ng@DlpQd&D1Lf9AXB
z!{l!<5A4H@@55h*J+A&}<mS}>UWzZtKReYexZpb{I|*<WKQMH*_CoIo;k(Qqy3YJK
z=hz2~SAm}*7ekMs|KLU89k@pBDE<AP=Slq}_yzF#I8Wdoy!cZ3m#+Z#|JRp}-;MmQ
zJj;IJSERn>#OYcGocLnmsD5$$t$%{Ln7=swwmvxV!vApmO+JBjmB||*9y)RN#_tlB
z$lr+zNj$IoKXJ;&fhRr%yR!CW{QB@A;A8%-Tn1gmUJaaKe+Ey(XKUvXKU$BWc9_R`
z)}KG^!Zq{_J3Qx294vKhSr>6<#B;>Iq+KL&eCoxO50M+;S2I85M&SA{(hh#Tm?wCL
z+yi{WKahLCFYqS#sC^keKl{u*4#1iD0D~9CzXIp~G~>?SH}K}y(|`W{FwcFSw|PG0
zee*qnf6u|A+pmuO$TvCREzjVe@rvLd{(JBkd`eyd?fNgtcK~k^*AE^xPXc;uz3Kb>
zJ^8Kjll$@Mc)%rfrIBY6-)r5|*sqKyj=xHIDRETnhjkfeT<-<>!Li-^r{Ixs-pJAQ
zyMaH*o8W)-3h=6O7IvWO2O}q~vF9mwCl5yYM%)wU&)>=C2)zfsfm7gnAG}!d1TXeq
z9iO-GBjP&5FZxlhdD@@y{=>9C^E>#rrvDax#Q8pCz2>0=f7uuDGyKxHmEaxtXr5j8
zAaR@Jiw|ixZohHV_nF^3tp^`IW!z`<H|5jDLnclS{fD?8?RLnU%$M=um(bnBf0)mP
zU8?cz*i~XbR4)J@xIYMf41FLj5IV=cWnQ$ie-G`491VRy-ko(C{~rCo_}tJ};K?`-
z;Dr3e@T)!WW}eywo&xs|`OX@CXB-#!5`F{TiRZvS_!vG#yLp&=2fPgbdItZ4NBrHq
zrsR`0Z_K!|@C);h(64wO_`Rne`cvYs^>f$1fnNzc0N>DShYzTSVNV6l@5g?|88hG5
zQ;ZwIZ;Krcyoen_J96&r(jJRm8@N{9Z2evQef7hou0rX{7XELXI`TK`1z&p45AdG%
zfa_cI1o0{T_t0nF1HP4$pwGD%!+W<b+QkFtJ#^=n$M)t!@8J{GdyFH_edy-bx9)fR
z3bog<FUD=MUg&r7T(xsh&mDNiPJliSJk@WWJSOA)5;xvBqQ=?lABkPwx)1CN`;qt?
z?eC2TZQU~99XkQ_%~J1z`BuL+9u<7Wj{}~hPJ(`^Szqt@L0{Fr!@dC5*mJlShWOo_
zlk&ujXS`hQ(bFEA`xmWio;+Z_2R^DVFu%y3=3OH10FU5x>&ZaRu$v$+<3E5NeI`%n
zF!I9KbJ!Q2=G~Ad6MaYd=>6kw{nGd;l4qy=m-fUHoaC;=F=|%>9vBDsLodmFHTwD3
z$G48{+JRF?sQy6x6RDrCd<MUZ-ijV7T_=v4^|qb`_n+qeyDfCAb-j$AN<GQ8Yp-nH
z=XZ|l(ZBZQalWnVqurSO&%JNf!3EEIuNHDNc$<57wUgkNLcUFXROsJR<W%t<zjopZ
z^cMgJvtIAx`{4K+{E!dKZ{-r;k#!@Nu<xk@XS`YK_{VOn9-Fuq?ZL?Tz<=P}cueG-
z)b-R}6nY~*z%PKS*!iWa$RV}6a1P85dV#+KegDP$9lu-XnS7J;<nO7!X}!(A`}p?W
zE6I0SKTi3w^)ab?pE^gzd!;^_{^ry*Gd_d(Rp8?B_<iR+`yjsoE|K#?f2^Ydd;mYd
zYwrVqujE{<H-vlx9ZEcv{#Njk`6EBX?qj@s>ZA*Asb6V)LhCQ{yY(nrXZr7szono2
z=DpX`FZWDAf6JH6A3|@2-lfi`@lfz*;D7uhCpcKs{<p`cc4X|t*u$_3U@yi`f;>=v
zC2;V`w158N+r`h`Q`Gx2kWU)Vh5e3wVBTZL-iqgg2iSqo53mzyuR@Q;P5}Rc&mfO7
zU)F`csrbJhf1mue_{Zw+eaQ2V^CX^!_t_8jlYQd+nGgE{oWfs9Z-D>G^R535ToKm<
zenKDl-sACkg3s6U#IIOCBJ08*SUBvt(64r2{{CW~oFC)q7vx|1@vr_w{((0y($2Vi
zpZDvpT=Mt&aoWyrr#tPD<DW0+|3m$Z*c*`--~-Tc{I{%=@4u42vo7Fs$<uW$$M&8p
z=f`;#{{J#h;)aNKC5{6)MZN;g67OalPw6glZ|{R?J?ZKJ;n!>VR`1_nzRVvy!u|z5
zKh6_;D}9fga*B`rLZ0R4#1{ZZ?C)RXSvtgT=u!E~i+KVcz(Miv6KMzDfRh*b&EK!$
zeTgrL9l?5M@spqK+v4dw=3nUmzZ-8;d~bi&S$f0%lzue6hiC3L^IV{(;17Dy<2+**
z+OqD}HMd@R;zakhM~~Q}UsvBgwO{EW{T;o<xU!t1@?Z26^JCFt;EUjG??C|1BhQ`U
zf_o1`_@#Dep5QxjL-{CtGrz@S^j`26d87I)a(wFEOSc+74?Hz)zVyCyyzw`GnBV-n
z;;(J*cQ4!X{TK5r{t!oqULU<gy&?2pxx98G{*Ju}IHVtT%h)0IKHs`{CQf6!djBGx
zW6d~w@MbUGCH}qmR6E#-USyop_nI#fJYDm>^#XrS`EwU|DIQj@EdCWw;mhH_=GB0I
z<SP^}(T8XUKjFLJBlrp*=6(1tbe#7-li$UE-ml+@`~&Do<Mn&qy-y(R+Z7!3`S$TW
z;Sl@P_kMG`eusBH{_omB-#NBl^=to*yJtSdyX693mzVs#`y!pFy}5Ge#qZ^UPj2Cd
zr|-OEeQTfn4&#82#plY&vBRA3KltrBGtM45(Q&T&n}7SA^ou>$eGeUS{0li}&3>QG
zvF+?Pa0#5!UU*LXe$l^hTljW7@ZkH$r}513*R_9t@4sWac0uNq{%i5Q_2S<?_S>?r
z!gcn)e6D=D@Z@{&lfd&5I4s<@z5L4WF+Olt{UiA2_bVq{;KgP8cRs$oc(DgB_U=RH
z89cd?|JTsV%3VwNjPyJA#GK$hd}ImytmPZ!54m??37oFMi{4LDcwUNcy$1+9$^9sM
z+JEP9*q7!@U#&O!OMb8C5<mPBexV#!zE}A%e5CMp3Ad%gFM<EH_&NQtyKnJR5FfQ?
z|MbuH9OAFk?{(#8Or2@#CNVzeo&0z0&CM4@K1I*Vy$i;{_ntrA%RS<LhxNmsc|Z3-
zLocjLN}S8QZ#*aVNaBbSN5Os>hjgF6V}~c6DDj5I7tjy8CHscmE%ErSr}tDgj_do!
z_uSvygY0>LPr!BW2})dz{E>F@&)8?iN!*WqCB^~nFV@@pPKh&cp5X2M_+9o1KezG{
z`#^ldh5TK4()!={_fv0AyaK*bXQFj^+{f0Zi{2;w%04LP0sq9C=bjt$I@nM4H}^L+
zK1%-+{@43QPwkNN8^4qBLBtQ>Uj;A7lOrC7IFZ}~);KQrA#pA4L-IkrkACJy{EGb&
z2O@nYev5H(A5HHM(r;Wi#Sih;vE6!cx$jB;Mek>8JRAA|`x-e&K8Zh!{>jfXe>nHi
zE|FKnOW=|?ugVpv_oM#;`y&4F$KyOsc0u~rFWGwp;Ul@1-S>K5Bk>HGU+alTf56Mc
z?Qq`KM}dBDe)steKfQo|-<$qR;=p>3oAjY^jNtK%vnL+uDf|dOvGG4ypLM5!Pv9Z-
zX4oI%sZRGw<z6%7G2{jL-1H}Y(7LO@W$04tNN&}G!ME7YI&bg!&Hb0n&y!#Ay~H~#
z;S;AgI-Za7OdSpF=Gfbidyt1d_nZ5l?nD3LvHfJ%`^K@qf6x8R;#u@6{RM$D^=sl$
z;m^=J;upe4%u^%|jeN4iUAq6!RlWy&f=`JjdkWqWS4`ZlaofbDk{6ZyPxHf5@4)*=
zn)g=yCVAB-y8v`G_ZbRT?0fR0#fRLpww2DkcWk%b0s9>L;vW2i?%<Cvf6_h^{A&EC
zeqX*{_yz8;Z#OQb@hPGE!aw834=rCrUSgi$apmab7g<-M_9xa4{eqqoFHC+*^1!@z
zjW~SZG<mAtA9bH+>Je1mQN9JPcyFH1lc!@o9eF><b;*<3BiAa=#{RTi(d*ei<-OEZ
zKt30rDz8PJ?tS9u7uFkl=lGs<CU{5uX5;<Lmw_M5dW@@&9_hXyKS00X&%h~hn0znt
zZuN>i{PU#e@x8>0c>drYcosUZ|0w)hy%>5JI8yHa;P`uqJxRHdcm?bh)8D%Gj7Qvg
z=(6|!Bp!W>z6@MyuY~`Ak37i(`qlBbb;+~dHF{&~TlM|~>rN%VvV6$<_P~qeDcrI@
z-opX>#U5&X+?<2=aMW*^dQ0k^<R_tz%y{N0f+wk4sU3lQxz=AC`A0o5_jwZEwMBj~
zAB%G*zln7LZ?it~OX^4Qp26HR>wQ)14|-+lcKiM0-MS9W6Z*tG0L%w{fc56yv(tSw
zm9Mf+=_^n4p46e<V`tryZ^^wd&387>lqdB#$e)QFdcU&o=G?TmAm7yv3f<-00}s9z
zyQ=p!#(!gd66h%OA9{p*HS&jb0)TVom%8lIXX153KgqW{-3LqDdgN>KXdC~X{?Iw|
zi)$AoKd1IL@_oUJnUD9K*6zr6<4=0%{Ad5X7YjIJ{<PO#$bNQR@Y(pi)Hh>KGe5C*
zw%nsFJp!Jaho8C!=8^U{_;a7%sUKrLVCw!=el%~P{$B7IdKJHjbzG_^K(9*YS#SIn
z@Y%KY2Ka9C6IeHV4gDRs4V*j$-ju)LyPVg^<K|Za$3vg3kCJxaQ@EdT%nQkPPk1r#
zZ+?2}Su@Yt<E>Z0z7coFIGhLa2yhcS(=GUJf6g)IrMw#YVBLZG^|9XqfAE>y(+Hfg
z55SRio5+Kvj!5bqc%KD!rR0&S-{0r={rFw|C#eVHeaX{bIg@d6?%ux(9~`+u`62Lz
z9=1e}a6jXxupSoh0enKopqnFydk-OaHT|vE03Ad>VE-9s<nxENBhLdrS+DmTcK*O&
z=*`nbd-;z03OqzUM4qnS7CKP>u>33e)3yV*)bXJ`d6d+}Xq<=gWb}3Olxz2(KkGtX
zNuDcyyR~`=d;mNEj?ruG^WN>)?mafC@3%)ksC~iuo!C{7|A8ms=V(XYBhQX@@Cf+_
zIY0E=ItswYd`I{Xep&Y?dZ+h%#vZ9$fgNZ)wmZ-HzI-8aviG?)e-Ak%^5#S7FnI9G
zW4|@>kM?-zJ$xZ@F!;MBKSj9<dGd$H{>qn(NBez#-;V9p6T!dC{Lw3cJLG%dn<sej
zMxMQQlsE+B<megJC57KaK62lHcjThvt6L|a_8{ac?Cabg0G?nsoO}Z7Sdi~Aan|~U
zflu<#fpg9axhwV}?LWXn@^O?mz?avL{f%=Ud%pHQ+Q-g`{?)ic>+2-%Px&YIHu0|Z
zlfpmsY@n;Lt2|eqLLMP6H*^v_vd+?b$Mz-urtJcMx9|(-v~`gfmvbXu@;>d%hx$md
z_uR5S)|Kl14}BmGq<$dy%R|ov{G&ho3cEn+rAwdVANKy|_yMis1^vgbbf0JIP6PkQ
z$Mc?bVp5+3y`XjW<xkifsmH?nkyo$_70w4Qm2a`1QtuAEzIJ`)nK%vjRO9rv;I(yH
zkOPw!zSf?Dy(4hN`n|tB^%bnkmHIG@)BTh_1OM<V^n%#8&5KOlf$~h_X)_=2MLbG9
z1Mi=|r=9PzuJ0fFTVDph9`R$5d&IZIS$cnD<e!JwLB&hvmppRsCkNiXkoNe6wEF=k
z*pXsC)ZhC!&*Z;}ANXG<KZ$)X{$co+@K5`vkNw4$v7=&-Gp-K22k)BS58Z5DOz*Kw
zog(=Kb_?K&c(&;Wf4t?q)SKcLP;N||i|xn>Gq0!Gk-%@{7W5<HZP?H31N5!&^jqvs
zoZoZwXzT9=&b1SRU#SDbK0HTXu+CZZAm9*vTKoTePdg{}8QPJHCNIwT3jCeJ2k=K!
zue9DC^pX0);BDj?<9A-nlllqld*T_q=Ol5S=sVR@u&Y<E!LBa9n{lk$lR9C-Z}?R2
z6JuTSZ{Q62Oq?uy9D5q`fsa6+fX~>!m9LOj;IpyUq4%8VJn~revYEei6xkp2#L^A?
zlE7K&Bj`Uu|6+fjV~w}``LSKU8U0xocn3bFt|xd}zjxy;^~XWafpg@4_JQ*rIMkop
zI#kRv{^#DWYkUQ8Mm`&LJmBl8Q-Ph!xGw7IfEVD^<NUpTx;Yo?;-rq<t@0T0Z@Kqg
zx&fU^oR9UYm_K-wdn3``rEBp=$w%TJp$?n&Z~Ajy*aseu?Z$184;Xj`&ZV34KJ>&o
z)6gyQ%u7!OPOO)l{glrVU-CD{{?+fSm&1I94tuZs1s<L3V5#E{-*o@^?!e<(Ixu;g
z>a)l($VIdxH=|!5C$L`DaS`urJ(~DE^_SLP170^yfqe!(k<*Y58}D?VC+nJZKSyuk
zyVlW9e6jIZ&<*y7eNKKl{@mt88dsTk8SBUq?=<t&E}#1%jGx1<N8KUXbI*(Miu51(
zQ#(3xDRmfV=ev`~>-`~(SA^a|7Y6Rsx5IbT6O-SoKJeP{J^aktVS)D<f34pHy7Je@
zr}P%OG4QXQC-;KrFUH>erQ<lRXZA<=5B$LIpZd1yG4QR#`MVE^PkRVo;2g{YN}SPC
z`y*%Z{lul7@Q(S+x>~<Yc+UA+7r%0T{W$1xsb8YJJ^h3;^2uo@Uwq(Py9fP&tK0GS
zX`HX*IqkwTexmSe_mzEUy^h<lUB6=PJ+^K$a^K^$^UOWl(l@>fd^V4&b!h0v`d@tX
z6i?yfsXwM%13ul4--G@Trv;pgZ^@I=K8;?Nx(3=EQdh)zLMLaP+9MJ#D*U7lf^tae
zt~q}2Lih(Cp>M!j{1npF@ImEL>^|5{i3@7pFXKNR$Jg!|e$jj2_4gsaCazYyPwK{)
zKN3AcyLRisME-ES@q=ntDID`1_7}c@9Nqh|IY;aR;0^H8dldiVxK8UkO`R6)9ms!U
zZ}hzQE^;7rHFe*R)2ye8|0Q%!`xNw%{YCG9e`Fu_3wnEk!{CK=K+xlAAI2VwUh{Zd
zmvJo6)uFe@b?)2jtN6?Lg$_60NB;or=%<Xs{J~4)s@5B8JxS<b>!b2)e$c$PNA7fd
z=z8{3yHfNH`Nx;@9&pdRs#h_8;w0IJ<iUCW3h)xYzjy<kxMy7>?-@T$JwonRf<EIf
zdokljK4D+cuZ=UIKKW0M?fN-@fA(X}Q+frzrmoZd*bn?r&t;vD^JJbqU+6>VzjQD3
zUq013oy;@$E2=Li?@T{R^d|Kn)=51b_A&LgJiq82&V%3NK}3HR51K!Q-48yLIA`@h
z;1>EvzwA%XRk-H;)Fm>H;_=unUyhxGI6dqT>I=kcv9Ggl-uK0Mat_s(M?X@ppzap+
zy_hHPIe4VqEca_@XTU#_I6nPZoHPCz@NV$(Ir6|s9t-@J&g%yO{(Em*<x<Au+?&72
z{INTcM;ZM`xduLxcKtoUBju#|p67+#5cvB>p3D<^n>a1kg&f2FfBD$I^|9BtFW$?2
zxy}pyF8S>Gt3n^-chDF3EpeE!Z*VW2avbX=u9E%3?nit`<iR!eTk{ih?~V3+&g;`@
zZ~hwkFY)5{<2u!MF7n@d@0ols^`w=5zI6P%dcos7q4T%2e<}0s{m|I8!1qrd=kIrk
z(_nui*BQ@MyD0R8@BVe>^ZDb`cpc6gxq*EHu8@aYzddsM5_`V%F?9pvU*HpQ%J8Y=
z9eBSj=Zl`px?=wkK7hB8E6tk&Z?M;K?_%zCmi|M}9_L9r`v<-gp94H%$3Sjjz1SIm
zht~Cn&L>|BI}&=HcE;w*r*2p4rJv;O(eH0<2Onuit{8k0{;>lL|9U8X!PnmV_;&9_
z=sbV)@%@!&f?w(#v=9Avy{$7yJNy8BCwyEzDe?jDnI|9mbE2o{t-vkgpsxW>)h~dP
z_1Lce5&PB18|25Se*mB4Bd|W=?ucJv9q^sNzj7<>;1T*Gcog}|IRD7M`kmpA_z|${
zBwlonUToc#`qfgWOSx;{OE^irWc_ii_ey*8eaD&i)pvl;)U}rm!;fC19r&m2E9VjZ
z=s6*`G2h-3g1v%v^l<R2_&DP{6yN9j#u+jHnXmCfsk<)y2OpVN?j=6m<5N2rasvJF
zi!nZU&HV9m0f)#<-22J;=6&w{G@b>1gj~cqBbR|M><987@E?8I_T20ITzM&WKk*m(
zkoa)pNwNR6PBZdl>c|T}e|l^ePUt`OUhivaJ#YFCT#6U$OYR#`FMj3tclluMXEu&E
z_gpwm+NG0>|3_(Wf8dRMfZu&D{h8;R$KS3CIs;$%le9y(!6U|j{!_Of`6_WK>T&Rc
z+Ra`+_Q#&NN6uL*=aA<}JLBOm=Dup=Y}Nz5Fi!HDjPt?o^Q-iyop^H26T1!co$tY)
z@tYGb(>%7;D}!GZKKWknQ7U}{-e?D|mU%+Adk+ie6*w`Df%yQR-#zvduD+Z8pZv}3
z%6n;7&!T<Stvx1uO1Z!H6Rhd?M;QnHf?t?<#$W7w=nr3JpX;YX9)_L~mx4bCyg|<(
z{yg^lTjdtuu=F4L8M%mcA}=k0fA56{E|3RnM@oL;7JG^JX|gWlqr|By=Mb+NyN&We
z?v2r2LpyR#`Ngygx24au_W~EdVeg+|{6Ea|wU2M#F50!vJmd)+_FjlL@*BU*Re!$A
z{9nxT)wIJeSl6eIf0teY$L!PFX$Q~hH)$LZ>mGT^yk@=w{Y<_m@B_V-zoCyn|KlGv
zZ#nUdrT_33@gjQsUcP|6D{_?f1mY#WpLY0D{V>dn{fAD&k9&{KpQj!8`CNW4`OY7t
z9Xi>27ntvhd4fmiRgo*yw_Z8^-Tslcm%<zVm)DQKm1}5c9QNVs`3*dOE$zkA_;-YV
z=8wLE{0bbyj|%@UrX9F>oG1HqpC|l$zGECR>%iVcyfN|s@hy#m#hx8GXN#QU{ocgQ
z0{<87=nLSb?cpQf*A_dR`F-F8brtUO8+i-=2=+403pjn8=ZkrAju-dSsi)B&zVM~A
z1Luto;UC`(9-Zcc-~7wz&v!56H|cQs8vR)p>-|dle<J<M2Z4X!kM)7q)td_E=*95C
z_+OMip-;$l$REgAh5yHVH*xRaH*s#KcpKm!xopPU2R`+yQy-vuLE4?~8^`wbVjS_C
zIP=<<hzF}&guFz)2KFB0{M)ggbO8ATIs?4|Ut;Hxen$U2$pf?(PJo}UroHzw0-wPD
zt7&I^#<_ye(BZ3g<*3|KCtvM2>`(axa1;Jw-VE?e94T;~JVEUbv3na2kbFJjri6d=
z9ps{~9{U^D4PRnj*oDB?(My1T{r}V<DPACF1JCHiY4`q2;4k`x^@I!m=r71iz&U;s
z@S^e<@k^1H%tvM)h%0~(L1%!w(xrh<=@{pZUJRe?y>sku?3~&OV&{}jy^?nN#~*RJ
zrwhB*MZ5f*`6Gt_&wqMs7oMTptOLEC@$qZ0Z`eP<3(g7sw{cDEKl=E6o{z_Io=WFu
zpUmg|+OeIuS?OWoDyy&PZ$<7--CE;ATL)?8Yh8j_m-ZXt7p9%~V(T*UKJgCZjo{xx
zj+=h^f5GGVP2MziFYEo`2T5HS>u2y?=0ltw`3lrMrd~h!wd4!pPp6Io`Lom~#J+`m
z$oyM3i*rdGAjVf7B#)kTwJs6%kk~ocANer%$p6E!-TWu=YVq@Pe?8w#9<cedoCEP%
z_Zgr3>D0Bh{s(!Bw|ob?_Wa#^7xssB%y?_!qHQPtf^|U8sn;~~Hy;%Ihfg){oIEt-
z6Y?zHJ+8yJ1n9ub$2xEW@A`4c#~JvvzV~~_-@@aJr@RN;@^|)^dI{haa0vXocYIIy
zgn#iK?fBz3kJL4J%6=Lbi@kzzrro>-@aWCsx|omWH|tb>jDH+^o^`~5OZY1LNjz=p
zUYMVVygdD_Lk&ETkH>idw|{?ZR~|`zym95g`M`s8iuqGNVEV72&-y{%{P=d^mH8sK
zV@FARvF8h&gs#v|9b)(f_4F8reR%)l+pTLv{3i3veLUKofJ4rWeZ~KEpYa$!``G%U
z@*(`v=;`F26UTwx0e(Ucldoa^dg_8U@AekHV7&$QJ@CATZnJ*tDaAf#ek=6+-DA7;
z8e0#F`9ojWpVXbw-;z3m*tLzne*5^I^*y1N*iGOY$>THc0Xj@QCieTSW4m!%sm~!@
zLr)|x2tO?GPRK9NGw$OUdLaK|y}(1@3b_dSXT5*s$-cgM>~9^2+~<W|NV%5xQr`$Y
z#Cqz;Euq8E!&~V#cuid&_{f)z?dIPkzsdR*)M+gIhn~Ynpl{xbH2(QDa4y}Z?#+DH
z`h4)|(rwlQ-(kJbrQoA=glBx{x%CKvpWatkI!4{9`*9uggU`T+)$<~Us)wK-&Un_v
z<onIHj(h?g+k>yh<B@OnUfPQnz#;vbp9&pdzj8m6@*8v#J&5yx4$MB7cal1M=ADyY
zdqGdsGg7Zw{Ad37JD5-EdC=}TCZ7@bwN6OnbLDpQkod#*wzD4K54jZn$9G$g6MYEy
zhwma!%sAF5<{ZI4_yp(pv*UZp7wjMV6}i5Df37?aeVYElbLyLGZ=t?p?DKohQ@;>#
zFwIx%`QvZJK9KkX>p!th>=eu=d6U*xN*xsT$Gmy!&p-#DbI7sClgU?ReDls(Cw07_
z8{se3pU*u@&Y$(8x5WQ!JYMVroS*HpUh{}kPZ~OEy+i2#hv|<TP(F*?!8m+3^vL?1
z(+(Z6z7%rdYsY@#6ZRC&jq?FcL#OxPrSWAyJhr!<xpHje8Rn~;0KegUh)+PTO1`G`
zP~xBM{Y%2<o5yzTag4+MCVo{qLO<daz*FvhOP;-UDfrj4TOTHL*mVNO&?E3A@B_a@
zeq93(=IQVr^QK;A_!s(%@BzOBf0N(rcW8(HfY+(JW8QA^?XK_wxxqLW=r3@cdbi3a
zjUOZqg7}sDv}0#QK1RMJ&jUKzxWnF8h+P!BAaDR(p6~6^XR+I8cSfFK9OzZ#AM1G(
z&cAc)ul+l9VvGyQI_0mNBlCfN=Kf0kb?6<$Sp#<&-+1iDnIHQ);~3XNeag_UJ^aNw
z0P{X{(t47Ni`>pWqQ4*);SUQwSqBFFh413eiC)|~66(L4OYA>O>_X;MAV<~iO5Nt#
zky3xr`(X<I&^yinzL0yj*T9?f5q%7L4qmgL(few*)Q(iX@b>Y&Epm==R>=90TkIeB
zKk4uA6Yv$dV*K}y?b7??NvzRxx8^0?=ZU-ozH(03QF{;DH;(O3#Utbq@DcwZddE+W
z?czUhi{A~s5V;qBNA&{g{vlt}PMmq<9O#?%Cu3J{yK-0j4$?LH*N#*_MefnIz7F_F
z-2Hct?Ul1ycUe7)x<mK*ojR!}JstXw{Cz*Rn;(rndv#AEbeMMFi#U14NnHx_)c8K{
z17F|`aKb%E^naZG?04Xw`Kh;JM+*Gw@8>+>UwjvPA#j&GQ0X`Lm3z6(e~*90ybSmk
zdJ1)@a=*0k9`il<$UDb&{SMS2jNIP)L!sx^iN!7yf4KKPqz?M6`Ze%fJVMUMJ(Hdf
zaRZzW{3&*`r^t)?HBy&gjUV2+)#%m8N4y6f!WW?T;2ZP=c?&*6{WSXbzAX4w;Xn5$
zX+L~De}A0c$g}L@dhFl$j<t3t@>zh3<l$)_Z5|%`0X#y_*}uX${2h7@eSqHu&QJIP
z{zCteFMxmK_S|EDd}V#d;G28_{SrL9fFI-{{qBsPdIQ?yqaW#?iXYbczVMqFS2+>9
zK+g%@DMx{))l=XT;5+gn`<{B7d`CX^&hhV_FZNIDLa8^o$DS(vZe8;?kNxW}v%V4V
z0-Uoyz&UjVGM;>=_IdK<85ezwJns6Vk+0CF*!RbLH}NBT=&tph;77n6`K-|w<a76r
zp8AUzH}sHsJqMm^hq3PR`^Wz1?@R1fOa1To0pJ_qgZeSJznJ|`yq0-XZynz=4vYOn
zpSe#vcn4j(h?8NxYu2k>5BZJ#!rn_A^dBGldw<^jIKFW&@z3cG1b_Js^Z`4?2gmQ6
z^6J@l?ukZD2S14qMvjBOU>Bla;yKsKW9YMmf9P=KBI2~+<M2o58uBar0{o>P{F(E<
z&y)R$pW`8Ptny6n<*}|daD<#dfBcA*2cYxVJ2^M>IQZkt*ZP_48|}ok#U5z>2lS?V
z3%m0CMlL`uF~17^F!KkWut#{WMdGHsuaA8geD?kj=n?zKeX97QiR&1CWc|nBmvLmo
zFX8Wizv3T9FN3Z?Z<Eh1{Yd>E?N#6pakR)u$rtwCk<`~xo}oW*4jn_TBTle-I{1ja
z4SoTgPn-#KOuq|q3;Q2_t$*NyWB*&|kMTI{Gjx*kN!*=q0pDhS88`Qf3g@}6T>o?Y
zM9RI1tJQ8EKa1;z{zGqbe;4Zo9`&=MH-Hzh-$}Q@N9JApN?ca&QSv^V$fMpX#rLoS
z5I-{Qo(FuY^|F&^Z2joSGy3ad7dGEA`!1ivkBhwszQB1x|FO5Re(XY#2a)sl==Ii<
zi9D$u16_d*eQ<0yo{sYf-}XEjr<(et&==0%dl|SNH2po#;2Hgmle^CoJ(%w$zDBwD
zjpI{!4}Qn`@ju}YhTfv5*6$X-zWajy&OQVG(LdCiz~9JG=)2N;?7*Bi@ErR9=P7@H
z&(Y5LwvH0;z8>54XHdV3eFUG;TbUPlfL$^7Gszc1=g_y+7r;mCNPLg)qz;nu5AlNd
z-|rtip#!(bBg!4vGl2)rXWr9J4<DWOHF&@{55cD;{f(=-ALl{)L+}WHLffU&=o#=W
z`eElr{sG>YC*Oy!^F8P)=X7C@@_yU+-HZoK-6`~F@5P2sH{K(0mc}O|AI1*seQL}z
z_krj)>^<bEv$jN!Zk<i##@x5AoEv>gyYhXW^LOi$-}4@L**Xu*5BoHDgS^Z8GoExX
zdXe^R>;TYN>@@R!{YBErpC0>bPe9Ir{uR&QKg=_9SAB>16K4RN0?*jTryp>DeNlOC
z{%(99d^>hV?;pTUSh`JoRN`i>Q$F7@&X#eaA9+7!;h*!purH~90sq7^#6ND_DRhFk
zLFV_1V>|O;eC^ruG!Eb=$KT4gd>_1p4qQCp?>ry!8+lN8x*vZ_KY+XHdEhDV6@Q=p
zN#KMyX}*{I1?>-fH~eIeKgW3^r$N`64-vZH{GluH=bLW>pM#EL7i1r>kD&*kZ(*;-
zuFUrsmww2Tvp)FT9=jX-$^5bSJ++79uV*~!^I#u}AHV)G;}Rn8*PpJP0XYW#JbX&~
z3Ub@P|4A?AnfvU$e{%3gxr*<iw<G5^p77_#{*14F0zHYn1o$&A6MBRE16*Riee2k+
zoQ50)-ACUlKf}(~_)&i2uVOyn8}N!8d=baGWFFZ48t1580sl+jTK_rw!MMov$@fry
z>ODA#XVWhUUIORH74Yrki5UOR`oW|4PpxYaKfZaNjc);8cptfp{M7m@@$ay&v{P@P
zc4@u`Ucg_l%fh$72jnd59l-N1j_ugHo}w?_f<M5!{(A5Q{tn*8&T3pv?wRDAtb-N!
zRzK$b>Nn^UdEdN)&~@vMLYIM?<a5Yhz&q$S^CF(5_)Q!p@XkE&ldyj5bnFj!!}qYO
z0soKlch(L5;;(@oAkRG>`(ZcGz71c+4iLM^$=`-w1^M@@$Nu`w@Z-b}V%{+Hg?8$+
zH|~AbFF(&bf#X}?A9)V^K<+D_Fz+sK%|5B;fhWk-&D%x41n!Y@kXL|*)FJo2Cirpn
zbM(5<L*Wa0h#t>*&<=hj?n?h4cn92~-!mWN9>xhgo7atA2b|(>OdWF1pWnIf#5`5T
zMP5$*)jjapy0zMAdtV#yMtksrb;>W$m+-%VFUbp2P60lWm!aJCIDZFk<M)?;F(2R@
z`$qixd*l}R0Q9_n2Y({BKSj>hUVvUh|Jb37H@nXhc^3O8`uJ<dr+(o#j{T&g(7)mb
zbqc79LVXVEEKuKodVTmqu>XR8*nPo^H}ZGnGTM0`JOEFqFVuTjW`5!&elFsezzfzx
zotxK>{g%o(GjH<~krUvT@X5g8L*P)nk6gq$teXiOCO<-d!TZN{{qM{NJ1uex`CQO{
z=q7gi`#hOv?vHSM^cLik$}>MZ{$2PFUdTV9&jR1tqmaL5e#m*)>9qeq2f**xeJYnr
z-|;&@_Y0T3*MYwW{(O(RtiT`q06P1X^v``(d*adc*OmVOr;qcb?nv%S@$bktsWWdK
zdiV-;O|Xk2Z%|Jxa<bz=caZ1F>#Y1w-Z$q3{8Pv2K7U8AgKx%OYJLE8oVcU--H3}Y
z&Mk2hoG*IuL*YE}P3T+NWdhHI|A)vwYvg+A!q1MswQIo#Q^!HO`914u9hJbpaL>77
zCyT#XziRU(ku#GQr<@2JA+LZ}kuSWL<XgulaI1dGJ)+1jz%9?*gQh<!`U7}%y4Qky
z3-k)=P+`|izUo%{3Gom2c>+K1<HSXPSHQn;NZ#m-gB-1WqVchb_g*jTpVD9A{TQct
zQi=1i9y$Cg`RV!>tC#*XPvAZ9t=?O?2)GBYQitau_EGgH;2e1qxh3~{_TDA!Fv(NZ
z{(@YPx<<{TQ6A2Hu-Xlw``G7VSFhbtc%<$X@CqKl&#~VjpF^LZuizDM4qu#nE%OH8
zqr`QmzKiuh5(gn3^WA&C3m!qInFsa?&JjFqoeARA6K7!@FXssSupiK`;GOY=iPI3i
z>7RT9{lDbX#!mAbdHxo;{yB1v@iNhO^(#fraX#-Ie=D!EpR@z_fiL49Xa^p#10;XR
zxa;p8-$Q=hIxqCl#H~xGt9SIi4(0`%qF<o5<4*@3@dG{1@AwtvJIGnAi+X799Qz|L
zo#G7nK5`uNggT$e7qI>z`@lI;&-2P|)4ZoyuXbd{fsdk(GY))_a|BP(pOA~-3)tHl
z7ZEu?y9?u{UX*ck@o(u5i#)GiY}RQWI(9<7&-_zgLO&JzM%)hPi`<A^4!8pz=m&iV
z9=?C<Z@v?J7<{1)UhBtj4_ExH+I_%F=zH#;_dAS-d=A}2Uu*rj$7#o|0{zH$8<)5x
zF5dYghrv&Sch*B-KFs$%&xr?aoVoS^<RID~kK-H1P8@dc@k9TLo~~XGJz<~cysRsQ
z95Lr?-e~fJw5#*?p`XU@A+Ox$y?Hi1!1%lQd;LJltH}e^?~i>0IUYJe+!1vDtz&=o
z@npyRLHYydjMICUIPcsy!gpJbUAZ^*kW*d*{0qJIjpK6*{7e6d^UD5gIXCU_&9{wS
zpdA4E$=`F|ns!$Dj~*_+{NUKGeIB|^T}{S~zrg)qeCo?LzZN~E`abtWhYuRhivJ#Z
zjb0Bt$1lwL`Y)gx_v5-waWJg+-D7|GVEEH>^h)Eq!FTGaA@6|)@MX>$yy0Fj@E3kU
zy$J9TdA@WFItjl(KZdV>cf1c=rT&Tjm*l6&7g#UyMC1L?SBOV=oZrMD#1Fd%{*~)e
zC&c`X=GkGdLSJqkAM$?mW$8TQbDvA$pL)y54>L}_@!Pq_Qn`zKlh=>!z5h%3lzaxx
zk@2A~sRss}=x;}EuN`d0vCa#0559~a0XY&lC$1j5P3#P=pZ3Hbnm-r+h5oz8nNQ-$
z*iZ0Ce|qW>$zPB^b1$dyD#%N@H^lh5S%>mx>es1%Fb~!R9{_IoJNBaD5%c0)*f;3L
z^s~Mxexhk_zPWrK`qui!|94^ck|V)UMPay?(n5@xAY>#2l-uTIgRl%p#ulj6X2Jlm
zg<484rIyl5VL*OI%D*TvN>y}rW@N;Docj##C6|lme|#RFJUrqP=>L{^wjaXefW8Iv
zHN6nO!RnjRUv2h9>u2dT`r`Pmor6q{uz!#5U4Ci$&aFPyKBj(X<EcklACAb8oy(Cp
z;O<8c>GQWf56MRzUL_Y2C*HomDdJJzoPW3O;95TqyXx)yf3q*>EAdlw_4o7rm&lX$
ze_1{!`ImaE**ElG?8m#lM#;lmpX~J6T)tWQ>^w(K&TnDggBvH`;23dT_p^)8H~#kg
z_`8Y&H?IFo{ax(1(!W0c?8@YCEDnp_lc&A7MEf)1YjV~+$ZvQ+9PpS=@!0ZazRvyD
zJ9XNl(_fv(ud#zi|Li~SRUZIfz^SoQmQU2ayYwS}NcxoS?>U#sx{g2S7yE+F(>Jel
zGJiY2AbgMB-j4q}?!W6R9zXoznXTu7pM9t2#NM3$$9vN^YdHB2=kfV@tbh6<-aRM%
z3T7YG->c5XxHx9|N-hqnemZf)#VbEO-@o{c-_6sqzU{A-{Dhqk50`t+&+}aVMsf~r
zbw%&|F{yJJo=HB=`VqrN_|<;1kI5(B<@xLk|KD>ca~|>fgprT*oq6$>SU38GJR)cC
zv-hSC+v;3AM_mzp@W=DDc_RB>^K*aW*61^NP5XcM!9DB|^b7C14}MRae)hEYBoAfw
z4|?|hzQ=Fx!H0f3p98&rmT~-%yp++e`&~VszP66&;H&fhZGP6%d#q3A>v><D|L>{s
zSM*eQ%)X~*=!w6cfA5@v<ZX_x%1^0VUi^oAtiH=RAoHi?T!iJVM33?_tZ#ne;CFrp
z@1?KEbK~Ufcjw>DgI)aCdi#xEtvmTa-~H))|LpPPz0O}AJv+UeJlxiGZ2yc~|I|Ir
zk4C<~99R1Kk}G}_pT{rgHU5qEKU{pq{Lwvn#mC-*AHK{rc|G(0)eo4yWw+>ecmUn8
z_otVw6S_c0-=4>3Us_LkT3n_10jXnLd{Mr^F`v8hZI1EPZU6H;E-z6$Xm%HT3(p+m
z!!hk2l6t1)asDHJXScvN;-A)yzc|ld+)G{!zhUad))&P(wy!lDBd^~5zE>XS+j)My
z|4whnYb00UkKmN$KhjI+GxB+PH|$XKPp^KJtNGw7&o};(`QW$UrPdM8-;AD<N4Gvp
zk$dZ72~XxcoB2bs{>uw#o{IX4#2q)D_`Nvh##6_%`uX+=F|X8b%x`C0oow>P*4OU%
zPW1X7dR{y=^~}aSkN<#OA)jsa>fWb6UhI?g<2s(Rc<nJxjx8_2I(RSnV4ck~{d|{q
z0cX0R&*156aMm4ehvSkrJbE>b&R>pk`MlLH@+IM~*bTeF*{K&8KB8aXF!~2yAM;q8
zpy$iSzdFB`{X|ddCQ~2Od@tt#PEVi%=fB9G(jVs-=f6Pr_+tH@(LK4xzLifIy|cbB
z_$_%n%R`_Cy$3!?|HI`$%QvD|_=Wfv$Y<Y~d{cZ+ZclHC^S+(OOaJ8~dJx~xC+o9L
z&lCrs|MU-iia&970epp?UyiG|w>Y=^KR=Jp{vqet-^Rbnef-1l=daJ#<z2)M-FWQl
z#aUt}J|!RHk~q_?>jWpkP39+`D)D!8tWVVRit~-^qyKY`XZUM<bI^6@fBs4IoBIBp
zQvjd9*~!D4ouJO0zNB}1j(O@fy?^UNE;qhOU#G6h-`f`mov*J(_+|N-<k0u$>n(Di
z@_y&evj@rjFV5G=-_|ja=ju1n*JtPd8-3yfc|_ly$J;M`xJ-Npj!(VV?92FVE*amI
z{)e;LUlX26oMz`Cq#xJ51K+?i=!>5e4&dh}57npIFZ3**SR4TTIrr#zf9tGTXR*Al
z)K|<8TR)e$2z^Tr%ZG3uxtD%C%ReDE*pE3+bNQm3e{jz1qx4r~4>(V4{T}SE`<j1-
zuFMmz_g&4`tsRa2e{#O=`7g)#VQ0_Y!hfDiAERe}y~-csJuiVC2!G$@_og5B;_2kL
za}H96u)ekQYvK>9i(ps4q3|#|7Jr2U@DsZ}{Vw@Umd9^BzB`Y<NA6BfSSR=nUx_cN
zi%;Bi>q%bIf8-*$1b>o?>6>YM{2IHl`N*T!;Ge~9@JsZ?@Zq69*Y}28i67}H`CG%u
z>;d?Py~@u0^!$IrKk|YPyfga7ALItP9lLq+3!Tpo@#pjX)9Y{!yCdhQ!9}ZI&v^{&
z!u2Py|Ht_HPdm>d{UPwn`ZDp)c^<h&E{dlck6d*B>c7*^YJSi3?Yt&_FdXcD^Y<L|
ztNtr_74zr49oIjd$8U-M4Y!gP@Gp58{XY6JPj-IJQ-f#BV|k(Ef9T(NvespNqeB0S
zhoFCXjOoj^es1V5`eO90-d4Q9`th&IXGs4B`sGe9r2cw(LEYfr&cE^La7+9}vjfTP
z=C#wy=)`&@-Zz|_`<LGnyWpuf1pOx-Km8LrA0BO=adiHc`>bp7TI~05Me9tzKmVTo
zr=PMfTR(J8E}GxVaU~!BlKYN)q3H#3AokSGA4kXOueJO$e&N^)%V!XeNS(+0kMdE|
zpXSo|Yv_O9_tRW|cmDfuQ2Rj8lk`ICe3Mr}FE8#z&O6T$os)YxhrRKv#SQR_xDS3b
zpPa`ux$OPux%t|U=)e4u^O7c~+P55i$d`lP$g|YN&mVp0-{Cj*FC2)kTX#)f*$;9X
z{g8j;-q-mpFU~yJiANuROXShwKlEwkeEK@hU!DFY^Dp5m`YLhx`AtISiw~e<IOFB`
z{c`^M_<}q@H@+Lax9(A1A9*D1p#J(b|3@Fa9oN*84TrbymGxwQ%Gam&Q-83&jpUv@
zs|WgMcC7s*clmFETdwuP@ISS#)ps4=d+B@0HT$GKBIn?eyVGl5pZ~tNb@30p?D_l{
z_EjAy{~uh<PiTMrKb&ynxh<|spIQg|DE@_>)BkFHE85@3_rzXWetY`a3|F9AxUKmO
z_+1?$x@Bj<vGqG8zisk7=Lk$6sS9|`{p_aJGvs{sTj+3pdiY#^ES!+|{!{T4{}_5B
z56D~iAvpZbub95gtD8IMZGLLF3Z2uB=@&M8pBy5$%rpM9)iD`|N8XNk1uu>M$t8Xd
z^nlLwd0{WY0sP<1yP*fj1?$iM&_23}7f&y|o`3JW0PEiPh5ZlynP0xRULITO)~z=?
zd-VwPk@=|K6yK!xgGVL@;(xl-pZ2@+_iev&&R6r?-ixEse`9t+>kbnCTi!(c#_a>z
zeE#9b*p>A+&aV~zx`du*Pr3j1=fBTBvY)9Ny32!v6H-@t3qMTH;{)_hUcMZ^n_mMD
z@sk|*XSgJFfzR=OZoR|_*}LdE{WymYk_WT(MF;Gh^jDpKq<Dk8RR64RP~zPm@y9N|
zfPE4>eSB2D2tHoDeEkXJOU^T}&pn4==TsUe2i%Vj`N3X}_u`A@E504q>T&qI{pL#N
z=rQ@?n@`V&{%!70{^9b?l7}+?hV}7XwR?T{7w7w?FVOWT`3(;x9yHv8{^1|{Oz*`H
ztj{xj*>h*+_YM8bo=p5^dB5!R?AQ9-@mq(U(e3;l_*2{xJ*Q9g&ZP*yEZ>9Of{);1
zcomK#kJ6`Y>y6G{j;s1RcIq$A*V(W3i9BOh9M4(ZH+>s9f9FRvzsBk6Kd(HsFUi}w
zJ{X@LzxlWAw`U#T!SofqtLG%YtqVF==j*xcJLx`luYPy>c%grBB6+;zg!o15T>ASp
z_-FoZ@!#Y@?Yz<C1<WrBN2t3HZ<DW*cmp~geZo2VQHRcN&0os+;@Zc1U%fZ|E9Mso
z4xV1O?(yr+UUA=#bN`q5tzMfxP8?x=)YPlZ@0xy(>jRMIJUz(k7%n4c&Aah*cs~A}
z^&e=S`tiKkg^dT{*Wj+ZK1c97d2~E)IL7<h&-aJN^+(6mKA_LqYsvpyd=wo7|KHIk
zJ|V~XQPa0e9?|Mt*$<KDw~Y6G?_GR|Jpb4E{@385_vjaVw|ERZCy(Imcpkaeezo=y
zJ)sx-Ne-#khMUQ|gHE;|$*-7QoH~NZ=k_PBo`NgTHTn`iMfdEkm-BUWsGg&BN9@hi
zN9^2r@nUopJG}9Q$?u<?f6u>apPZAB@%c|vpEbXE`d|-FqOZiUcb*UYAOAnRfex2%
zEuS!XwwK`Z`ISQF%X5{t<@<t*c7M(RygV3hU%Z{`flvRB9la|%DE{%;_53EGtB$vh
z_?CQ()z7y71U!^HvB}f;k%m{y@7L#R>zXT97l-OOVepqcetFh!$2IxY<l*cHb_x3@
z@?!CQdIMdu?^ExvesJb*J$;|&r+@KqX7W%zk{2<2j<4mJ^ZT%i<qu~37Q6L1c&2%_
zmCxvTc0uyn@z?Te^WMpc<im?=KIb{F(O+;=^8l{#pHKeUM{*b4;R|`E>@xc&ZWVpH
zc$@E&ze5gMKX|TnUhxmF&L%hu->=Ulx!(DFf4*;dbLszLe0d@AF6jgQg~s*y|I;@Q
zKQE7mT(o}lCVru3=oj>_PsOqR@Y>=7jSC-tFJG@eZR#&B59t3r`l9mLzJKI7?2cRH
zNym3yT;?;sdFXukz33_9*UWQ$?(AFgXNEVOQv!zuZ@8`>QS|t5=D+`Y-T71I4>ty<
zzGl4ocYd&}kM;aWKFs<TBp-f$lE}&V@6eC?kMZ$W{BP}(-8|u2;u@nX{N=rQe)~91
zKFJ^Ue*CF_!~=Tn`aEZSN^h@^@K5Oq-pG0`zv6+NzCNnKX&onbo}<6UU;Mz)Q`X@r
z^IRPUdx@S#?>!&j<+y%&{yqJc{dx`#e2-p3|F^8?N94&h>wj0bMPI)i<LV1q_w=BC
zr2cdFuZ}CvU*8{ci+;*E2eYI2f%#?Sho}B)egDx9d~N=<m)SGqzj?^tj{opAdhHVW
zzgsu-le)9X;oOhTyPo*^623FOKDvottUjdlpXcwr;jixRHRJ8;wZ3um>?h}I<=X78
z#P!(SJ>Put9RC(KMh|+<N9g=1a_l+u*?sZ7kJfW|D>$Ti1&dFRH{$0xPicPIm*blA
zUe-s3{%D<7<izlycvIqR>l2kevRj|vpKJW0^OL0Rc=f`KBOmt{@7$ed(|n}J?bdr<
z%cs@9);;`!{&zlf>Z!M${7mL)pV7bk4Due%fj8L$;sU=szh`mu)W7qeT;ivwe0VKh
zEx$KkCEvTgL9vr|j!XJtt&e>4KRol1`}v2~ufja&P4N);g#5_4tIOAm->&ubJ9o=I
zHt&p|L3|cp@T<kHFWo+cPT<P-(Esue!$-aUQQpz&5hCB_=WPBqeI$Oz4;p?XuiAg$
zz2EhK{@1@3-LeN#hq-<I!Exo+W*?A4iE|Y%tiCjT2_~01?z^l5yUlvyr^uhlGkQDc
zQm)=Hec@V9Fn>e%W%MiG#CMY$pXIlH0_L6b*;l`dPlGS`6|P-pIP3HCZ+@`%;uL;>
z2Xfvze?%`dkD~qoa%}tEI{gRu%5yFc==M4LyZ+#zf9v`Y9E~3<_f|*3zf$^#?-S3j
zoSFZU-nSq2U)&XLm7n08j^F`&IC+!(THG>zpV|G!W7oEy`~2cLH+%U2`kWRY<viKt
z(>7o8^YibXm$`ge>kg;juVX&zTbQ``;tt8<UL3+YAJ6#+PJ0jiZ(hlxZry$TsI_ya
z7g~@1!0wp6*8J^beEO^XUW(`2e}`Y;0UlVtQSvf*O2aqFV->d?-HKz1!-t;l;<7L2
z=Z#PB&jUO068X{d9ZKi$;PSY0&do>Y%6jiSbN;Zuo&Rrir~Z{ZU=PVBYW-u*6Bj?b
z>nD_Td<x(7obhYo1lQDQt{yt|V$ZcNUjO&_<`=y%eGz}!_#!yxIeL^{_y`}h9=|ww
z{+!lzz8%l){P8cG7M%GS{JZ>Y@!sE@e=i>lpP<j<{j)QyyZgU8-@o{6`&7ucO5N+?
zO!Q^@#-`2~{ZBvR_sBVX^jtbI-=0U7zD~=t(>FjqTI!c~p4i*@KJf~2aPb&)n(uwY
zkG^~RjZf)4&k62gUls?yMn7IdKU?<)eYaM}8ae+FKDyhd(sS(htw(V3{2Sr3_D{ct
z9_;ht{>>X}euVXFUpRV+p8&2vU&)(Vo<#aBE^pOyy`TI;zd1L)`-=|NFCl$(hac$$
z>tz1u72l;EbhtA2UmoaF>-&-Mo%<8MyM~WP=jnr8eYtpE^-b!HYFF)hAB`XLcnZH<
zBBw8*x7kzC%acDjfABqW=@$J^Ikj^M%{%@f@8w_dU0e6yf=lWv#uxH~V^0jP#_k{9
z4qZJx;EVF%{Qj|9(d{+wHNJXH^9;XV!xxw6g`IPUj=d*z{!}_o|I_99WF03T(wB4j
zihuv#_ut|_8lLYtL&ZxE?!Si4iv!nR2|hT+7e6unU_EO$b=^K<Zw`-C4jk`&?K~g&
z$7+|nhaZQ(%=>u$E#F%_SpUiVuUUucm&xmlFHbxCf)5wRa9?oW@*Cq1TfXb@oTt$9
zrTap^2Pcf4?Hjp5uKK^|ou|n2>AMH=fBwkKv+FrI7Jj@%?{s{6IQpw{srs?`Cy&Or
z-ubR;<U{)}ua1^}$@=WP%(vrtrJvBb|F@nyj~G42@7VsyxA50%?(ca3(}T$;yG71l
zyYKcZcz*pwA|H0%dGyZKzkW@5U+5w4B@dpn&e!1f)yd_&kJY7>FX&C{)ObqHBOQM0
czK4D;kw5d#9nYCv4VT(a&xeof+c%g00H<4L%>V!Z

diff --git a/tests/assets/cifar10/y_batch.npy b/tests/assets/cifar10/y_batch.npy
new file mode 100644
index 0000000000000000000000000000000000000000..f3597321c23efcb8474e81897f8107b5f07eb393
GIT binary patch
literal 192
zc$}N;7wQ`j$;eQ~P_3SlTAW;@Zl$1ZlWC!@qoAIaUsO_*m=~X4l#&V(cT3DEP6dh=
mXCxM+0{I#iI+{8PwF(pfE;a@T;6$TYpfn>I%><>{p)>$DN*j#;

diff --git a/tests/assets/mnist/x_batch.npy b/tests/assets/mnist/x_batch.npy
new file mode 100644
index 0000000000000000000000000000000000000000..6497f907053407179f4162bd817a326e20d4ab6a
GIT binary patch
literal 50304
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
SW}l<o#m|@4k0K(TE&LDn!q+$e

diff --git a/tests/assets/mnist/y_batch.npy b/tests/assets/mnist/y_batch.npy
new file mode 100644
index 0000000000000000000000000000000000000000..0409cbecab49449069e82569d0182faaf5e2ca92
GIT binary patch
literal 192
zc$}N;7wQ`j$;eQ~P_3SlTAW;@Zl$1ZlWC!@qoAIaUsO_*m=~X4l#&V(cT3DEP6dh=
mXCxM+0{I#iI+{8PwF(pfE>;FqzyhTip)@CyW<nEZhSC5uk{f>j

diff --git a/tests/assets/sst2/x_batch.npy b/tests/assets/sst2/x_batch.npy
new file mode 100644
index 0000000000000000000000000000000000000000..393a17aff9e1fd525ba66eec139ccc9e0aa7eaff
GIT binary patch
literal 4896
zc%1E5%Zk)c5It`Fio1(K&w$`U#kD(SHnVUg>CU6W^dwEvnMTB~@GJcbQ+N)yawiJT
zVvr#Pm)u8H-Pg&fx<5W$f4utq40rgJ73Hw&vv(nTfBow9+iVlEs_RdE-hS!&qO_3@
z`C%xh{$ZaV%c=e1&F1AMd=C$n=X(InREnvTQwdXPSwFKqu)Ui~&-#gW9rXw5R@AZn
zTlSgm-uXXHC3n7B>R8`_IwSiVj>-Qj|GyYcgbUqkgE>xG>RA1Zc+b|}@GBpNiLdNC
z(BGEh!cf8Sn&UNA%seF#hvbMjF)SDc?(iD}y6==TcFwlvcSoI)ebTit!(8EP#bs7J
zFYVlV{QQHn5m$<5&9<gq@9f2oJ;%0e=bTe~Td^&k^#6kN0{x9#gZ32o)tn>Z{}cXx
z{7+J}cb!qnQ94hL6VF8h;#oFqSFC$ZvT<?UpXQXFkCXC$>-wal7;9^+*_UEqmB$yw
ztbqIXc}9#`1L8di6XG#(gw-!-Q?c%SULfXb=A*!z^9-xvDYN<M#?!S4w`L=*Gwj{q
zK1YfZ#Y4h*fq6Wxoqy9kV#Vb{WGVJ#nCIMzZ2^&QI@eaLu{#kaysp*7Gd<?{n9VaH
z;>h<MolWI@H<;)1T7zQR$<5bd<*dgRz4z=6{2R_=CCzJ=aG3Il`E3yIT6vauFCg++
zz%sTJ%MOU~R@~Vk^34`82Q>Q|_Kj{YOZlDZdWUMyde3TadP@kWp8tGKrMbkP9`nkv
zq?^X*-1!jadLMcV`TtD$WsCVgmU4K&{B5Q4^=tPSNZ<6{_c>WxhsfubSiV=~u6AC^
KnO0flU*s2%h})L{

diff --git a/tests/assets/sst2/y_batch.npy b/tests/assets/sst2/y_batch.npy
new file mode 100644
index 0000000000000000000000000000000000000000..80b10a67d8eec6dc68d1b21a6ad4c1eef8903cc7
GIT binary patch
literal 192
zc$}N;7wQ`j$;eQ~P_3SlTAW;@Zl$1ZlWC!@qoAIaUsO_*m=~X4l#&V(cT3DEP6dh=
fXCxM+0{I#iI+{8PwF(pfE(SEfh%SIb9!3KIF*+M*

diff --git a/tests/assets/titanic/x_batch.npy b/tests/assets/titanic/x_batch.npy
new file mode 100644
index 0000000000000000000000000000000000000000..a823bea5cb5034e0c75df24fd7f15515930638b6
GIT binary patch
literal 37856
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
Y#!P>q^ug+1QNsU<NulG{`~J)S0WwUpn*aa+

diff --git a/tests/assets/titanic/y_batch.npy b/tests/assets/titanic/y_batch.npy
new file mode 100644
index 0000000000000000000000000000000000000000..a5318a1c56a64e1ea444aa8ea4ab25f9db5528b6
GIT binary patch
literal 3272
zc$}N;7wQ`j$;eQ~P_3SlTAW;@Zl$1ZlWC!@qoAIaUsO_*m=~X4l#&V(cT3DEP6dh=
zXCxM+0{I%omc}}oItsN4WCJb+A^{@~KDszAeYo`FQb($KLiUrZkJ{>}<t}pFL99Mv
z<AGRnY2`ms{Y|QSh;;|LJh9@$%99F64G&`V5$iv4`K0E5Lhd4DKC$kgv>c#TIYe&w
z69S~>e`=+FTE#c1fLivEo36>VpIYHSEq9RX9%}iITIrV3aHUuL(W-u?G@nyi?~|L~
X2)Tn?`>0h86045f_@Q=ti&%33rd1p+

diff --git a/tests/assets/cifar_tf_weights.keras b/tests/assets/weights/cifar_cnn.keras
rename from tests/assets/cifar_tf_weights.keras
rename to tests/assets/weights/cifar_cnn.keras
index 306955ea7b7a49754e5dc3094b0906a8aa111cc5..306955ea7b7a49754e5dc3094b0906a8aa111cc5
GIT binary patch
literal 514688
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
z%0D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

diff --git a/tests/assets/cifar10 b/tests/assets/weights/lenet_cifar10.pickle
rename from tests/assets/cifar10
rename to tests/assets/weights/lenet_cifar10.pickle
index b70d46da46d4b62614517029457d08a10523ea33..b70d46da46d4b62614517029457d08a10523ea33
GIT binary patch
literal 251657
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%0Di41^*H&ro8C^T+)o8HYwM*
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

diff --git a/tests/assets/lenet_mnist_weights.keras b/tests/assets/weights/lenet_mnist.keras
rename from tests/assets/lenet_mnist_weights.keras
rename to tests/assets/weights/lenet_mnist.keras
index dae5915de059dc8702089ea7d5e0abf93abfa0a5..dae5915de059dc8702089ea7d5e0abf93abfa0a5
GIT binary patch
literal 264416
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%0D#<^MlNIzvXpl=+`O2`~MuJI=bytZWD?-jt>IA
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

diff --git a/tests/assets/mnist b/tests/assets/weights/mnist.pickle
rename from tests/assets/mnist
rename to tests/assets/weights/mnist.pickle
index 3498f9a2f1f08e9fc4d59968918e1cea19bf49d3..3498f9a2f1f08e9fc4d59968918e1cea19bf49d3
GIT binary patch
literal 181321
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

diff --git a/tests/assets/titanic_model_tensorflow.keras b/tests/assets/weights/titanic.keras
rename from tests/assets/titanic_model_tensorflow.keras
rename to tests/assets/weights/titanic.keras
index 8600911f7816428cd96b1def8b664a3513c9dc03..8600911f7816428cd96b1def8b664a3513c9dc03
GIT binary patch
literal 19568
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
beL#wNwxKzuW6Cm4I*d~TeIW=pZ}IUvnwcm~

diff --git a/tests/assets/titanic_model_torch.pickle b/tests/assets/weights/titanic.pickle
rename from tests/assets/titanic_model_torch.pickle
rename to tests/assets/weights/titanic.pickle
index 8970fb982c4a369fb21b35988870cc8abc8ae8d4..8970fb982c4a369fb21b35988870cc8abc8ae8d4
GIT binary patch
literal 3319
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
GGWLJ_gB`&D

diff --git a/tests/assets/mnist_x b/tests/assets/mnist_x
deleted file mode 100644
index e7ffbec03b72891e7ceedfd69732bcaec8cc5435..0000000000000000000000000000000000000000
GIT binary patch
literal 0
Hc$@<O00001

diff --git a/tests/assets/mnist_y b/tests/assets/mnist_y
deleted file mode 100644
index 782a4141d57a9029f5d513cc9a4ae24376b22c3e..0000000000000000000000000000000000000000
GIT binary patch
literal 0
Hc$@<O00001

diff --git a/tests/assets/unknown_token_embedding.npy b/tests/assets/unknown_token_embedding.npy
new file mode 100644
index 0000000000000000000000000000000000000000..4b20280c246eb4a1b8a1e68e10581c58b5c1d09c
GIT binary patch
literal 3200
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
HrUw2Ofm}ET

